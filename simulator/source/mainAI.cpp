#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <random>
#include <fstream>
#include <chrono>


#include "mainAI.hpp"

#ifdef READ_EPOCH_FILE
#include <dirent.h>
#include <cctype>
#include <algorithm>
#include <sys/stat.h>
#include <sys/types.h>
#endif

#ifdef DEBUG
#include<iostream>
#include<fstream>
#endif

std::chrono::system_clock::time_point  start; // 型は auto で可
using namespace std;

string weightString

vector<vector<double> > mulMatrix(vector<vector<double> > a,vector<vector<double> > b)
{
	int r1 = a.size();
	int c1 = a[0].size();
	int r2 = b.size();
	int c2 = b[0].size();

	cerr << c1 << ":" << r1 << ":" << c2 << ":" << r2 << endl;

	while (c1!=r2)
	{
		cerr << "Error!";
		cin >> c1;
	}

	cerr << "1" << endl;

	vector<vector<double> > result;
	result.resize(r1);
	for(int i = 0; i < r1; i++){
		result[i].resize(c2);
	}

	cerr << "2" << endl;

	// Initializing elements of matrix mult to 0.
	for(int i = 0; i < r1; i++){
		for(int j = 0; j < c2; j++)
		{
			result[i][j]=0;
		}
	}

	cerr << "3" << endl;

	// Multiplying matrix a and b and storing in array mult.
	for(int i = 0; i < r1; i++){
		for(int j = 0; j < c2; j++){
			for(int k = 0; k < c1; k++)
			{
				result[i][j] += a[i][k] * b[k][j];
			}
		}
	}
	return result;
}

std::vector<std::string> split(std::string str, char del) {
	int first = 0;
	int last = str.find_first_of(del);

	std::vector<std::string> result;

	while (first < str.size()) {
		std::string subStr(str, first, last - first);

		result.push_back(subStr);

		first = last + 1;
		last = str.find_first_of(del, first);

		if (last == std::string::npos) {
			last = str.size();
		}
	}

	return result;
}

class Card {
	int cardNumber;
	int instanceId;
	int location;
	int cardType;
	int cost;
	int attack;
	int defense;
	string abilities;
	int myHealthChange;
	int opponentHealthChange;
	int cardDraw;
	bool actionDone;
	int playScore;
	string command;
public:
	Card(int cardNumber, int instanceId, int location, int cardType, int cost, int attack, int defense, string abilities, int myHealthChange, int opponentHealthChange, int cardDraw, bool actionDone){
		this->cardNumber = cardNumber;
		this->instanceId = instanceId;
		this->location = location;
		this->cardType = cardType;
		this->cost = cost;
		this->attack = attack;
		this->defense = defense;
		this->abilities = abilities;
		this->myHealthChange = myHealthChange;
		this->opponentHealthChange = opponentHealthChange;
		this->cardDraw = cardDraw;
		this->actionDone = actionDone;
		this->playScore = 0;
	}

	Card* getCardCopy(){
		return new Card(this->cardNumber, this->instanceId, this->location, this->cardType, this->cost, this->attack, this->defense, this->abilities, this->myHealthChange, this->opponentHealthChange, this->cardDraw, this->actionDone);
	}

	int getDraw(){
		return cardDraw;
	}

	int getCost(){
		return cost;
	}

	int getID(){
		return instanceId;
	}

	int getAttack(){
		return attack;
	}

	int getDefense(){
		return defense;
	}

	string getAbilities(){
		return abilities;
	}

	bool isGuard(){
		return abilities.find("G") != std::string::npos;
	}

	bool isCharge(){
		return abilities.find("C") != std::string::npos;
	}

	bool isLethal(){
		return abilities.find("L") != std::string::npos;
	}

	bool isWard(){
		return abilities.find("W") != std::string::npos;
	}

	bool isDrain(){
		return abilities.find("D") != std::string::npos;
	}

	bool isBreakThrough(){
		return abilities.find("B") != std::string::npos;
	}

	bool getActionDone(){
		return actionDone;
	}

	void doAction(){
		this->actionDone = true;
	}

	int takeDamage(int damage){
		if(damage == 0){
			return 0;
		}
		if(isWard()){
			std::replace(abilities.begin(), abilities.end(), 'W', '-');
		}
		else{
			defense -= damage;
		}
	}

	// hyokati calculation
	int calcBasicValue(){
		if(defense <= 0){
			return 0;
		}
		int base = attack + defense;
		if(isWard()){
			base += attack;
		}
		if(isGuard()){
			base += 1;
		}
		if(isDrain()){
			//base += attack;
		}
		if(isBreakThrough()){
			if(attack >= 5){
				base += attack - 4;
			}
		}
		return base;
	}

	int getType(){
		return cardType;
	}

	bool operator<(const Card& another) const {
		return cost > another.cost;
	}

	void buff(Card* card){
		if(card->isGuard() && !isGuard()){
			abilities += 'G';
		}
		if(card->isLethal() && !isLethal()){
			abilities += 'L';
		}
		if(card->isWard() && !isWard()){
			abilities += 'W';
		}
		if(card->isDrain() && !isDrain()){
			abilities += 'D';
		}
		if(card->isBreakThrough() && !isBreakThrough()){
			abilities += 'B';
		}
		attack += card->getAttack();
		defense += card->getDefense();
	}

	void deBuff(Card* card){
		if(card->isGuard()){
			std::replace(abilities.begin(), abilities.end(), 'G', '-');
		}
		if(card->isLethal()){
			std::replace(abilities.begin(), abilities.end(), 'L', '-');
		}
		if(card->isWard()){
			std::replace(abilities.begin(), abilities.end(), 'W', '-');
		}
		if(card->isDrain()){
			std::replace(abilities.begin(), abilities.end(), 'D', '-');
		}
		if(card->isBreakThrough()){
			std::replace(abilities.begin(), abilities.end(), 'B', '-');
		}
		attack += card->getAttack();
		if(attack < 0){
			attack = 0;
		}
		takeDamage(-card->getDefense());
	}

	void setCommand(string command){
		this->command = command;
	}

	string getCommand(){
		return command;
	}

	int getCardNumber(){
		return cardNumber;
	}

	int getMyHealthChange(){
		return myHealthChange;
	}

	int getOpponentHealthChange(){
		return opponentHealthChange;
	}
};
bool cmp(Card *a, Card *b)
	{
		return (a->getCost() > b->getCost());
	}
class Player {
	int health;
	int mana;
	int deck;
	int rune;
public:
	Player(int health, int mana, int deck, int rune){
		this->health = health;
		this->mana = mana;
		this->deck = deck;
		this->rune = rune;
	}

	Player* getPlayerCopy(){
		return new Player (health, mana, deck, rune);
	}

	int getMana(){
		return mana;
	}

	int getDeck(){
		return deck;
	}

	int getHealth(){
		return health;
	}

	int takeDamage(int damage){
		health -= damage;
	}
};


int executeFight(Card* attacker, Card* target){
	attacker->doAction();
	if(attacker->isLethal() && attacker->getAttack() > 0){
		target->takeDamage(max(attacker->getAttack(), target->getDefense() + 1));
	}
	else{
		target->takeDamage(attacker->getAttack());
	}
	if(target->isLethal() && target->getAttack() > 0){
		attacker->takeDamage(max(target->getAttack(), attacker->getDefense() + 1));
	}
	else{
		attacker->takeDamage(target->getAttack());
	}
}


int getTradeScore(Card* me, Card* target){
	int initialScore = me->calcBasicValue() - target->calcBasicValue();
	Card* meCopy = me->getCardCopy();
	Card* targetCopy = target->getCardCopy();
	executeFight(meCopy, targetCopy);
	int afterScore = meCopy->calcBasicValue() - targetCopy->calcBasicValue();
	return afterScore - initialScore;
}

int LEATHAL_DANGER_VALUE = 7;
bool isSente = false;
int totalPick = 0;

class TradeScore
{
  public:
	int enemyIndex;
	int myIndex;
	double score;

	TradeScore(int enemyIndex, int myIndex, double score)
	{
		this->enemyIndex = enemyIndex;
		this->myIndex = myIndex;
		this->score = score;
	}
};

double getBoardScore(vector<Card*> myBoardCard, vector<Card*> enemyBoardCard, Player* me, Player* enemy){
	// enemy lethal
	int lethalScore = 0;
	bool hasTaunt = false;
	for(Card* enemyCard: enemyBoardCard){
		if(enemyCard->isGuard()){
			hasTaunt = true;
			break;
		}
	}
	int totalAttack = 0;
	int totalAttackHealth = 0;
	int nextTotalAttack = 0;
	int lifeStealTotal = 0;
	int enemyAttackTotal = 0;
	//cerr << "myboard" << endl;
	for(Card* card: myBoardCard){
		cerr << card->getID();
		nextTotalAttack += card->getAttack();
		totalAttackHealth += card->getDefense();
		if(!card->getActionDone()){
			totalAttack += card->getAttack();
		}
	}

	//cerr << endl << "enemyboard" << endl;
	for(Card* card: enemyBoardCard){
		cerr << card->getID();
		enemyAttackTotal += card->getAttack();
		if(card -> isDrain()){
			lifeStealTotal += card->getAttack();
		}
	}

	if(totalAttackHealth - enemyAttackTotal > 0){
		nextTotalAttack = nextTotalAttack * (totalAttackHealth - enemyAttackTotal) / totalAttackHealth;
	}
	else{
		nextTotalAttack = 0;
	}

	//cerr << endl;
	if((!hasTaunt && totalAttack >= enemy->getHealth()) || enemy->getHealth() <= 0){
		lethalScore = 10000;
	}
	else if(!hasTaunt && totalAttack + nextTotalAttack + LEATHAL_DANGER_VALUE >= enemy->getHealth() + lifeStealTotal){
		lethalScore = totalAttack + nextTotalAttack + LEATHAL_DANGER_VALUE - enemy->getHealth() - lifeStealTotal;
	}

	// next turn leathal score


	// min max algorizm
	// enemy card value is max(enemy card, max tradable my card)
	// my card value is max(my card, min tradable enemy card)
	int myCardValueTotal = 0;
	int myDefenceTotal = 0;
	for(Card* myCard: myBoardCard){
		int minTradeScore = 999;

		if(myCard->isGuard()){
			myDefenceTotal += myCard->getDefense();
		}
		int basicValue = myCard->calcBasicValue();
		if(minTradeScore != 999){
			myCardValueTotal += max(basicValue, minTradeScore + basicValue);
		}
		else{
			myCardValueTotal += basicValue;
		}
	}

	int enemyCardValueTotal = 0;
	enemyAttackTotal = 0;

	// donyoku trade search
	int* tradeValue = new int[enemyBoardCard.size()];
	bool *enemyTradeCompleted = new bool[myBoardCard.size()];
	for (int i = 0; i < enemyBoardCard.size(); i ++){
		tradeValue[i] = -999;
		enemyTradeCompleted[i] = false;
	}
	bool* myTradeCompleted = new bool[myBoardCard.size()];
	for (int i = 0; i < myBoardCard.size(); i ++){
		myTradeCompleted[i] = false;
	}
	vector<TradeScore*> trades;

	for (int i = 0; i < myBoardCard.size(); i++)
	{
		if (myDefenceTotal > 0 && !myBoardCard[i]->isGuard())
		{
			continue;
		}
		for (int n = 0; n < enemyBoardCard.size(); n++)
		{
			int score = getTradeScore(enemyBoardCard[n], myBoardCard[i]);
			if(score > 0){
				trades.push_back(new TradeScore(n, i, score));
			}
		}
	}

	sort(trades.begin(), trades.end(), [](const auto &lhs, const auto &rhs) {
		return lhs->score > rhs->score;
	});

	for(TradeScore* trade: trades){
		cerr << "trade:" << trade->score << endl;
		if (myTradeCompleted[trade->myIndex] == false && enemyTradeCompleted[trade->enemyIndex] == false){
			enemyCardValueTotal += trade->score;
			myTradeCompleted[trade->myIndex] = true;
			enemyTradeCompleted[trade->enemyIndex] = true;
		}
	}
	for (Card *enemyCard : enemyBoardCard){
		int basicValue = enemyCard->calcBasicValue();
		enemyAttackTotal += enemyCard->getAttack();
		enemyCardValueTotal += basicValue;
	}

		// avoid enemy leathal
	int leathalPenalty = 0;
	if(enemyAttackTotal >= me->getHealth() + myDefenceTotal - LEATHAL_DANGER_VALUE){
		leathalPenalty = (enemyAttackTotal - myDefenceTotal - me->getHealth() + LEATHAL_DANGER_VALUE + 1) * 100;
	}

	double finalScore = myCardValueTotal - enemyCardValueTotal - leathalPenalty + lethalScore;

	if(enemyBoardCard.size() == 0){
		finalScore += 0.5;
	}
	if(myBoardCard.size() == 0){
		finalScore -= 0.5;
	}

	return finalScore;
}

class SaikiResult{
public:
	vector<Card*> useCards;
	double score;

	SaikiResult(vector<Card*> useCards, double score){
		this->useCards = useCards;
		this->score = score;
	}
};

class Game {
	vector<Card*> myHandCard;
	vector<Card*> myBoardCard;
	vector<Card*> enemyBoardCard;
	Player* me;
	Player* opponent;
	std::stringstream ss;
	vector<Game*> nextGames;

	int manaLeft;
public:
	Game(vector<Card*> myHandCard, vector<Card*> myBoardCard, vector<Card*> enemyBoardCard, Player* me, Player* opponent, string ss, int manaLeft){
		this->myHandCard = myHandCard;
		this->myBoardCard = myBoardCard;
		this->enemyBoardCard = enemyBoardCard;
		this->me = me;
		this->opponent = opponent;
		this->ss << ss;
		this->manaLeft = manaLeft;
	}

	vector<Game*> getNextGames(){
		if(nextGames.size() > 0){
			return nextGames;
		}
		else{
			// 貪欲だが、1階層目だけ展開する

			double maxScore = -99999999;
			Game* resultGame = nullptr;
			double currentBoardScore = getBoardScore(myBoardCard, enemyBoardCard, me, opponent);

			for(Card* card: myBoardCard){
				// deal yuuri trade
				if(card->getAttack() == 0 || card->getActionDone()){
					continue;
				}
				Card* targetCard = nullptr;
				bool hasTaunt = false;
				// taunt
				for(Card* enemyCard: enemyBoardCard){
					if(enemyCard->isGuard()){
						hasTaunt = true;
						Game* simulateResult = simulateTrade(card, enemyCard);
						nextGames.push_back(simulateResult);
					}
				}
				if (!hasTaunt) {
					// calculate face attack value
					Game* simulateResult = simulateTrade(card, nullptr);
					nextGames.push_back(simulateResult);

					for(Card* enemyCard: enemyBoardCard){
						Game* simulateResult = simulateTrade(card, enemyCard);
						nextGames.push_back(simulateResult);
					}
				}
			}
		}
		return nextGames;
	}

	int originalSimulation(bool goToFace, Game** game){

		// 貪欲だが、1階層目だけ展開する

		double maxScore = -99999999;
		Game* resultGame = nullptr;

		for(Game* game: getNextGames()){
			vector<Game*> finalGames = game->getNextGames();
			for(Game* finalGame: finalGames){
				double score = finalGame->getGameBoardScore();
				if(score > maxScore){
					maxScore = score;
					resultGame = game;
				}
			}
		}

		// PASS
		if(resultGame == nullptr){
			resultGame = getCopy();
			resultGame->addString("PASS;");
		}
		*game = resultGame;
		return maxScore;
	}

	Game* simulation(bool goToFace){

		int maxScore = -99999999;
		Game* resultGame = nullptr;

		for(Card* card: myBoardCard){
			// deal yuuri trade
			if(card->getAttack() == 0 || card->getActionDone()){
				continue;
			}
			Card* targetCard = nullptr;
			bool hasTaunt = false;
			// taunt
			for(Card* enemyCard: enemyBoardCard){
				if(enemyCard->isGuard()){
					hasTaunt = true;
					Game* simulateResult = simulateTrade(card, enemyCard);
					double score = simulateResult->getGameBoardScore();
					if(score > maxScore){
						maxScore = score;
						resultGame = simulateResult;
						if(maxScore > 9000){
							return resultGame;
						}
					}
				}
			}
			if (!hasTaunt) {
				// calculate face attack value
				Game* simulateResult = simulateTrade(card, nullptr);
				double faceScore = simulateResult->getGameBoardScore();
				if(faceScore > maxScore){
					maxScore = faceScore;
					resultGame = simulateResult;
					if(maxScore > 9000){
						return resultGame;
					}
				}

				for(Card* enemyCard: enemyBoardCard){
					Game* simulateResult = simulateTrade(card, enemyCard);
					double score = simulateResult->getGameBoardScore();
					if(score > maxScore){
						maxScore = score;
						resultGame = simulateResult;
						if(maxScore > 9000){
							return resultGame;
						}
					}
				}
			}
		}

		// PASS
		if(resultGame == nullptr){
			resultGame = getCopy();
			resultGame->addString("PASS;");
		}

		return resultGame;
	}


Game* simulateTrade(Card* attacker, Card* target){
	vector<Card*> myBoardCardCopy;
	vector<Card*> enemyBoardCardCopy;
	Player* meCopy = me->getPlayerCopy();
	Player* enemyCopy = opponent->getPlayerCopy();
	std::stringstream ssCopy;
	ssCopy << ss.str(); // copy everything inside ss1's buffer to ss2's buffer
	// make copy board
	for(Card* card: myBoardCard){
		if(attacker->getID() == card->getID()){
			attacker = card->getCardCopy();
			myBoardCardCopy.push_back(attacker);
		}
		else{
			myBoardCardCopy.push_back(card);
		}
	}
	for(Card* card: enemyBoardCard){
		if(target != nullptr && target->getID() == card->getID()){
			target = card->getCardCopy();
			enemyBoardCardCopy.push_back(target);
		}
		else{
			enemyBoardCardCopy.push_back(card);
		}
	}
	if(target != nullptr){
		if(attacker->isDrain() && !target->isWard()){
			meCopy->takeDamage(-attacker->getAttack());
		}
		executeFight(attacker, target);
		// trunple
		if(attacker->isBreakThrough()){
			if(target->getDefense() < 0){
				enemyCopy->takeDamage(-target->getDefense());
			}
		}
	}
	// face
	else {
		if(attacker->isDrain()){
			meCopy->takeDamage(-attacker->getAttack());
		}
		attacker->doAction();
		enemyCopy->takeDamage(attacker->getAttack());
	}
	// jyoukyou kiin syori
	auto itr = myBoardCardCopy.begin();
	while (itr != myBoardCardCopy.end())
	{
		if ((*itr)->getDefense() <= 0)
		{
			itr = myBoardCardCopy.erase(itr);
		}
		else
		{
			itr++;
		}
	}

	itr = enemyBoardCardCopy.begin();
	while (itr != enemyBoardCardCopy.end())
	{
		if ((*itr)->getDefense() <= 0)
		{
			itr = enemyBoardCardCopy.erase(itr);
		}
		else
		{
			itr++;
		}
	}
	if(target != nullptr){
		ssCopy << "ATTACK " << attacker->getID() << " " << target->getID() << ";";
	}
	else{
		ssCopy << "ATTACK " << attacker->getID() << " " << -1 << ";";
	}
	return new Game(myHandCard, myBoardCardCopy, enemyBoardCardCopy, meCopy, enemyCopy, ssCopy.str(), manaLeft);
}


	Game* getCopy(){
		vector<Card*> myHandCardCopy;
		vector<Card*> myBoardCardCopy;
		vector<Card*> enemyBoardCardCopy;
		Player* meCopy;
		Player* opponentCopy;
		std::stringstream ssCopy;
		ssCopy << ss.str(); // copy everything inside ss1's buffer to ss2's buffer

		// make copy board
		for(Card* card: myHandCard){
			myHandCardCopy.push_back(card->getCardCopy());
		}
		for(Card* card: myBoardCard){
			myBoardCardCopy.push_back(card->getCardCopy());
		}
		for(Card* card: enemyBoardCard){
			enemyBoardCardCopy.push_back(card->getCardCopy());
		}
		meCopy = me->getPlayerCopy();
		opponentCopy = opponent->getPlayerCopy();
		return new Game(myHandCardCopy, myBoardCardCopy, enemyBoardCardCopy, meCopy, opponentCopy, ssCopy.str(), manaLeft);
	}

	double saikiUpperTime = 50;
	std::chrono::system_clock::time_point saikiTime; // 型は auto で可


	SaikiResult* saikiPlayCard(int index, vector<Card*> currentPlay, int leftMana, int boardLeft, Game* current){
		SaikiResult* result = new SaikiResult(currentPlay, 0);
		vector<Card*> playCard;

		double elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(saikiTime-start).count(); //処理に要した時間をミリ秒に変換
		cerr << "time:" << elapsed << endl;
		if(elapsed > saikiUpperTime){
			result->score = -99999999;
			return result;
		}
		if(myHandCard.size() <= index){
			saikiTime = std::chrono::system_clock::now();  // 計測終了時間
			Game* copyGame = current->getCopy();
			int score = 0;
			int totalDraw = 0;
			for(Card* card: currentPlay){
				totalDraw += card->getDraw();
				// use health only cards
				if(card->getType() == 3 && card->getDefense() == 0){
					totalDraw += 2;
				}
			}
			// simulate trade
			while(copyGame->getCommands().find("PASS") == std::string::npos){
				copyGame = copyGame->simulation(false);
			}
			result->score = copyGame->getGameBoardScore() - currentPlay.size() + totalDraw;
			return result;
		}
		result = saikiPlayCard(index + 1, currentPlay, leftMana, boardLeft, current);
		if(boardLeft == 0 && myHandCard[index]->getType() == 0){
			return result;
		}

		if(myHandCard[index]->getCost() <= leftMana){
			if(myHandCard[index]->getType() == 0){
				boardLeft --;
			}
			vector<Card*> newPlay;
			SaikiResult* tmpResult;
			int tmpScore = 0;
			for(Card* card: currentPlay){
				newPlay.push_back(card);
			}
			Card* playCardCopy = myHandCard[index]->getCardCopy();
			newPlay.push_back(playCardCopy);
			if(playCardCopy->getType() == 0){
				boardLeft --;
			}

			Game* newBoard = current->getCopy();
			newBoard->setBestCardPlay(playCardCopy, newBoard->getGameBoardScore());
			newBoard->playCard(playCardCopy);

			tmpResult = saikiPlayCard(index + 1, newPlay, leftMana - myHandCard[index]->getCost(), boardLeft, newBoard);
			if(tmpResult->score > result->score){
				result = tmpResult;
			}
		}

		return result;
	}

	double getGameBoardScore(){
		return getBoardScore(myBoardCard, enemyBoardCard, me, opponent);
	}

	vector<Card*> calcBestPlayCards(bool goToFace){
		vector<Card*> firstCards;
		return saikiPlayCard(0, firstCards, manaLeft, 6 - myBoardCard.size(), this)->useCards;
	}

	void setBestCardPlay(Card* hand, int currentBoardScore){
		// health change
		Player* copyMe = me->getPlayerCopy();
		Player* copyOpponent = opponent->getPlayerCopy();
		copyMe->takeDamage(-hand->getMyHealthChange());
		copyOpponent->takeDamage(-hand->getOpponentHealthChange());

		if(hand->getType() == 1){
			if(myBoardCard.size() != 0){
				double maxScore = -99999;
				for(Card* targetCreature : myBoardCard){
					vector<Card*> myBoardCardCopy;
					for(Card* card: myBoardCard){
						if(targetCreature->getID() == card->getID()){
							Card* buffedCard = card->getCardCopy();
							buffedCard->buff(hand);
							myBoardCardCopy.push_back(buffedCard);
						}
						else{
							myBoardCardCopy.push_back(card);
						}
					}
					Game* current = new Game(myHandCard, myBoardCardCopy, enemyBoardCard, copyMe, copyOpponent, "", manaLeft);
					while(current->getCommands().find("PASS") == std::string::npos){
						current = current->simulation(false);
					}
					double score = current->getGameBoardScore() - currentBoardScore - 1 + hand->getDraw();
					if(score > maxScore){
						maxScore = score;
						std::stringstream ss;
						ss << "USE " << hand->getID() << " " << targetCreature->getID() << ";";
						hand->setCommand(ss.str());
					}
				}
			}
			else{

			}
		}
		else if(hand->getType() == 2){
			if(enemyBoardCard.size() != 0){
				double maxScore = -99999;
				for(Card* targetCreature : enemyBoardCard){
					vector<Card*> enemyBoardCardCopy;
					for(Card* card: enemyBoardCard){
						if(targetCreature->getID() == card->getID()){
							Card* buffedCard = card->getCardCopy();
							buffedCard->deBuff(hand);
							enemyBoardCardCopy.push_back(buffedCard);
							// jyoukyou kiin syori
							auto itr = enemyBoardCardCopy.begin();
							itr = enemyBoardCardCopy.begin();
							while (itr != enemyBoardCardCopy.end())
							{
								if ((*itr)->getDefense() <= 0)
								{
									itr = enemyBoardCardCopy.erase(itr);
								}
								else
								{
									itr++;
								}
							}
						}
						else{
							enemyBoardCardCopy.push_back(card);
						}
					}
					Game* current = new Game(myHandCard, myBoardCard, enemyBoardCardCopy, copyMe, copyOpponent, "", manaLeft);
					while(current->getCommands().find("PASS") == std::string::npos){
						current = current->simulation(false);
					}
					double score = current->getGameBoardScore() - currentBoardScore - 1 + hand->getDraw();
					if(score > maxScore){
						maxScore = score;
						std::stringstream ss;
						ss << "USE " << hand->getID() << " " << targetCreature->getID() << ";";
						hand->setCommand(ss.str());
					}
				}
			}
			else{

			}
		}
		else if(hand->getType() == 3){
			if(hand->getDefense() < 0){
				double maxScore = -99999;
				// target player score
				Player* damagedOpponent = copyOpponent->getPlayerCopy();
				damagedOpponent->takeDamage(-hand->getDefense());
				Game* current = new Game(myHandCard, myBoardCard, enemyBoardCard, copyMe, damagedOpponent, "", manaLeft);
				while(current->getCommands().find("PASS") == std::string::npos){
					current = current->simulation(false);
				}
				maxScore = current->getGameBoardScore() - currentBoardScore - 1 + hand->getDraw();
				std::stringstream ss;
				ss << "USE " << hand->getID() << " " << "-1" << ";";
				hand->setCommand(ss.str());

				for(Card* targetCreature : enemyBoardCard){
					vector<Card*> enemyBoardCardCopy;
					for(Card* card: enemyBoardCard){
						if(targetCreature->getID() == card->getID()){
							Card* buffedCard = card->getCardCopy();
							buffedCard->deBuff(hand);
							enemyBoardCardCopy.push_back(buffedCard);
							// jyoukyou kiin syori
							auto itr = enemyBoardCardCopy.begin();
							itr = enemyBoardCardCopy.begin();
							while (itr != enemyBoardCardCopy.end())
							{
								if ((*itr)->getDefense() <= 0)
								{
									itr = enemyBoardCardCopy.erase(itr);
								}
								else
								{
									itr++;
								}
							}
						}
						else{
							enemyBoardCardCopy.push_back(card);
						}
					}
					Game* current = new Game(myHandCard, myBoardCard, enemyBoardCardCopy, copyMe, copyOpponent, "", manaLeft);
					while(current->getCommands().find("PASS") == std::string::npos){
						current = current->simulation(false);
					}
					double score = current->getGameBoardScore() - currentBoardScore - 1 + hand->getDraw();
					if(score > maxScore){
						maxScore = score;
						std::stringstream ss;
						ss << "USE " << hand->getID() << " " << targetCreature->getID() << ";";
						hand->setCommand(ss.str());
					}
				}
			}
			else{
				int score = getBoardScore(myBoardCard, enemyBoardCard, copyMe, copyOpponent) - currentBoardScore + 1 + hand->getDraw();
				std::stringstream ss;
				ss << "USE " << hand->getID() << " -1" << ";";
				hand->setCommand(ss.str());
			}
		}
		else if(hand->getType() == 0){
			if(hand->isCharge() && myBoardCard.size() < 6){
				vector<Card*> myBoardCardCopy;
				for(Card* card: myBoardCard){
					myBoardCardCopy.push_back(card);
				}
				myBoardCardCopy.push_back(hand);

				Game* current = new Game(myHandCard, myBoardCardCopy, enemyBoardCard, copyMe, copyOpponent, "", manaLeft);
				while(current->getCommands().find("PASS") == std::string::npos){
					current = current->simulation(false);
				}
				double score = current->getGameBoardScore() - currentBoardScore - 1 + hand->getDraw();
				std::stringstream ss;
				ss << "SUMMON " << hand->getID() << ";";
				hand->setCommand(ss.str());
			}
			else if(myBoardCard.size() < 6){
				vector<Card*> myBoardCardCopy;
				for(Card* card: myBoardCard){
					myBoardCardCopy.push_back(card);
				}
				myBoardCardCopy.push_back(hand);
				std::stringstream ss;
				ss << "SUMMON " << hand->getID() << ";";
				hand->setCommand(ss.str());
			}
			else{

			}
		}
#ifdef DEBUG_PRINT
		cerr << hand->getID() << "playValueBefore=" << hand->getPlayScore() << endl;
#endif
	}

	void playCard(Card* card){
		// remove from hand
		auto itr = myHandCard.begin();
		while (itr != myHandCard.end())
		{
			if ((*itr)->getID() == card->getID())
			{
				itr = myHandCard.erase(itr);
				break;
			}
			else
			{
				itr++;
			}
		}

		// health change
		me->takeDamage(-card->getMyHealthChange());
		opponent->takeDamage(-card->getOpponentHealthChange());

		if(card->getType() == 0 && myBoardCard.size() < 6){
			ss << "SUMMON " << card->getID() << ";";
			addMyCardToBoard(card);
			// charge
			if(!card->isCharge()){
				card->doAction();
			}
			manaLeft -= card->getCost();
		}
		else if(card->getType() == 1 && card->getCommand() != ""){
			ss << card->getCommand();
			int targetID = std::atoi(split(card->getCommand(), ' ')[2].c_str());
			for(Card* target: myBoardCard){
				if(targetID == target->getID()){
					target->buff(card);
					break;
				}
			}
			manaLeft -= card->getCost();
		}
		else if(card->getType() == 2 && card->getCommand() != ""){
			ss << card->getCommand();
			int targetID = std::atoi(split(card->getCommand(), ' ')[2].c_str());
			for(Card* target: enemyBoardCard){
				if(targetID == target->getID()){
					target->deBuff(card);
					// jyoukyou kiin syori
					auto itr = enemyBoardCard.begin();
					itr = enemyBoardCard.begin();
					while (itr != enemyBoardCard.end())
					{
						if ((*itr)->getDefense() <= 0)
						{
							itr = enemyBoardCard.erase(itr);
						}
						else
						{
							itr++;
						}
					}
					break;
				}
			}
			manaLeft -= card->getCost();
		}
		else if(card->getType() == 3 && card->getCommand() != ""){
			ss << card->getCommand();
			int targetID = std::atoi(split(card->getCommand(), ' ')[2].c_str());
			if(targetID != -1){
				for(Card* target: enemyBoardCard){
					if(targetID == target->getID()){
						target->deBuff(card);
						// jyoukyou kiin syori
						auto itr = enemyBoardCard.begin();
						itr = enemyBoardCard.begin();
						while (itr != enemyBoardCard.end())
						{
							if ((*itr)->getDefense() <= 0)
							{
								itr = enemyBoardCard.erase(itr);
							}
							else
							{
								itr++;
							}
						}
						break;
					}
				}
			}
			manaLeft -= card->getCost();
		}
	}

	string getCommands(){
		return ss.str();
	}

	void addMyCardToBoard(Card* card){
		myBoardCard.push_back(card);
	}

	void addString(string str){
	   ss << str;
	}
};

// mana curve
int* manaCurve = new int[13];
int idealManaCurve[13] = {2, 6, 4, 6, 3, 3, 2, 2, 1, 1, 1, 1, 1};

// by statistics
int senteIdealManaCurve[13] = {0, 0, 2, 6, 5, 5, 6, 4, 4, 2, 0, 0, 2};
int goteIdealManaCurve[13] = {5, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// card cost counts
int catdCostCounts[13] = {7,12,33,28,30,18,15,7,5,3,0,0,2};

int* currentDeck = new int[160];
int pickedCard = 0;
int HIDDEN_SIZE = 100;
vector<vector<vector<double> > > w;
vector<vector<double> > b;

vector<vector<double> > relu(vector<vector<double> > input){
	int r = input.size();
	int c = input[0].size();
	for(int i = 0; i < r; i ++){
		for(int n = 0; n < c; n ++){
			if(input[i][n] < 0){
				input[i][n] = 0;
			}
		}
	}
	return input;
}

vector<vector<double> > sigmoid(vector<vector<double> > input){
	int r = input.size();
	int c = input[0].size();
	for(int i = 0; i < r; i ++){
		for(int n = 0; n < c; n ++){
			input[i][n] = 1/(1 + exp(-input[i][n]));
		}
	}
	return input;
}

vector<vector<double> > tanh(vector<vector<double> > input){
	int r = input.size();
	int c = input[0].size();
	for(int i = 0; i < r; i ++){
		for(int n = 0; n < c; n ++){
			input[i][n] = (1 - exp(-2 * input[i][n])) / (1 + exp(-2 * input[i][n]));
		}
	}
	return input;
}

string activation;

vector<vector<double> > applyActivation(vector<vector<double> > input){
	cerr << activation << endl;
	if(activation == "\"relu\""){
		return relu(input);
	}
	if(activation == "\"tanh\""){
		return tanh(input);
	}
	if(activation == "\"sigmoid\""){
		return sigmoid(input);
	}
	//exit(1);
}

vector<vector<double> > getOneHot(){

	vector<vector<double> > result;
	result.resize(1);
	result[0].resize(643);
	for(int i = 0; i < 160; i++){
		if(currentDeck[i] == 0){
			result[0][i * 4] = 1;
		}
		if(currentDeck[i] == 1){
			result[0][i * 4 + 1] = 1;
		}
		if(currentDeck[i] == 2){
			result[0][i * 4 + 2] = 1;
		}
		if(currentDeck[i] >= 3){
			result[0][i * 4 + 3] = 1;
		}
	}
	if(isSente){
		result[0][640] = 1;
		result[0][641] = 0;
	}
	else{
		result[0][640] = 1;
		result[0][641] = 0;
	}
	result[0][642] = totalPick;
	return result;
}

vector<vector<double> > calcNN(){
	vector<vector<double> > inputVector = getOneHot();

	// calc matrix 1
	cerr << "layer1" << endl;
	vector<vector<double> > x1 = mulMatrix(inputVector, w[0]);
	cerr << "endmul" << endl;
	for(int i = 0; i < HIDDEN_SIZE; i ++){
		x1[0][i] += b[0][i];
	}
	//applyActivation(x1);
	x1 = relu(x1);
	// calc matrix 2
	cerr << "layer2" << endl;
	vector<vector<double> > x2 = mulMatrix(x1, w[1]);
	for(int i = 0; i < HIDDEN_SIZE; i ++){
		x2[0][i] += b[1][i];
	}
	//applyActivation(x2);
	x2 = relu(x2);
	// calc matrix 3
	cerr << "layer3" << endl;
	vector<vector<double> > x3 = mulMatrix(x2, w[2]);
	for(int i = 0; i < 160; i ++){
		x3[0][i] += b[2][i];
	}
	x3 = tanh(x3);
	//applyActivation(x3);
	return x3;
}

string modelDir;
string logFileName;
string logDirName;
string confDir;
int hidden_size = 0;

#ifdef READ_EPOCH_FILE
void readModel(){
	std::string str;

	// read activation
	std::ifstream ifs(confDir);
	if (ifs.fail()){
		std::cerr << "失敗" << std::endl;
		return;
	}
	while (getline(ifs, str)){
		str.erase(remove(str.begin(), str.end(),' '), str.end());
		if(str.substr(0, 10) == "activation"){
			activation = str.substr(11);
		}
		if(str.substr(0, 10) == "activation"){
			activation = str.substr(11);
		}
	}

	// load bias
	for(int n = 0; n < 3; n ++){
		cerr << "read bias file" << n << endl;
		string fileName;
		int size;
		if(n == 0){
			fileName = modelDir + "/Inference-Forward1-biases.csv";
		} else if(n == 1){
			fileName = modelDir + "/Inference-Forward2-biases.csv";
		} else if(n == 2){
			fileName = modelDir + "/Inference-Output-biases.csv";
		}
		std::ifstream ifs(fileName);
		if (ifs.fail()){
			std::cerr << "失敗" << std::endl;
			return;
		}
		//b[n] = new double[size];
		vector<double> oneLine;
		while (getline(ifs, str)){
			oneLine.push_back(std::atof(str.c_str()));
		}
		b.push_back(oneLine);
	}

	// load weight
	for(int n = 0; n < 3; n ++){
		cerr << "read weight file" << n << endl;
		string fileName;
		int size1, size2;
		if(n == 0){
			fileName = modelDir  + "/Inference-Forward1-weights.csv";
		} else if(n == 1){
			fileName = modelDir  + "/Inference-Forward2-weights.csv";
		} else if(n == 2){
			fileName = modelDir  + "/Inference-Output-weights.csv";
		}
		std::ifstream ifs(fileName);
		if (ifs.fail()){
			std::cerr << "失敗" << std::endl;
			return;
		}
		vector< vector <double> > weight;
		while (getline(ifs, str)){
			vector<string> result = split(str, ' ');
			vector<double> oneLine;
			for(int j = 0; j < result.size(); j ++){
				oneLine.push_back(std::atof(result[j].c_str()));
			}
			weight.push_back(oneLine);
		}
		w.push_back(weight);
	}
	cerr << "read weight done" << endl;
}
#endif

int main(int argc,char *argv[])
{

#ifdef DEBUG
	cerr << "debug mode" << endl;
#endif
#ifdef RANDOM_PICK
	cerr << "random mode" << endl;
#endif
#ifdef READ_EPOCH_FILE
	cerr << "epoch mode" << endl;
#endif
#ifdef TEKAGEN
	cerr << "tekagen mode" << endl;
#endif
#ifdef DEBUG_PRINT
	cerr << "debug print mode" << endl;
#endif


#ifdef DEBUG
	logDirName = argv[1];
#endif

#ifdef READ_EPOCH_FILE
	modelDir = argv[2];
	confDir = argv[3];
	readModel();
	for(int i = 0; i < 160; i ++){
		currentDeck[i] = 1;
	}
	vector<vector<double> > nn = calcNN();
	for(int i = 0; i < 160; i ++){
		cerr << nn[0][i] << endl;
	}
#endif

	for(int i = 0; i < 160; i ++){
		currentDeck[i] = 0;
	}
	for(int i = 0; i < 13; i ++){
		manaCurve[i] = 0;
	}

	double** weight = new double*[160];
	for(int i = 0; i < 160; i ++){
		weight[i] = new double[160];
	}

	int strCnt = 0;
	for(int i = 0; i < 160; i ++){
        for(int j = i; j < 160; j ++){
			string target = weightString.substr(strCnt * 4, 4);
			weight[i][j] = (double)std::atoi(target.c_str()) / 1000;
			weight[j][i] = (double)std::atoi(target.c_str()) / 1000;
			strCnt ++;
		}
	}

	// game loop
	while (1) {
		vector<Card*> myHandCard;
		vector<Card*> myBoardCard;
		vector<Card*> enemyBoardCard;
		Player* me;
		Player* opponent;
		for (int i = 0; i < 2; i++) {
			int playerHealth;
			int playerMana;
			int playerDeck;
			int playerRune;
			cin >> playerHealth >> playerMana >> playerDeck >> playerRune; cin.ignore();
			cerr << playerHealth << " " << playerMana << " " << playerDeck << " " << playerRune << endl;
			if(i == 0){
				me = new Player(playerHealth, playerMana, playerDeck, playerRune);
			}
			else {
				opponent = new Player(playerHealth, playerMana, playerDeck, playerRune);
			}
		}
		int opponentHand;
		cin >> opponentHand; cin.ignore();
		int cardCount;
		cin >> cardCount; cin.ignore();
		for (int i = 0; i < cardCount; i++) {
			int cardNumber;
			int instanceId;
			int location;
			int cardType;
			int cost;
			int attack;
			int defense;
			string abilities;
			int myHealthChange;
			int opponentHealthChange;
			int cardDraw;
			cin >> cardNumber >> instanceId >> location >> cardType >> cost >> attack >> defense >> abilities >> myHealthChange >> opponentHealthChange >> cardDraw; cin.ignore();
			cerr << cardNumber << " " << instanceId << " " << location << " " << cardType << " " << cost << " " << attack << " " << defense << " " << abilities << " " << myHealthChange << " " << opponentHealthChange << " " << cardDraw << endl;
			Card* card = new Card(cardNumber, instanceId, location, cardType, cost, attack, defense, abilities, myHealthChange, opponentHealthChange, cardDraw, false);
			if(location == 0){
				myHandCard.push_back(card);
			}
			else if (location == 1){
				myBoardCard.push_back(card);
			}
			else if(location == -1){
				enemyBoardCard.push_back(card);
			}
		}

		start = std::chrono::system_clock::now(); // 計測開始時間

		// while draft phase
		Card* lowestCard = nullptr;

		if(me->getDeck() == opponent->getDeck()){
			isSente = true;
		}
		else{
			isSente = false;
		}

		int lowestIndex = -1;
		double maxScore = -9999999;
		int i = 0;
		double expectedManaCurve[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
		for(int n = 0; n < 13; n ++){
			expectedManaCurve[n] = manaCurve[n] + (30 - pickedCard - 1) * ((double)catdCostCounts[n] / 160);
#ifdef DEBUG_PRINT
			cerr << "mana" << n << ":" << manaCurve[n] << endl;
			cerr << "expedtedmana" << n << ":" << expectedManaCurve[n] << endl;
#endif
		}


		// think about mana curve
		if(me->getMana() == 0){
			for(Card* card: myHandCard){
				//double score = idealManaCurve[card->getCost()] - expectedManaCurve[card->getCost()];
				double score = 0;
				for(int i = 0; i < 160; i ++){
					if(i == card->getCardNumber() - 1){
						score += weight[card->getCardNumber() - 1][i];
					}
					else {
						score += weight[card->getCardNumber() - 1][i] * currentDeck[card->getCardNumber() - 1];
					}
				}
#ifndef TEKAGEN

				//score += cardValues[card->getCardNumber() - 1] * 200;
#endif
#ifdef READ_EPOCH_FILE
				//score = calcNN()[0][card->getCardNumber() - 1];
#endif
				/*if(card->getType() != 0){
					score = -9999;
				}*/
				cerr << maxScore << endl;
				if(lowestCard == nullptr || maxScore < score){
					lowestCard = card;
					lowestIndex = i;
					maxScore = score;
				}
				i ++;
			}
#ifdef RANDOM_PICK
			std::random_device rd;
			std::mt19937 mt(rd());
			std::uniform_int_distribution<int> dice(0,10);
			int rnd = dice(mt);
			if(rnd <= 2){
				lowestIndex = rnd;
				lowestCard = myHandCard[lowestIndex];
			}
#endif

			cerr << lowestIndex << endl;
			cout << "PICK " << lowestIndex << endl;
			totalPick ++;

#ifdef DEBUG
			ofstream outputfile(logDirName, ios::app);
			for(int i = 0; i < 160; i++){
				outputfile << currentDeck[i] << " ";
			}
			outputfile << endl;
			for(Card* card: myHandCard){
				outputfile << card->getCardNumber() - 1 << " ";
			}
			outputfile << endl;
			outputfile << lowestCard->getCardNumber() - 1 << endl;
			outputfile.close();
#endif DEBUG

			currentDeck[lowestCard->getCardNumber() - 1]++;
			manaCurve[lowestCard->getCost()]++;
			pickedCard ++;
		}
		else{
			// judge leathal
			bool goToFace = false;
			int totalAttack = 0;
			int totalDefence = 0;
			for(Card* card: myBoardCard){
				totalAttack += card->getAttack();
			}
			for(Card* card: enemyBoardCard){
				totalDefence += card->getDefense();
			}
			if(totalAttack * 2 > opponent->getHealth() + totalDefence){
				goToFace = true;
			}

			// battle phase
			cerr << goToFace << endl;
			Game* current = new Game(myHandCard, myBoardCard, enemyBoardCard, me, opponent, "", me->getMana());

			// make play card score
			vector<Card*> beforePlayCards = current->calcBestPlayCards(goToFace);
			for(Card* card: beforePlayCards){
				cerr << "beforePlay:" << card->getCommand() << endl;
				current->playCard(card);
			}


			vector<Game*> history;
			vector<int> scoreHistory;
			history.push_back(current);
			scoreHistory.push_back(current->getGameBoardScore());
			while(current->getCommands().find("PASS") == std::string::npos){
				Game* next;
				int score = current->originalSimulation(goToFace, &next);
				history.push_back(next);
				scoreHistory.push_back(score);
				current = next;
				//cerr << current->getCommands() << endl;
			}

			int passIndex = current->getCommands().find("PASS");

			vector<Card*> playCards;

			// play cards untill no more want to play
			playCards = current->calcBestPlayCards(false);
			while(playCards.size() > 0){
				for(Card* card: playCards){
					current -> playCard(card);
				}
				playCards = current->calcBestPlayCards(false);
			}

			// use chage cards
			current = current->simulation(goToFace);
			while(current->getCommands().find("PASS", passIndex + 1) == std::string::npos){
				current = current->simulation(goToFace);
				cerr << current->getCommands() << endl;
			}

			std::chrono::system_clock::time_point  end; // 型は auto で可
			end = std::chrono::system_clock::now();  // 計測終了時間
			double elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end-start).count(); //処理に要した時間をミリ秒に変換

			cout << current->getCommands() << "PASS " << elapsed << "ms;" << endl;
		}

	}
}
