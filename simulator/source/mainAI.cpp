#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <random>
#include <fstream>
#include <chrono>


#include "mainAI.hpp"

//8/4 use card value
// 80 to 15! so strong

#ifdef READ_EPOCH_FILE
#include <dirent.h>
#include <cctype>
#include <algorithm>
#include <sys/stat.h>
#include <sys/types.h>
#endif

#ifdef DEBUG
#include<iostream>
#include<fstream>
#endif

std::chrono::system_clock::time_point  start; // 型は auto で可
//{{0.503,0.499,0.505,0.500,0.502,0.507,0.508,0.502,0.504,0.499,0.503,0.505,0.503,0.490,0.497,0.499,0.505,0.505,0.501,0.481,0.503,0.511,0.509,0.498,0.506,0.504,0.495,0.506,0.498,0.505,0.485,0.509,0.503,0.503,0.488,0.515,0.508,0.489,0.502,0.489,0.491,0.478,0.489,0.502,0.493,0.497,0.503,0.515,0.512,0.506,0.509,0.505,0.508,0.505,0.477,0.489,0.473,0.499,0.512,0.486,0.506,0.499,0.493,0.507,0.509,0.506,0.507,0.512,0.509,0.502,0.505,0.497,0.501,0.500,0.505,0.490,0.502,0.501,0.498,0.504,0.506,0.502,0.500,0.512,0.500,0.502,0.505,0.508,0.508,0.497,0.509,0.493,0.505,0.487,0.501,0.503,0.508,0.505,0.506,0.502,0.485,0.497,0.501,0.497,0.501,0.503,0.484,0.499,0.509,0.476,0.507,0.491,0.478,0.508,0.513,0.506,0.494,0.505,0.504,0.484,0.511,0.485,0.491,0.450,0.501,0.497,0.491,0.509,0.508,0.491,0.469,0.471,0.502,0.485,0.506,0.505,0.496,0.475,0.509,0.440,0.498,0.493,0.472,0.505,0.499,0.468,0.514,0.505,0.499,0.504,0.508,0.506,0.438,0.474,0.504,0.472,0.505,0.508,0.478,0.436},{0.499,0.501,0.503,0.498,0.497,0.501,0.507,0.509,0.511,0.500,0.501,0.504,0.496,0.474,0.500,0.480,0.505,0.507,0.497,0.489,0.505,0.504,0.502,0.500,0.506,0.516,0.494,0.493,0.505,0.492,0.492,0.509,0.504,0.486,0.485,0.515,0.500,0.498,0.506,0.489,0.493,0.497,0.473,0.504,0.489,0.492,0.498,0.503,0.512,0.501,0.503,0.506,0.507,0.498,0.467,0.491,0.471,0.497,0.504,0.489,0.495,0.499,0.482,0.505,0.507,0.504,0.500,0.511,0.498,0.497,0.507,0.493,0.498,0.505,0.506,0.485,0.505,0.495,0.496,0.499,0.503,0.500,0.503,0.506,0.502,0.499,0.503,0.502,0.486,0.494,0.499,0.504,0.496,0.481,0.506,0.501,0.507,0.496,0.501,0.506,0.499,0.502,0.506,0.494,0.506,0.501,0.473,0.490,0.506,0.450,0.505,0.495,0.485,0.507,0.505,0.502,0.501,0.506,0.492,0.491,0.501,0.499,0.498,0.484,0.491,0.505,0.502,0.505,0.505,0.473,0.513,0.469,0.506,0.515,0.509,0.500,0.470,0.474,0.508,0.453,0.507,0.487,0.488,0.501,0.502,0.463,0.509,0.509,0.488,0.501,0.508,0.504,0.458,0.470,0.495,0.478,0.501,0.500,0.467,0.459},{0.505,0.503,0.502,0.498,0.506,0.504,0.512,0.508,0.507,0.493,0.502,0.506,0.508,0.464,0.504,0.497,0.505,0.512,0.504,0.489,0.508,0.500,0.504,0.500,0.501,0.509,0.495,0.503,0.508,0.496,0.490,0.504,0.502,0.510,0.496,0.506,0.505,0.498,0.500,0.493,0.501,0.464,0.481,0.504,0.489,0.492,0.499,0.506,0.511,0.510,0.513,0.504,0.509,0.506,0.461,0.492,0.464,0.490,0.498,0.488,0.499,0.494,0.478,0.508,0.508,0.508,0.509,0.509,0.506,0.499,0.515,0.490,0.506,0.503,0.504,0.476,0.505,0.515,0.499,0.503,0.500,0.504,0.500,0.505,0.503,0.503,0.503,0.499,0.502,0.507,0.504,0.490,0.496,0.490,0.506,0.506,0.506,0.500,0.505,0.503,0.508,0.488,0.507,0.500,0.503,0.500,0.491,0.486,0.508,0.455,0.503,0.502,0.459,0.509,0.505,0.508,0.497,0.505,0.501,0.477,0.500,0.501,0.475,0.472,0.494,0.503,0.498,0.497,0.497,0.500,0.477,0.479,0.504,0.494,0.509,0.511,0.489,0.474,0.506,0.457,0.502,0.494,0.485,0.503,0.496,0.469,0.509,0.500,0.493,0.508,0.512,0.508,0.416,0.475,0.508,0.469,0.498,0.501,0.501,0.456},{0.500,0.498,0.498,0.496,0.503,0.501,0.495,0.494,0.501,0.507,0.502,0.485,0.500,0.479,0.493,0.467,0.509,0.503,0.507,0.494,0.496,0.492,0.488,0.489,0.511,0.520,0.504,0.516,0.500,0.492,0.493,0.489,0.493,0.505,0.437,0.486,0.504,0.501,0.502,0.495,0.484,0.466,0.508,0.501,0.490,0.492,0.499,0.496,0.493,0.496,0.499,0.479,0.492,0.501,0.429,0.501,0.484,0.482,0.487,0.476,0.507,0.495,0.468,0.511,0.498,0.509,0.511,0.511,0.492,0.505,0.524,0.494,0.486,0.493,0.494,0.470,0.498,0.491,0.497,0.502,0.487,0.497,0.503,0.479,0.496,0.501,0.502,0.501,0.476,0.501,0.488,0.483,0.504,0.513,0.496,0.482,0.495,0.487,0.500,0.516,0.471,0.463,0.501,0.495,0.497,0.500,0.454,0.440,0.500,0.451,0.491,0.492,0.507,0.504,0.512,0.489,0.482,0.483,0.477,0.451,0.505,0.488,0.477,0.474,0.501,0.499,0.490,0.503,0.499,0.475,0.494,0.462,0.508,0.468,0.504,0.506,0.487,0.464,0.508,0.467,0.503,0.478,0.486,0.494,0.499,0.465,0.518,0.509,0.478,0.504,0.500,0.504,0.434,0.479,0.503,0.467,0.498,0.487,0.462,0.440},{0.502,0.497,0.506,0.503,0.503,0.507,0.498,0.514,0.502,0.506,0.510,0.506,0.511,0.494,0.506,0.474,0.507,0.507,0.511,0.492,0.497,0.497,0.503,0.498,0.518,0.510,0.496,0.508,0.507,0.502,0.502,0.512,0.502,0.495,0.481,0.506,0.504,0.504,0.506,0.485,0.504,0.488,0.492,0.501,0.489,0.500,0.486,0.503,0.512,0.497,0.512,0.513,0.510,0.510,0.459,0.476,0.490,0.493,0.504,0.499,0.495,0.501,0.507,0.501,0.503,0.507,0.506,0.503,0.507,0.497,0.481,0.498,0.506,0.503,0.503,0.476,0.505,0.495,0.501,0.506,0.504,0.500,0.504,0.492,0.499,0.506,0.507,0.507,0.499,0.504,0.505,0.492,0.492,0.496,0.503,0.503,0.513,0.502,0.509,0.506,0.484,0.480,0.503,0.505,0.500,0.511,0.481,0.491,0.502,0.472,0.505,0.504,0.486,0.509,0.507,0.501,0.508,0.500,0.498,0.484,0.487,0.512,0.459,0.482,0.506,0.499,0.500,0.494,0.500,0.487,0.474,0.446,0.503,0.501,0.514,0.509,0.493,0.491,0.505,0.460,0.499,0.485,0.502,0.504,0.509,0.474,0.520,0.503,0.483,0.505,0.509,0.509,0.451,0.466,0.505,0.458,0.498,0.497,0.488,0.429},{0.507,0.501,0.504,0.501,0.507,0.506,0.509,0.502,0.507,0.483,0.506,0.518,0.512,0.480,0.508,0.499,0.515,0.513,0.510,0.496,0.502,0.497,0.501,0.509,0.516,0.520,0.491,0.492,0.507,0.504,0.492,0.507,0.507,0.503,0.485,0.513,0.508,0.500,0.508,0.492,0.497,0.471,0.489,0.510,0.477,0.496,0.521,0.510,0.508,0.506,0.514,0.506,0.514,0.508,0.480,0.496,0.456,0.509,0.508,0.501,0.510,0.505,0.469,0.516,0.504,0.512,0.511,0.513,0.509,0.508,0.503,0.501,0.515,0.497,0.508,0.490,0.508,0.516,0.503,0.506,0.502,0.513,0.497,0.509,0.503,0.504,0.514,0.507,0.509,0.500,0.506,0.493,0.509,0.502,0.505,0.500,0.500,0.504,0.511,0.506,0.481,0.495,0.507,0.502,0.509,0.495,0.494,0.498,0.502,0.438,0.514,0.505,0.477,0.506,0.506,0.513,0.497,0.510,0.505,0.489,0.512,0.489,0.471,0.488,0.502,0.508,0.509,0.500,0.507,0.498,0.484,0.484,0.509,0.491,0.509,0.506,0.503,0.458,0.509,0.465,0.507,0.502,0.478,0.506,0.508,0.481,0.509,0.523,0.499,0.514,0.510,0.510,0.442,0.494,0.508,0.463,0.507,0.502,0.494,0.433},{0.508,0.507,0.512,0.495,0.498,0.509,0.509,0.508,0.504,0.489,0.512,0.509,0.512,0.506,0.516,0.489,0.503,0.510,0.509,0.496,0.505,0.514,0.502,0.505,0.512,0.518,0.498,0.493,0.509,0.502,0.500,0.509,0.511,0.502,0.490,0.506,0.510,0.507,0.502,0.500,0.502,0.478,0.503,0.507,0.493,0.497,0.499,0.512,0.514,0.513,0.512,0.512,0.515,0.514,0.474,0.484,0.483,0.501,0.506,0.488,0.508,0.513,0.480,0.515,0.512,0.516,0.514,0.517,0.511,0.503,0.498,0.501,0.503,0.503,0.505,0.488,0.509,0.506,0.504,0.509,0.508,0.512,0.507,0.509,0.511,0.492,0.511,0.508,0.495,0.495,0.514,0.495,0.506,0.513,0.514,0.507,0.508,0.505,0.516,0.501,0.495,0.498,0.509,0.499,0.506,0.504,0.487,0.506,0.499,0.455,0.507,0.511,0.483,0.514,0.511,0.511,0.501,0.512,0.505,0.487,0.510,0.505,0.472,0.472,0.500,0.502,0.494,0.512,0.511,0.496,0.487,0.494,0.508,0.484,0.507,0.494,0.499,0.493,0.518,0.448,0.505,0.503,0.478,0.505,0.505,0.482,0.516,0.516,0.489,0.507,0.520,0.508,0.463,0.492,0.510,0.482,0.513,0.506,0.474,0.470},{0.502,0.509,0.508,0.494,0.514,0.502,0.508,0.504,0.495,0.515,0.515,0.506,0.492,0.473,0.510,0.503,0.513,0.508,0.513,0.472,0.503,0.504,0.504,0.504,0.493,0.497,0.499,0.499,0.518,0.506,0.491,0.509,0.508,0.498,0.507,0.506,0.497,0.502,0.507,0.497,0.513,0.473,0.490,0.505,0.501,0.495,0.523,0.515,0.516,0.508,0.514,0.490,0.508,0.504,0.464,0.494,0.489,0.505,0.522,0.497,0.501,0.509,0.491,0.500,0.507,0.500,0.512,0.521,0.510,0.509,0.505,0.495,0.499,0.504,0.515,0.514,0.500,0.502,0.501,0.516,0.506,0.500,0.490,0.512,0.509,0.509,0.506,0.500,0.510,0.504,0.507,0.501,0.500,0.508,0.502,0.498,0.508,0.502,0.498,0.501,0.509,0.493,0.501,0.512,0.498,0.478,0.486,0.498,0.511,0.470,0.505,0.500,0.475,0.504,0.516,0.512,0.498,0.510,0.506,0.483,0.501,0.491,0.471,0.466,0.495,0.503,0.503,0.513,0.515,0.489,0.487,0.478,0.510,0.502,0.517,0.488,0.509,0.479,0.528,0.455,0.515,0.506,0.497,0.508,0.517,0.495,0.509,0.513,0.513,0.511,0.501,0.512,0.435,0.495,0.509,0.484,0.503,0.504,0.470,0.430},{0.504,0.511,0.507,0.501,0.502,0.507,0.504,0.495,0.502,0.493,0.503,0.504,0.501,0.470,0.504,0.492,0.499,0.506,0.507,0.490,0.499,0.499,0.501,0.499,0.499,0.511,0.499,0.492,0.503,0.490,0.496,0.507,0.507,0.508,0.491,0.508,0.511,0.499,0.504,0.493,0.495,0.470,0.504,0.501,0.465,0.496,0.490,0.504,0.512,0.513,0.506,0.498,0.510,0.500,0.474,0.478,0.462,0.477,0.506,0.493,0.501,0.497,0.468,0.511,0.505,0.504,0.512,0.507,0.503,0.496,0.505,0.502,0.490,0.501,0.501,0.484,0.498,0.510,0.506,0.511,0.503,0.506,0.497,0.510,0.501,0.495,0.502,0.502,0.503,0.502,0.508,0.494,0.502,0.487,0.508,0.505,0.504,0.496,0.509,0.501,0.493,0.480,0.501,0.508,0.500,0.500,0.478,0.490,0.503,0.463,0.502,0.505,0.466,0.505,0.509,0.512,0.502,0.507,0.504,0.476,0.506,0.497,0.478,0.466,0.497,0.500,0.498,0.504,0.496,0.497,0.477,0.487,0.510,0.499,0.505,0.499,0.486,0.464,0.508,0.440,0.502,0.493,0.481,0.505,0.502,0.462,0.509,0.515,0.497,0.505,0.512,0.505,0.445,0.482,0.507,0.490,0.502,0.503,0.499,0.463},{0.499,0.500,0.493,0.507,0.506,0.483,0.489,0.515,0.493,0.485,0.492,0.508,0.486,0.471,0.492,0.477,0.486,0.486,0.480,0.464,0.487,0.497,0.492,0.488,0.514,0.505,0.478,0.503,0.488,0.502,0.484,0.494,0.485,0.496,0.466,0.485,0.491,0.485,0.474,0.491,0.494,0.481,0.463,0.488,0.463,0.479,0.494,0.483,0.478,0.490,0.497,0.490,0.487,0.481,0.458,0.474,0.484,0.465,0.490,0.453,0.489,0.465,0.471,0.475,0.493,0.489,0.493,0.487,0.484,0.462,0.487,0.474,0.494,0.496,0.491,0.448,0.496,0.491,0.489,0.488,0.483,0.491,0.472,0.488,0.491,0.477,0.499,0.502,0.482,0.492,0.500,0.470,0.500,0.480,0.494,0.504,0.495,0.455,0.510,0.482,0.410,0.463,0.494,0.481,0.494,0.489,0.460,0.472,0.502,0.438,0.503,0.494,0.483,0.495,0.487,0.494,0.489,0.496,0.471,0.465,0.488,0.476,0.451,0.432,0.483,0.485,0.487,0.478,0.491,0.475,0.482,0.452,0.500,0.493,0.493,0.473,0.494,0.447,0.504,0.458,0.493,0.483,0.479,0.496,0.472,0.509,0.483,0.503,0.481,0.488,0.496,0.495,0.452,0.454,0.492,0.441,0.485,0.495,0.504,0.444},{0.503,0.501,0.502,0.502,0.510,0.506,0.512,0.515,0.503,0.492,0.504,0.504,0.504,0.482,0.500,0.496,0.506,0.510,0.501,0.490,0.503,0.501,0.506,0.497,0.510,0.502,0.499,0.509,0.504,0.497,0.480,0.504,0.501,0.501,0.477,0.510,0.506,0.505,0.504,0.480,0.488,0.469,0.487,0.501,0.489,0.489,0.505,0.510,0.507,0.502,0.509,0.505,0.511,0.508,0.475,0.500,0.478,0.496,0.502,0.495,0.501,0.497,0.477,0.502,0.506,0.508,0.508,0.507,0.502,0.490,0.509,0.481,0.504,0.505,0.502,0.462,0.503,0.492,0.500,0.507,0.504,0.500,0.497,0.512,0.500,0.501,0.505,0.504,0.491,0.500,0.509,0.494,0.501,0.473,0.507,0.509,0.503,0.490,0.502,0.503,0.497,0.494,0.494,0.499,0.502,0.495,0.488,0.492,0.498,0.462,0.500,0.490,0.480,0.505,0.499,0.507,0.499,0.505,0.500,0.495,0.499,0.503,0.481,0.483,0.497,0.503,0.518,0.503,0.505,0.482,0.478,0.476,0.503,0.494,0.510,0.499,0.486,0.478,0.502,0.429,0.502,0.494,0.480,0.502,0.498,0.489,0.502,0.512,0.495,0.507,0.512,0.509,0.426,0.483,0.507,0.445,0.504,0.507,0.504,0.466},{0.505,0.504,0.506,0.485,0.506,0.518,0.509,0.506,0.504,0.508,0.504,0.504,0.509,0.497,0.504,0.475,0.502,0.506,0.510,0.489,0.506,0.518,0.504,0.497,0.509,0.502,0.502,0.499,0.506,0.497,0.495,0.507,0.508,0.522,0.483,0.512,0.509,0.504,0.497,0.502,0.502,0.475,0.494,0.508,0.507,0.508,0.497,0.503,0.503,0.504,0.504,0.503,0.506,0.497,0.454,0.493,0.490,0.492,0.515,0.490,0.495,0.507,0.480,0.504,0.509,0.508,0.508,0.507,0.514,0.504,0.515,0.500,0.499,0.503,0.517,0.478,0.507,0.508,0.513,0.505,0.503,0.505,0.499,0.517,0.509,0.520,0.511,0.500,0.506,0.505,0.494,0.496,0.500,0.481,0.501,0.504,0.507,0.497,0.511,0.510,0.495,0.483,0.510,0.509,0.502,0.501,0.509,0.488,0.510,0.482,0.506,0.505,0.489,0.503,0.513,0.505,0.498,0.507,0.497,0.494,0.502,0.502,0.495,0.475,0.500,0.503,0.510,0.509,0.507,0.485,0.478,0.483,0.506,0.494,0.516,0.499,0.491,0.458,0.508,0.465,0.511,0.502,0.490,0.509,0.507,0.502,0.506,0.502,0.500,0.511,0.517,0.509,0.456,0.489,0.517,0.483,0.502,0.508,0.485,0.459},{0.503,0.496,0.508,0.500,0.511,0.512,0.512,0.492,0.501,0.486,0.504,0.509,0.500,0.460,0.502,0.494,0.502,0.504,0.501,0.491,0.505,0.506,0.506,0.495,0.498,0.503,0.501,0.479,0.498,0.500,0.489,0.501,0.506,0.481,0.482,0.514,0.506,0.497,0.507,0.497,0.505,0.463,0.452,0.498,0.479,0.503,0.496,0.505,0.501,0.505,0.512,0.514,0.501,0.495,0.465,0.495,0.473,0.492,0.496,0.492,0.498,0.505,0.490,0.510,0.499,0.498,0.513,0.509,0.509,0.508,0.504,0.506,0.486,0.493,0.495,0.482,0.504,0.506,0.509,0.504,0.503,0.509,0.501,0.510,0.500,0.498,0.500,0.503,0.498,0.511,0.501,0.491,0.492,0.499,0.501,0.512,0.503,0.505,0.502,0.496,0.490,0.467,0.502,0.513,0.506,0.502,0.456,0.466,0.514,0.438,0.505,0.501,0.478,0.500,0.499,0.499,0.492,0.498,0.502,0.476,0.497,0.493,0.488,0.487,0.484,0.500,0.491,0.488,0.501,0.483,0.493,0.479,0.497,0.490,0.501,0.492,0.503,0.492,0.512,0.468,0.508,0.497,0.485,0.499,0.508,0.479,0.504,0.510,0.492,0.511,0.514,0.505,0.448,0.493,0.505,0.486,0.502,0.494,0.459,0.438},{0.490,0.474,0.464,0.479,0.494,0.480,0.506,0.473,0.470,0.471,0.482,0.497,0.460,0.475,0.472,0.486,0.488,0.454,0.470,0.458,0.490,0.463,0.458,0.457,0.516,0.462,0.479,0.454,0.482,0.449,0.450,0.464,0.478,0.469,0.461,0.468,0.492,0.479,0.467,0.487,0.461,0.427,0.486,0.486,0.482,0.492,0.472,0.489,0.488,0.484,0.469,0.433,0.479,0.471,0.465,0.470,0.439,0.472,0.474,0.448,0.484,0.482,0.452,0.500,0.482,0.453,0.482,0.446,0.487,0.476,0.446,0.467,0.485,0.454,0.490,0.487,0.485,0.434,0.476,0.496,0.487,0.473,0.510,0.469,0.465,0.492,0.484,0.470,0.467,0.505,0.498,0.461,0.480,0.492,0.461,0.481,0.466,0.468,0.484,0.479,0.470,0.446,0.482,0.501,0.494,0.492,0.459,0.463,0.470,0.438,0.480,0.474,0.452,0.478,0.475,0.477,0.476,0.458,0.484,0.446,0.485,0.476,0.455,0.423,0.487,0.476,0.483,0.478,0.468,0.424,0.477,0.443,0.477,0.490,0.493,0.472,0.451,0.425,0.489,0.429,0.465,0.461,0.467,0.469,0.492,0.468,0.470,0.481,0.458,0.464,0.475,0.450,0.429,0.445,0.490,0.438,0.475,0.492,0.427,0.432},{0.497,0.500,0.504,0.493,0.506,0.508,0.516,0.510,0.504,0.492,0.500,0.504,0.502,0.472,0.503,0.500,0.508,0.510,0.511,0.496,0.496,0.483,0.509,0.505,0.487,0.517,0.493,0.505,0.507,0.502,0.484,0.507,0.498,0.512,0.486,0.500,0.510,0.501,0.505,0.490,0.494,0.472,0.499,0.512,0.490,0.498,0.497,0.501,0.509,0.506,0.506,0.499,0.512,0.503,0.454,0.504,0.469,0.504,0.507,0.493,0.512,0.500,0.477,0.508,0.509,0.507,0.506,0.509,0.506,0.501,0.508,0.500,0.504,0.498,0.505,0.475,0.509,0.488,0.495,0.499,0.500,0.500,0.502,0.513,0.506,0.510,0.506,0.499,0.495,0.506,0.509,0.498,0.503,0.496,0.503,0.505,0.506,0.496,0.509,0.492,0.480,0.504,0.508,0.515,0.496,0.484,0.472,0.476,0.513,0.463,0.499,0.499,0.464,0.507,0.506,0.503,0.495,0.493,0.504,0.475,0.501,0.506,0.510,0.482,0.494,0.509,0.503,0.503,0.505,0.479,0.498,0.474,0.511,0.499,0.513,0.498,0.481,0.453,0.502,0.461,0.512,0.508,0.497,0.506,0.498,0.476,0.498,0.502,0.493,0.511,0.517,0.505,0.455,0.494,0.513,0.490,0.514,0.513,0.482,0.446},{0.499,0.480,0.497,0.467,0.474,0.499,0.489,0.503,0.492,0.477,0.496,0.475,0.494,0.486,0.500,0.492,0.512,0.498,0.490,0.480,0.460,0.437,0.490,0.496,0.489,0.507,0.505,0.491,0.475,0.513,0.455,0.493,0.479,0.496,0.452,0.500,0.482,0.485,0.500,0.513,0.489,0.413,0.510,0.504,0.479,0.470,0.474,0.502,0.495,0.499,0.496,0.514,0.507,0.486,0.465,0.469,0.482,0.485,0.503,0.451,0.496,0.486,0.513,0.498,0.503,0.482,0.501,0.500,0.491,0.466,0.511,0.483,0.478,0.497,0.484,0.454,0.479,0.484,0.499,0.477,0.493,0.498,0.487,0.505,0.464,0.493,0.512,0.497,0.488,0.503,0.498,0.469,0.498,0.489,0.494,0.479,0.501,0.487,0.497,0.495,0.488,0.468,0.481,0.494,0.496,0.514,0.483,0.451,0.489,0.474,0.496,0.474,0.484,0.504,0.487,0.513,0.479,0.502,0.485,0.507,0.493,0.477,0.481,0.451,0.481,0.474,0.502,0.494,0.490,0.493,0.474,0.480,0.500,0.486,0.505,0.466,0.505,0.475,0.500,0.446,0.487,0.473,0.472,0.497,0.515,0.467,0.501,0.480,0.507,0.498,0.495,0.500,0.438,0.466,0.482,0.504,0.507,0.499,0.470,0.447},{0.505,0.505,0.505,0.509,0.507,0.515,0.503,0.513,0.499,0.486,0.506,0.502,0.502,0.488,0.508,0.512,0.503,0.502,0.499,0.497,0.502,0.493,0.498,0.499,0.501,0.503,0.500,0.498,0.501,0.493,0.489,0.510,0.488,0.483,0.493,0.507,0.505,0.502,0.501,0.495,0.495,0.470,0.486,0.499,0.482,0.487,0.491,0.508,0.506,0.497,0.505,0.512,0.511,0.514,0.466,0.481,0.496,0.496,0.500,0.498,0.501,0.507,0.481,0.504,0.509,0.509,0.509,0.512,0.504,0.499,0.480,0.509,0.504,0.500,0.502,0.478,0.507,0.503,0.503,0.504,0.513,0.508,0.499,0.506,0.507,0.507,0.505,0.511,0.504,0.509,0.504,0.498,0.504,0.504,0.505,0.509,0.507,0.499,0.506,0.504,0.479,0.488,0.504,0.508,0.503,0.500,0.489,0.493,0.499,0.461,0.506,0.509,0.482,0.508,0.508,0.507,0.491,0.503,0.509,0.492,0.502,0.489,0.467,0.465,0.507,0.497,0.501,0.505,0.507,0.492,0.498,0.484,0.503,0.486,0.512,0.498,0.494,0.484,0.509,0.467,0.501,0.499,0.472,0.501,0.508,0.479,0.510,0.510,0.486,0.513,0.506,0.509,0.438,0.475,0.501,0.478,0.504,0.504,0.485,0.450},{0.505,0.507,0.512,0.503,0.507,0.513,0.510,0.508,0.506,0.486,0.510,0.506,0.504,0.454,0.510,0.498,0.502,0.506,0.508,0.508,0.502,0.513,0.508,0.497,0.516,0.510,0.497,0.500,0.503,0.499,0.495,0.509,0.503,0.500,0.478,0.496,0.503,0.503,0.510,0.487,0.495,0.451,0.471,0.508,0.482,0.512,0.493,0.506,0.511,0.507,0.511,0.516,0.513,0.512,0.468,0.488,0.467,0.477,0.505,0.488,0.509,0.502,0.489,0.513,0.513,0.506,0.507,0.512,0.506,0.509,0.523,0.511,0.507,0.502,0.503,0.472,0.504,0.488,0.502,0.505,0.502,0.498,0.503,0.506,0.511,0.508,0.507,0.506,0.505,0.499,0.510,0.497,0.503,0.505,0.515,0.498,0.515,0.505,0.510,0.496,0.503,0.460,0.510,0.497,0.510,0.497,0.505,0.490,0.504,0.457,0.505,0.486,0.494,0.507,0.506,0.512,0.499,0.508,0.507,0.472,0.509,0.486,0.487,0.482,0.504,0.507,0.504,0.505,0.507,0.494,0.464,0.451,0.506,0.489,0.509,0.505,0.502,0.479,0.511,0.456,0.511,0.491,0.492,0.504,0.507,0.480,0.517,0.521,0.509,0.508,0.514,0.508,0.440,0.475,0.512,0.474,0.502,0.500,0.486,0.461},{0.501,0.497,0.504,0.507,0.511,0.510,0.509,0.513,0.507,0.480,0.501,0.510,0.501,0.470,0.511,0.490,0.499,0.508,0.502,0.486,0.509,0.499,0.504,0.494,0.509,0.522,0.495,0.510,0.498,0.495,0.493,0.513,0.497,0.496,0.500,0.507,0.505,0.501,0.499,0.501,0.501,0.478,0.486,0.495,0.487,0.490,0.495,0.509,0.502,0.507,0.511,0.510,0.509,0.507,0.474,0.479,0.472,0.494,0.510,0.495,0.501,0.498,0.496,0.508,0.510,0.510,0.513,0.511,0.502,0.495,0.521,0.493,0.512,0.512,0.499,0.442,0.503,0.486,0.509,0.503,0.503,0.514,0.500,0.508,0.502,0.491,0.498,0.502,0.508,0.503,0.507,0.504,0.504,0.486,0.502,0.495,0.507,0.502,0.503,0.503,0.478,0.483,0.500,0.500,0.495,0.507,0.482,0.486,0.513,0.432,0.505,0.516,0.477,0.502,0.511,0.502,0.500,0.505,0.504,0.472,0.508,0.499,0.489,0.488,0.499,0.502,0.507,0.508,0.505,0.510,0.494,0.486,0.511,0.495,0.505,0.504,0.498,0.478,0.506,0.445,0.509,0.481,0.504,0.505,0.508,0.484,0.513,0.508,0.490,0.505,0.513,0.507,0.439,0.487,0.504,0.482,0.506,0.510,0.454,0.465},{0.481,0.489,0.489,0.494,0.492,0.496,0.496,0.472,0.490,0.464,0.490,0.489,0.491,0.458,0.496,0.480,0.497,0.508,0.486,0.489,0.474,0.473,0.477,0.485,0.495,0.499,0.473,0.491,0.488,0.465,0.473,0.488,0.502,0.478,0.486,0.499,0.501,0.499,0.484,0.484,0.471,0.482,0.465,0.493,0.458,0.478,0.479,0.503,0.503,0.489,0.496,0.497,0.500,0.506,0.467,0.483,0.464,0.497,0.513,0.470,0.475,0.500,0.458,0.506,0.502,0.492,0.489,0.490,0.490,0.500,0.503,0.489,0.484,0.502,0.489,0.468,0.487,0.492,0.474,0.498,0.504,0.476,0.502,0.500,0.488,0.507,0.484,0.485,0.476,0.477,0.489,0.476,0.485,0.496,0.503,0.491,0.488,0.480,0.484,0.470,0.493,0.491,0.489,0.488,0.488,0.501,0.464,0.457,0.498,0.454,0.481,0.469,0.459,0.500,0.492,0.493,0.471,0.500,0.501,0.494,0.491,0.500,0.441,0.456,0.509,0.498,0.497,0.494,0.486,0.518,0.459,0.442,0.487,0.488,0.514,0.485,0.492,0.487,0.477,0.440,0.491,0.494,0.475,0.493,0.490,0.436,0.484,0.498,0.468,0.491,0.503,0.506,0.415,0.478,0.479,0.475,0.489,0.491,0.484,0.414},{0.503,0.505,0.508,0.496,0.497,0.502,0.505,0.503,0.499,0.487,0.503,0.506,0.505,0.490,0.496,0.460,0.502,0.502,0.509,0.474,0.502,0.496,0.501,0.496,0.505,0.517,0.505,0.503,0.502,0.491,0.486,0.512,0.500,0.498,0.496,0.503,0.504,0.504,0.506,0.492,0.501,0.483,0.493,0.506,0.495,0.499,0.494,0.507,0.509,0.504,0.505,0.495,0.509,0.498,0.466,0.500,0.493,0.489,0.496,0.476,0.513,0.500,0.492,0.509,0.507,0.502,0.499,0.509,0.505,0.497,0.496,0.501,0.508,0.505,0.506,0.466,0.506,0.490,0.500,0.503,0.509,0.503,0.500,0.506,0.500,0.505,0.489,0.502,0.517,0.490,0.502,0.501,0.502,0.507,0.510,0.506,0.504,0.494,0.502,0.505,0.475,0.492,0.503,0.508,0.504,0.494,0.475,0.461,0.496,0.488,0.504,0.499,0.483,0.515,0.510,0.505,0.495,0.510,0.496,0.502,0.506,0.501,0.469,0.440,0.506,0.495,0.494,0.506,0.505,0.473,0.488,0.481,0.504,0.500,0.502,0.511,0.486,0.479,0.514,0.437,0.513,0.493,0.482,0.498,0.503,0.474,0.511,0.503,0.505,0.501,0.517,0.507,0.449,0.486,0.504,0.489,0.511,0.500,0.501,0.444},{0.511,0.504,0.500,0.492,0.497,0.497,0.514,0.504,0.499,0.497,0.501,0.518,0.506,0.463,0.483,0.437,0.493,0.513,0.499,0.473,0.496,0.497,0.504,0.500,0.507,0.493,0.499,0.504,0.508,0.497,0.508,0.506,0.502,0.491,0.484,0.506,0.508,0.499,0.495,0.490,0.502,0.476,0.495,0.499,0.513,0.497,0.502,0.503,0.507,0.482,0.505,0.514,0.509,0.490,0.449,0.500,0.463,0.497,0.504,0.490,0.502,0.495,0.467,0.506,0.504,0.507,0.499,0.488,0.495,0.490,0.511,0.501,0.506,0.503,0.501,0.472,0.499,0.501,0.482,0.490,0.500,0.492,0.486,0.507,0.500,0.495,0.507,0.507,0.496,0.501,0.512,0.501,0.487,0.502,0.514,0.505,0.504,0.497,0.503,0.509,0.472,0.493,0.494,0.499,0.493,0.494,0.470,0.498,0.494,0.479,0.498,0.496,0.469,0.487,0.499,0.495,0.497,0.496,0.493,0.482,0.494,0.497,0.478,0.459,0.497,0.485,0.503,0.499,0.485,0.498,0.485,0.457,0.505,0.487,0.508,0.492,0.483,0.483,0.495,0.448,0.504,0.513,0.477,0.486,0.503,0.465,0.500,0.505,0.489,0.497,0.505,0.486,0.435,0.451,0.507,0.462,0.500,0.502,0.502,0.460},{0.509,0.502,0.504,0.488,0.503,0.501,0.502,0.504,0.501,0.492,0.506,0.504,0.506,0.458,0.509,0.490,0.498,0.508,0.504,0.477,0.501,0.504,0.501,0.498,0.505,0.501,0.503,0.503,0.503,0.496,0.489,0.509,0.500,0.496,0.481,0.500,0.501,0.504,0.498,0.488,0.499,0.485,0.495,0.503,0.483,0.490,0.500,0.507,0.509,0.502,0.507,0.509,0.510,0.504,0.466,0.489,0.475,0.490,0.501,0.483,0.501,0.494,0.477,0.503,0.505,0.501,0.507,0.507,0.500,0.497,0.499,0.496,0.493,0.504,0.502,0.479,0.500,0.496,0.494,0.504,0.499,0.494,0.500,0.509,0.501,0.502,0.507,0.502,0.512,0.490,0.506,0.498,0.499,0.482,0.511,0.510,0.500,0.499,0.511,0.504,0.501,0.501,0.505,0.492,0.502,0.497,0.492,0.484,0.505,0.444,0.506,0.499,0.481,0.500,0.502,0.508,0.496,0.506,0.499,0.494,0.496,0.499,0.496,0.471,0.491,0.498,0.503,0.500,0.509,0.487,0.486,0.472,0.502,0.484,0.511,0.496,0.487,0.482,0.499,0.445,0.508,0.500,0.493,0.502,0.501,0.486,0.506,0.504,0.481,0.505,0.504,0.507,0.451,0.487,0.502,0.487,0.502,0.506,0.484,0.457},{0.498,0.500,0.500,0.489,0.498,0.509,0.505,0.504,0.499,0.488,0.497,0.497,0.495,0.457,0.505,0.496,0.499,0.497,0.494,0.485,0.496,0.500,0.498,0.497,0.497,0.502,0.496,0.491,0.497,0.494,0.472,0.503,0.500,0.482,0.491,0.503,0.505,0.498,0.495,0.488,0.499,0.482,0.486,0.498,0.475,0.499,0.497,0.502,0.502,0.506,0.501,0.503,0.499,0.499,0.464,0.485,0.464,0.488,0.500,0.488,0.498,0.491,0.486,0.503,0.504,0.500,0.498,0.507,0.496,0.496,0.501,0.494,0.510,0.496,0.500,0.489,0.500,0.500,0.496,0.497,0.501,0.503,0.499,0.500,0.503,0.491,0.498,0.499,0.502,0.493,0.503,0.492,0.485,0.486,0.504,0.502,0.497,0.494,0.499,0.494,0.486,0.471,0.493,0.506,0.493,0.507,0.485,0.486,0.498,0.466,0.496,0.505,0.469,0.500,0.491,0.494,0.495,0.504,0.493,0.477,0.494,0.493,0.495,0.480,0.485,0.497,0.494,0.495,0.502,0.481,0.484,0.474,0.502,0.494,0.504,0.489,0.481,0.462,0.504,0.453,0.503,0.486,0.483,0.501,0.507,0.476,0.509,0.506,0.482,0.497,0.503,0.508,0.440,0.480,0.497,0.482,0.496,0.504,0.477,0.440},{0.506,0.506,0.501,0.511,0.518,0.516,0.512,0.493,0.499,0.514,0.510,0.509,0.498,0.516,0.487,0.489,0.501,0.516,0.509,0.495,0.505,0.507,0.505,0.497,0.503,0.511,0.502,0.492,0.500,0.499,0.499,0.506,0.515,0.476,0.474,0.506,0.514,0.500,0.499,0.499,0.504,0.455,0.493,0.512,0.492,0.479,0.498,0.510,0.512,0.503,0.509,0.501,0.502,0.508,0.451,0.478,0.493,0.501,0.514,0.476,0.501,0.511,0.471,0.502,0.506,0.516,0.512,0.504,0.509,0.499,0.500,0.498,0.501,0.493,0.505,0.470,0.513,0.486,0.515,0.510,0.508,0.512,0.519,0.518,0.501,0.487,0.507,0.501,0.501,0.515,0.504,0.491,0.510,0.517,0.522,0.509,0.510,0.501,0.509,0.496,0.494,0.460,0.507,0.486,0.508,0.495,0.475,0.470,0.514,0.447,0.501,0.509,0.466,0.497,0.522,0.502,0.499,0.500,0.503,0.493,0.489,0.487,0.468,0.451,0.505,0.500,0.521,0.498,0.509,0.477,0.476,0.480,0.504,0.473,0.493,0.502,0.506,0.485,0.513,0.429,0.505,0.495,0.502,0.502,0.509,0.471,0.515,0.514,0.533,0.508,0.518,0.512,0.427,0.470,0.519,0.484,0.506,0.504,0.476,0.456},{0.504,0.516,0.509,0.520,0.510,0.520,0.518,0.497,0.511,0.505,0.502,0.502,0.503,0.462,0.517,0.507,0.503,0.510,0.522,0.499,0.517,0.493,0.501,0.502,0.511,0.507,0.514,0.497,0.500,0.507,0.493,0.510,0.509,0.499,0.504,0.507,0.509,0.510,0.509,0.483,0.500,0.474,0.505,0.505,0.510,0.502,0.494,0.501,0.514,0.509,0.518,0.506,0.511,0.503,0.462,0.484,0.496,0.484,0.509,0.504,0.513,0.502,0.474,0.508,0.507,0.516,0.516,0.521,0.514,0.517,0.514,0.485,0.482,0.506,0.503,0.463,0.506,0.508,0.515,0.504,0.509,0.511,0.493,0.507,0.509,0.519,0.521,0.502,0.527,0.497,0.521,0.498,0.494,0.504,0.520,0.504,0.503,0.499,0.503,0.508,0.453,0.472,0.517,0.518,0.501,0.514,0.511,0.493,0.507,0.473,0.499,0.498,0.505,0.505,0.509,0.512,0.509,0.508,0.500,0.471,0.503,0.500,0.490,0.493,0.501,0.504,0.516,0.495,0.510,0.504,0.485,0.498,0.496,0.477,0.526,0.497,0.490,0.476,0.508,0.454,0.497,0.509,0.508,0.506,0.501,0.490,0.499,0.516,0.496,0.514,0.513,0.511,0.472,0.468,0.516,0.485,0.509,0.509,0.499,0.430},{0.495,0.494,0.495,0.504,0.496,0.491,0.498,0.499,0.499,0.478,0.499,0.502,0.501,0.479,0.493,0.505,0.500,0.497,0.495,0.473,0.505,0.499,0.503,0.496,0.502,0.514,0.497,0.499,0.495,0.486,0.493,0.506,0.500,0.486,0.480,0.499,0.501,0.499,0.491,0.486,0.494,0.466,0.496,0.500,0.488,0.498,0.490,0.501,0.503,0.504,0.506,0.497,0.501,0.500,0.466,0.482,0.475,0.478,0.498,0.478,0.494,0.494,0.469,0.499,0.503,0.502,0.500,0.497,0.491,0.507,0.481,0.498,0.497,0.496,0.497,0.490,0.502,0.486,0.496,0.497,0.504,0.495,0.503,0.494,0.486,0.493,0.500,0.490,0.502,0.495,0.499,0.490,0.496,0.479,0.484,0.497,0.504,0.488,0.501,0.505,0.491,0.458,0.494,0.491,0.498,0.494,0.495,0.500,0.500,0.442,0.493,0.497,0.467,0.505,0.501,0.496,0.494,0.499,0.491,0.466,0.507,0.496,0.488,0.449,0.495,0.492,0.497,0.484,0.494,0.481,0.492,0.483,0.496,0.497,0.508,0.486,0.498,0.434,0.507,0.456,0.493,0.508,0.471,0.498,0.497,0.468,0.498,0.500,0.489,0.499,0.512,0.503,0.440,0.456,0.506,0.464,0.498,0.506,0.481,0.453},{0.506,0.493,0.503,0.516,0.508,0.492,0.493,0.499,0.492,0.503,0.509,0.499,0.479,0.454,0.505,0.491,0.498,0.500,0.510,0.491,0.503,0.504,0.503,0.491,0.492,0.497,0.499,0.498,0.510,0.487,0.491,0.499,0.489,0.478,0.495,0.518,0.510,0.500,0.507,0.474,0.500,0.484,0.459,0.504,0.474,0.493,0.497,0.505,0.505,0.517,0.507,0.507,0.499,0.496,0.472,0.464,0.490,0.485,0.504,0.489,0.483,0.478,0.467,0.503,0.500,0.508,0.512,0.512,0.489,0.486,0.508,0.495,0.504,0.484,0.497,0.445,0.510,0.487,0.512,0.500,0.500,0.492,0.489,0.507,0.505,0.512,0.493,0.502,0.472,0.499,0.500,0.492,0.508,0.476,0.517,0.506,0.502,0.500,0.495,0.495,0.487,0.473,0.506,0.505,0.494,0.514,0.499,0.504,0.507,0.433,0.502,0.503,0.470,0.511,0.497,0.498,0.500,0.497,0.495,0.462,0.509,0.512,0.483,0.477,0.493,0.498,0.493,0.497,0.510,0.502,0.493,0.469,0.512,0.486,0.520,0.513,0.464,0.495,0.506,0.451,0.491,0.495,0.504,0.499,0.481,0.468,0.496,0.520,0.499,0.498,0.504,0.504,0.443,0.465,0.521,0.456,0.499,0.512,0.498,0.458},{0.498,0.505,0.508,0.500,0.507,0.507,0.509,0.518,0.503,0.488,0.504,0.506,0.498,0.482,0.507,0.475,0.501,0.503,0.498,0.488,0.502,0.508,0.503,0.497,0.500,0.500,0.495,0.510,0.505,0.510,0.498,0.506,0.504,0.512,0.488,0.511,0.504,0.503,0.507,0.487,0.498,0.479,0.489,0.504,0.489,0.494,0.496,0.514,0.506,0.506,0.515,0.518,0.515,0.515,0.454,0.484,0.483,0.507,0.499,0.501,0.511,0.500,0.482,0.515,0.513,0.507,0.504,0.511,0.509,0.505,0.507,0.501,0.510,0.505,0.504,0.467,0.497,0.503,0.497,0.507,0.499,0.510,0.502,0.515,0.506,0.496,0.501,0.509,0.501,0.491,0.508,0.495,0.500,0.497,0.508,0.502,0.506,0.505,0.506,0.511,0.510,0.491,0.504,0.510,0.503,0.494,0.487,0.482,0.506,0.460,0.503,0.501,0.479,0.503,0.507,0.509,0.499,0.510,0.501,0.469,0.493,0.508,0.458,0.476,0.495,0.498,0.499,0.511,0.501,0.491,0.484,0.479,0.503,0.503,0.503,0.500,0.491,0.453,0.505,0.468,0.511,0.494,0.477,0.506,0.508,0.490,0.494,0.496,0.490,0.513,0.517,0.504,0.439,0.478,0.508,0.475,0.508,0.508,0.478,0.450},{0.505,0.492,0.496,0.492,0.502,0.504,0.502,0.506,0.490,0.502,0.497,0.497,0.500,0.449,0.502,0.513,0.493,0.499,0.495,0.465,0.491,0.497,0.496,0.494,0.499,0.507,0.486,0.487,0.510,0.496,0.472,0.506,0.494,0.504,0.480,0.499,0.499,0.496,0.495,0.483,0.500,0.478,0.483,0.500,0.486,0.485,0.486,0.496,0.511,0.501,0.497,0.497,0.504,0.494,0.451,0.487,0.486,0.495,0.490,0.479,0.494,0.499,0.471,0.506,0.511,0.508,0.502,0.500,0.501,0.487,0.519,0.490,0.501,0.503,0.497,0.491,0.492,0.479,0.496,0.498,0.495,0.504,0.487,0.496,0.500,0.472,0.498,0.498,0.482,0.491,0.505,0.491,0.500,0.487,0.498,0.497,0.497,0.493,0.499,0.494,0.475,0.459,0.505,0.496,0.500,0.485,0.484,0.479,0.493,0.456,0.484,0.497,0.476,0.494,0.496,0.503,0.494,0.499,0.501,0.484,0.504,0.492,0.505,0.468,0.482,0.497,0.499,0.500,0.497,0.483,0.460,0.483,0.497,0.478,0.499,0.483,0.497,0.442,0.494,0.457,0.507,0.488,0.455,0.494,0.502,0.472,0.502,0.497,0.481,0.497,0.498,0.500,0.425,0.479,0.503,0.461,0.500,0.501,0.488,0.426},{0.485,0.492,0.490,0.493,0.502,0.492,0.500,0.491,0.496,0.484,0.480,0.495,0.489,0.450,0.484,0.455,0.489,0.495,0.493,0.473,0.486,0.508,0.489,0.472,0.499,0.493,0.493,0.491,0.498,0.472,0.488,0.492,0.482,0.480,0.463,0.489,0.494,0.493,0.492,0.483,0.491,0.481,0.483,0.494,0.478,0.488,0.487,0.494,0.494,0.496,0.499,0.497,0.495,0.486,0.451,0.486,0.491,0.466,0.481,0.472,0.489,0.493,0.451,0.493,0.492,0.488,0.492,0.500,0.488,0.488,0.507,0.491,0.494,0.484,0.487,0.489,0.493,0.487,0.496,0.494,0.486,0.474,0.491,0.486,0.491,0.489,0.487,0.495,0.503,0.483,0.490,0.474,0.486,0.465,0.505,0.497,0.490,0.479,0.492,0.484,0.458,0.457,0.493,0.472,0.497,0.493,0.475,0.492,0.495,0.429,0.489,0.490,0.485,0.498,0.487,0.479,0.491,0.491,0.487,0.462,0.477,0.503,0.449,0.455,0.481,0.492,0.489,0.484,0.476,0.496,0.503,0.478,0.487,0.481,0.496,0.492,0.498,0.469,0.505,0.457,0.499,0.499,0.471,0.497,0.505,0.471,0.473,0.492,0.455,0.496,0.495,0.494,0.417,0.460,0.490,0.463,0.488,0.491,0.499,0.418},{0.509,0.509,0.504,0.489,0.512,0.507,0.509,0.509,0.507,0.494,0.504,0.507,0.501,0.464,0.507,0.493,0.510,0.509,0.513,0.488,0.512,0.506,0.509,0.503,0.506,0.510,0.506,0.499,0.506,0.506,0.492,0.504,0.502,0.503,0.489,0.505,0.502,0.504,0.507,0.495,0.497,0.463,0.491,0.505,0.487,0.494,0.506,0.505,0.508,0.514,0.509,0.505,0.510,0.509,0.464,0.502,0.477,0.506,0.497,0.500,0.500,0.504,0.441,0.505,0.513,0.504,0.508,0.515,0.505,0.504,0.510,0.500,0.509,0.501,0.506,0.482,0.506,0.502,0.504,0.506,0.503,0.501,0.503,0.514,0.504,0.498,0.511,0.506,0.508,0.494,0.507,0.499,0.503,0.482,0.511,0.507,0.509,0.501,0.512,0.499,0.489,0.478,0.504,0.505,0.504,0.494,0.488,0.492,0.510,0.469,0.508,0.503,0.472,0.506,0.506,0.513,0.499,0.504,0.500,0.490,0.513,0.492,0.479,0.476,0.492,0.508,0.504,0.503,0.506,0.486,0.494,0.481,0.509,0.490,0.511,0.506,0.500,0.470,0.511,0.435,0.511,0.494,0.480,0.507,0.509,0.492,0.515,0.517,0.489,0.514,0.518,0.504,0.451,0.484,0.502,0.476,0.507,0.511,0.485,0.454},{0.503,0.504,0.502,0.493,0.502,0.507,0.511,0.508,0.507,0.485,0.501,0.508,0.506,0.478,0.498,0.479,0.488,0.503,0.497,0.502,0.500,0.502,0.500,0.500,0.515,0.509,0.500,0.489,0.504,0.494,0.482,0.502,0.503,0.478,0.482,0.508,0.508,0.499,0.507,0.496,0.490,0.493,0.497,0.506,0.501,0.498,0.508,0.511,0.507,0.507,0.511,0.499,0.506,0.509,0.478,0.497,0.481,0.489,0.499,0.480,0.509,0.506,0.496,0.500,0.513,0.509,0.506,0.517,0.503,0.513,0.513,0.497,0.505,0.498,0.502,0.472,0.490,0.493,0.501,0.507,0.506,0.501,0.499,0.507,0.502,0.501,0.511,0.509,0.502,0.504,0.511,0.501,0.509,0.517,0.508,0.500,0.498,0.504,0.507,0.496,0.500,0.501,0.512,0.494,0.502,0.505,0.500,0.490,0.503,0.456,0.499,0.494,0.493,0.508,0.506,0.512,0.501,0.509,0.502,0.483,0.500,0.501,0.486,0.498,0.493,0.503,0.499,0.506,0.500,0.496,0.486,0.487,0.506,0.455,0.511,0.497,0.484,0.490,0.512,0.444,0.510,0.500,0.487,0.503,0.503,0.497,0.517,0.516,0.500,0.502,0.509,0.514,0.442,0.482,0.512,0.479,0.499,0.503,0.503,0.456},{0.503,0.486,0.510,0.505,0.495,0.503,0.502,0.498,0.508,0.496,0.501,0.522,0.481,0.469,0.512,0.496,0.483,0.500,0.496,0.478,0.498,0.491,0.496,0.482,0.476,0.499,0.486,0.478,0.512,0.504,0.480,0.503,0.478,0.498,0.453,0.478,0.476,0.508,0.492,0.476,0.479,0.427,0.487,0.491,0.489,0.500,0.498,0.494,0.506,0.509,0.495,0.498,0.499,0.497,0.480,0.491,0.494,0.495,0.500,0.493,0.502,0.496,0.449,0.493,0.501,0.505,0.497,0.509,0.494,0.503,0.497,0.502,0.488,0.486,0.506,0.466,0.493,0.501,0.495,0.506,0.496,0.503,0.511,0.516,0.493,0.499,0.499,0.517,0.519,0.501,0.510,0.472,0.492,0.480,0.517,0.499,0.500,0.506,0.506,0.504,0.481,0.488,0.504,0.487,0.494,0.476,0.462,0.475,0.486,0.455,0.497,0.513,0.493,0.493,0.508,0.505,0.500,0.482,0.511,0.492,0.486,0.491,0.466,0.468,0.495,0.498,0.493,0.498,0.517,0.502,0.470,0.448,0.492,0.468,0.510,0.487,0.461,0.452,0.517,0.489,0.500,0.492,0.492,0.505,0.495,0.490,0.505,0.513,0.487,0.502,0.510,0.490,0.432,0.481,0.515,0.478,0.492,0.491,0.469,0.445},{0.488,0.485,0.496,0.437,0.481,0.485,0.490,0.507,0.491,0.466,0.477,0.483,0.482,0.461,0.486,0.452,0.493,0.478,0.500,0.486,0.496,0.484,0.481,0.491,0.474,0.504,0.480,0.495,0.488,0.480,0.463,0.489,0.482,0.453,0.485,0.491,0.491,0.490,0.500,0.460,0.461,0.464,0.431,0.471,0.456,0.482,0.487,0.498,0.502,0.489,0.486,0.472,0.509,0.483,0.450,0.468,0.481,0.453,0.496,0.472,0.489,0.488,0.450,0.481,0.491,0.486,0.472,0.501,0.479,0.498,0.511,0.491,0.497,0.474,0.472,0.450,0.482,0.490,0.476,0.490,0.481,0.492,0.489,0.492,0.497,0.500,0.483,0.491,0.476,0.477,0.486,0.480,0.487,0.496,0.485,0.473,0.488,0.478,0.496,0.478,0.482,0.472,0.506,0.488,0.482,0.489,0.497,0.483,0.491,0.463,0.499,0.472,0.444,0.470,0.474,0.493,0.489,0.488,0.495,0.455,0.485,0.461,0.469,0.460,0.487,0.494,0.495,0.488,0.486,0.478,0.476,0.445,0.496,0.496,0.475,0.508,0.480,0.444,0.504,0.440,0.495,0.499,0.487,0.511,0.475,0.468,0.498,0.510,0.491,0.490,0.494,0.479,0.445,0.471,0.494,0.429,0.487,0.500,0.450,0.441},{0.515,0.515,0.506,0.486,0.506,0.513,0.506,0.506,0.508,0.485,0.510,0.512,0.514,0.468,0.500,0.500,0.507,0.496,0.507,0.499,0.503,0.506,0.500,0.503,0.506,0.507,0.499,0.518,0.511,0.499,0.489,0.505,0.508,0.478,0.491,0.504,0.504,0.521,0.514,0.506,0.492,0.471,0.488,0.501,0.494,0.488,0.492,0.511,0.513,0.502,0.508,0.516,0.511,0.501,0.457,0.504,0.492,0.491,0.507,0.492,0.501,0.497,0.487,0.506,0.510,0.508,0.508,0.507,0.513,0.498,0.519,0.491,0.501,0.482,0.508,0.462,0.500,0.496,0.499,0.506,0.496,0.505,0.506,0.511,0.506,0.498,0.493,0.500,0.507,0.496,0.511,0.509,0.510,0.492,0.496,0.510,0.513,0.515,0.513,0.514,0.503,0.501,0.513,0.505,0.503,0.500,0.470,0.484,0.509,0.470,0.509,0.498,0.490,0.510,0.514,0.519,0.499,0.510,0.504,0.488,0.497,0.516,0.508,0.471,0.504,0.502,0.496,0.511,0.505,0.500,0.498,0.475,0.508,0.487,0.509,0.504,0.501,0.461,0.512,0.459,0.512,0.500,0.494,0.514,0.510,0.514,0.510,0.533,0.489,0.521,0.508,0.502,0.441,0.485,0.514,0.478,0.502,0.517,0.498,0.441},{0.508,0.500,0.505,0.504,0.504,0.508,0.510,0.497,0.511,0.491,0.506,0.509,0.506,0.492,0.510,0.482,0.505,0.503,0.505,0.501,0.504,0.508,0.501,0.505,0.514,0.509,0.501,0.510,0.504,0.499,0.494,0.502,0.508,0.476,0.491,0.504,0.503,0.503,0.496,0.500,0.492,0.468,0.485,0.507,0.462,0.496,0.508,0.510,0.508,0.502,0.505,0.511,0.511,0.512,0.456,0.502,0.468,0.489,0.508,0.492,0.494,0.502,0.485,0.514,0.507,0.510,0.504,0.513,0.501,0.499,0.513,0.504,0.514,0.504,0.499,0.471,0.506,0.493,0.504,0.508,0.502,0.502,0.499,0.514,0.502,0.511,0.509,0.505,0.496,0.508,0.508,0.497,0.502,0.508,0.507,0.510,0.506,0.500,0.509,0.494,0.491,0.489,0.504,0.512,0.505,0.491,0.488,0.507,0.508,0.462,0.503,0.501,0.479,0.507,0.503,0.509,0.499,0.508,0.504,0.476,0.498,0.501,0.490,0.480,0.506,0.508,0.502,0.501,0.508,0.500,0.491,0.464,0.505,0.511,0.515,0.500,0.482,0.487,0.506,0.465,0.517,0.506,0.474,0.509,0.514,0.475,0.521,0.507,0.503,0.506,0.515,0.509,0.451,0.481,0.505,0.483,0.506,0.504,0.475,0.462},{0.489,0.498,0.498,0.501,0.504,0.500,0.507,0.502,0.499,0.485,0.505,0.504,0.497,0.479,0.501,0.485,0.502,0.503,0.501,0.499,0.504,0.499,0.504,0.498,0.500,0.510,0.499,0.500,0.503,0.496,0.493,0.504,0.499,0.508,0.490,0.521,0.503,0.500,0.495,0.489,0.496,0.493,0.486,0.504,0.482,0.496,0.482,0.504,0.505,0.500,0.510,0.505,0.506,0.509,0.447,0.480,0.468,0.509,0.504,0.500,0.506,0.492,0.485,0.506,0.509,0.508,0.510,0.511,0.505,0.487,0.508,0.497,0.493,0.503,0.499,0.473,0.500,0.490,0.506,0.505,0.500,0.508,0.495,0.502,0.495,0.496,0.502,0.505,0.490,0.501,0.505,0.494,0.498,0.486,0.506,0.495,0.508,0.495,0.499,0.498,0.490,0.473,0.501,0.509,0.501,0.492,0.484,0.486,0.504,0.440,0.500,0.498,0.487,0.502,0.502,0.508,0.491,0.501,0.500,0.483,0.509,0.496,0.474,0.485,0.502,0.500,0.507,0.503,0.510,0.482,0.483,0.496,0.504,0.483,0.507,0.483,0.497,0.468,0.506,0.472,0.502,0.495,0.483,0.499,0.505,0.485,0.511,0.497,0.496,0.501,0.511,0.502,0.442,0.472,0.501,0.468,0.502,0.498,0.466,0.442},{0.502,0.506,0.500,0.502,0.506,0.508,0.502,0.507,0.504,0.474,0.504,0.497,0.507,0.467,0.505,0.500,0.501,0.510,0.499,0.484,0.506,0.495,0.498,0.495,0.499,0.509,0.491,0.507,0.507,0.495,0.492,0.507,0.507,0.492,0.500,0.514,0.496,0.495,0.499,0.489,0.493,0.469,0.476,0.504,0.475,0.484,0.492,0.503,0.500,0.502,0.505,0.504,0.505,0.499,0.464,0.485,0.474,0.482,0.505,0.496,0.505,0.490,0.474,0.507,0.508,0.505,0.506,0.510,0.505,0.497,0.502,0.496,0.496,0.498,0.504,0.480,0.494,0.509,0.499,0.504,0.497,0.501,0.502,0.511,0.505,0.500,0.501,0.499,0.510,0.494,0.502,0.494,0.498,0.482,0.497,0.502,0.497,0.497,0.510,0.498,0.482,0.488,0.499,0.502,0.504,0.480,0.479,0.491,0.502,0.476,0.500,0.495,0.496,0.503,0.499,0.506,0.489,0.504,0.500,0.488,0.505,0.494,0.461,0.468,0.489,0.502,0.499,0.503,0.506,0.472,0.479,0.476,0.498,0.493,0.503,0.491,0.482,0.455,0.500,0.446,0.506,0.488,0.488,0.500,0.496,0.482,0.507,0.502,0.485,0.496,0.505,0.504,0.463,0.479,0.504,0.466,0.499,0.497,0.480,0.442},{0.489,0.489,0.493,0.495,0.485,0.492,0.500,0.497,0.493,0.491,0.480,0.502,0.497,0.487,0.490,0.513,0.495,0.487,0.501,0.484,0.492,0.490,0.488,0.488,0.499,0.483,0.486,0.474,0.487,0.483,0.483,0.495,0.496,0.476,0.460,0.506,0.500,0.489,0.489,0.491,0.489,0.461,0.473,0.496,0.477,0.501,0.476,0.493,0.497,0.490,0.495,0.493,0.501,0.493,0.460,0.458,0.480,0.492,0.486,0.469,0.490,0.494,0.467,0.511,0.500,0.493,0.499,0.502,0.497,0.506,0.490,0.502,0.483,0.496,0.492,0.487,0.498,0.514,0.494,0.496,0.495,0.492,0.483,0.486,0.489,0.497,0.517,0.479,0.498,0.497,0.498,0.484,0.500,0.478,0.497,0.488,0.488,0.489,0.495,0.473,0.464,0.478,0.498,0.475,0.502,0.476,0.494,0.475,0.501,0.471,0.490,0.477,0.461,0.501,0.496,0.497,0.472,0.491,0.495,0.494,0.506,0.495,0.476,0.484,0.477,0.491,0.480,0.498,0.493,0.435,0.458,0.477,0.497,0.462,0.508,0.507,0.497,0.453,0.503,0.410,0.486,0.495,0.472,0.489,0.486,0.485,0.499,0.486,0.464,0.499,0.493,0.496,0.416,0.466,0.495,0.442,0.501,0.505,0.490,0.471},{0.491,0.493,0.501,0.484,0.504,0.497,0.502,0.513,0.495,0.494,0.488,0.502,0.505,0.461,0.494,0.489,0.495,0.495,0.501,0.471,0.501,0.502,0.499,0.499,0.504,0.500,0.494,0.500,0.498,0.500,0.491,0.497,0.490,0.479,0.461,0.492,0.492,0.496,0.493,0.489,0.495,0.480,0.480,0.499,0.493,0.496,0.501,0.502,0.500,0.511,0.507,0.499,0.505,0.503,0.457,0.486,0.472,0.495,0.490,0.482,0.505,0.486,0.457,0.494,0.501,0.503,0.495,0.505,0.490,0.511,0.495,0.481,0.504,0.498,0.494,0.488,0.497,0.500,0.498,0.494,0.511,0.495,0.500,0.500,0.484,0.482,0.495,0.496,0.481,0.495,0.500,0.486,0.495,0.467,0.498,0.484,0.497,0.482,0.497,0.499,0.472,0.487,0.495,0.502,0.502,0.485,0.486,0.496,0.500,0.463,0.495,0.493,0.494,0.496,0.502,0.502,0.490,0.501,0.490,0.451,0.499,0.481,0.486,0.476,0.483,0.491,0.484,0.492,0.479,0.469,0.484,0.475,0.493,0.497,0.511,0.484,0.486,0.489,0.510,0.457,0.495,0.488,0.464,0.495,0.490,0.483,0.500,0.486,0.477,0.494,0.505,0.506,0.438,0.486,0.490,0.471,0.491,0.500,0.472,0.432},{0.478,0.497,0.464,0.466,0.488,0.471,0.478,0.473,0.470,0.481,0.469,0.475,0.463,0.427,0.472,0.413,0.470,0.451,0.478,0.482,0.483,0.476,0.485,0.482,0.455,0.474,0.466,0.484,0.479,0.478,0.481,0.463,0.493,0.427,0.464,0.471,0.468,0.493,0.469,0.461,0.480,0.472,0.440,0.479,0.456,0.452,0.478,0.472,0.464,0.481,0.474,0.514,0.482,0.481,0.432,0.466,0.439,0.481,0.485,0.441,0.471,0.476,0.431,0.481,0.474,0.478,0.479,0.493,0.482,0.490,0.448,0.462,0.468,0.473,0.493,0.488,0.465,0.486,0.492,0.468,0.466,0.462,0.460,0.466,0.475,0.464,0.495,0.464,0.474,0.464,0.471,0.459,0.477,0.442,0.498,0.464,0.472,0.460,0.476,0.465,0.502,0.476,0.481,0.479,0.469,0.451,0.418,0.476,0.487,0.466,0.481,0.475,0.432,0.485,0.493,0.474,0.458,0.468,0.486,0.446,0.480,0.462,0.451,0.446,0.466,0.456,0.472,0.469,0.484,0.489,0.458,0.447,0.474,0.481,0.464,0.468,0.463,0.432,0.464,0.454,0.480,0.450,0.455,0.474,0.489,0.417,0.468,0.461,0.484,0.484,0.481,0.481,0.425,0.444,0.463,0.489,0.483,0.472,0.467,0.441},{0.489,0.473,0.481,0.508,0.492,0.489,0.503,0.490,0.504,0.463,0.487,0.494,0.452,0.486,0.499,0.510,0.486,0.471,0.486,0.465,0.493,0.495,0.495,0.486,0.493,0.505,0.496,0.459,0.489,0.483,0.483,0.491,0.497,0.487,0.431,0.488,0.485,0.486,0.476,0.473,0.480,0.440,0.484,0.471,0.495,0.475,0.457,0.484,0.490,0.500,0.491,0.504,0.496,0.489,0.448,0.491,0.478,0.466,0.462,0.471,0.493,0.496,0.465,0.475,0.497,0.477,0.476,0.488,0.476,0.485,0.511,0.488,0.489,0.491,0.497,0.465,0.478,0.467,0.486,0.484,0.488,0.486,0.488,0.497,0.485,0.482,0.495,0.484,0.491,0.514,0.488,0.478,0.475,0.496,0.483,0.504,0.475,0.502,0.484,0.483,0.448,0.495,0.489,0.489,0.476,0.475,0.483,0.433,0.488,0.466,0.482,0.472,0.460,0.483,0.485,0.489,0.468,0.454,0.480,0.489,0.495,0.490,0.496,0.417,0.487,0.495,0.503,0.492,0.479,0.476,0.466,0.470,0.487,0.462,0.515,0.490,0.456,0.456,0.486,0.447,0.480,0.487,0.473,0.492,0.493,0.475,0.480,0.462,0.470,0.456,0.499,0.483,0.404,0.462,0.506,0.443,0.496,0.479,0.492,0.434},{0.502,0.504,0.504,0.501,0.501,0.510,0.507,0.505,0.501,0.488,0.501,0.508,0.498,0.486,0.512,0.504,0.499,0.508,0.495,0.493,0.506,0.499,0.503,0.498,0.512,0.505,0.500,0.504,0.504,0.500,0.494,0.505,0.506,0.491,0.471,0.501,0.507,0.504,0.504,0.496,0.499,0.479,0.471,0.501,0.477,0.502,0.498,0.505,0.507,0.499,0.509,0.509,0.510,0.504,0.458,0.477,0.473,0.498,0.500,0.485,0.502,0.499,0.470,0.500,0.507,0.506,0.503,0.506,0.503,0.492,0.502,0.494,0.489,0.501,0.501,0.464,0.499,0.505,0.507,0.503,0.504,0.500,0.501,0.500,0.504,0.502,0.504,0.498,0.500,0.492,0.506,0.492,0.498,0.488,0.503,0.506,0.510,0.504,0.506,0.499,0.491,0.493,0.505,0.500,0.507,0.499,0.490,0.496,0.500,0.456,0.498,0.495,0.483,0.502,0.508,0.503,0.491,0.501,0.505,0.490,0.497,0.490,0.478,0.479,0.500,0.497,0.495,0.504,0.491,0.484,0.466,0.477,0.500,0.493,0.511,0.496,0.489,0.475,0.503,0.467,0.507,0.491,0.483,0.501,0.504,0.473,0.505,0.515,0.491,0.506,0.513,0.509,0.448,0.477,0.501,0.485,0.507,0.501,0.482,0.468},{0.493,0.489,0.489,0.490,0.489,0.477,0.493,0.501,0.465,0.463,0.489,0.507,0.479,0.482,0.490,0.479,0.482,0.482,0.487,0.458,0.495,0.513,0.483,0.475,0.492,0.510,0.488,0.474,0.489,0.486,0.478,0.487,0.501,0.489,0.456,0.494,0.462,0.482,0.475,0.477,0.493,0.456,0.495,0.477,0.483,0.497,0.480,0.496,0.504,0.498,0.481,0.480,0.484,0.473,0.440,0.503,0.450,0.487,0.489,0.494,0.489,0.479,0.483,0.486,0.492,0.463,0.475,0.477,0.488,0.491,0.495,0.491,0.490,0.471,0.489,0.495,0.482,0.489,0.495,0.471,0.478,0.480,0.484,0.486,0.492,0.463,0.492,0.492,0.478,0.471,0.499,0.477,0.478,0.502,0.471,0.487,0.497,0.490,0.479,0.493,0.480,0.477,0.493,0.481,0.501,0.475,0.464,0.489,0.494,0.472,0.473,0.491,0.474,0.487,0.486,0.487,0.486,0.500,0.483,0.485,0.479,0.493,0.427,0.428,0.470,0.491,0.470,0.477,0.483,0.474,0.460,0.469,0.485,0.471,0.494,0.484,0.458,0.467,0.494,0.427,0.485,0.489,0.456,0.485,0.487,0.492,0.460,0.512,0.482,0.499,0.487,0.488,0.419,0.463,0.508,0.452,0.487,0.489,0.430,0.432},{0.497,0.492,0.492,0.492,0.500,0.496,0.497,0.495,0.496,0.479,0.489,0.508,0.503,0.492,0.498,0.470,0.487,0.512,0.490,0.478,0.499,0.497,0.490,0.499,0.479,0.502,0.498,0.493,0.494,0.485,0.488,0.494,0.498,0.500,0.482,0.488,0.496,0.496,0.484,0.501,0.496,0.452,0.475,0.502,0.497,0.493,0.471,0.493,0.497,0.495,0.505,0.505,0.500,0.495,0.457,0.476,0.478,0.499,0.493,0.478,0.503,0.484,0.477,0.505,0.498,0.498,0.494,0.493,0.497,0.507,0.508,0.489,0.479,0.483,0.489,0.460,0.501,0.489,0.495,0.496,0.486,0.488,0.498,0.501,0.491,0.494,0.497,0.489,0.505,0.486,0.504,0.474,0.499,0.495,0.501,0.500,0.500,0.492,0.501,0.507,0.486,0.469,0.491,0.498,0.496,0.484,0.482,0.491,0.492,0.465,0.489,0.484,0.483,0.501,0.500,0.496,0.490,0.494,0.499,0.484,0.491,0.490,0.458,0.482,0.493,0.489,0.493,0.493,0.499,0.491,0.485,0.470,0.494,0.487,0.503,0.492,0.488,0.464,0.502,0.440,0.502,0.475,0.501,0.498,0.483,0.467,0.499,0.508,0.475,0.500,0.502,0.488,0.449,0.451,0.500,0.452,0.508,0.507,0.480,0.448},{0.503,0.498,0.499,0.499,0.486,0.521,0.499,0.523,0.490,0.494,0.505,0.497,0.496,0.472,0.497,0.474,0.491,0.493,0.495,0.479,0.494,0.502,0.500,0.497,0.498,0.494,0.490,0.497,0.496,0.486,0.487,0.506,0.508,0.498,0.487,0.492,0.508,0.482,0.492,0.476,0.501,0.478,0.457,0.498,0.480,0.471,0.496,0.496,0.502,0.511,0.497,0.507,0.508,0.485,0.469,0.467,0.484,0.468,0.496,0.490,0.498,0.501,0.468,0.494,0.494,0.501,0.501,0.507,0.499,0.482,0.503,0.500,0.502,0.503,0.514,0.482,0.501,0.487,0.502,0.497,0.501,0.498,0.490,0.503,0.495,0.495,0.505,0.494,0.491,0.498,0.488,0.489,0.503,0.447,0.503,0.504,0.497,0.499,0.501,0.501,0.473,0.502,0.491,0.496,0.513,0.498,0.458,0.479,0.514,0.477,0.504,0.496,0.504,0.505,0.505,0.503,0.497,0.486,0.504,0.479,0.496,0.493,0.462,0.465,0.479,0.484,0.485,0.497,0.490,0.468,0.504,0.500,0.507,0.492,0.504,0.502,0.493,0.463,0.503,0.445,0.491,0.500,0.498,0.500,0.503,0.462,0.505,0.502,0.497,0.501,0.504,0.497,0.462,0.489,0.506,0.483,0.502,0.506,0.482,0.427},{0.515,0.503,0.506,0.496,0.503,0.510,0.512,0.515,0.504,0.483,0.510,0.503,0.505,0.489,0.501,0.502,0.508,0.506,0.509,0.503,0.507,0.503,0.507,0.502,0.510,0.501,0.501,0.505,0.514,0.496,0.494,0.505,0.511,0.494,0.498,0.511,0.510,0.504,0.503,0.493,0.502,0.472,0.484,0.505,0.496,0.493,0.496,0.508,0.509,0.510,0.511,0.499,0.511,0.506,0.467,0.488,0.463,0.493,0.506,0.493,0.504,0.503,0.462,0.509,0.514,0.508,0.510,0.510,0.508,0.501,0.502,0.499,0.503,0.504,0.508,0.473,0.512,0.505,0.511,0.510,0.505,0.506,0.501,0.512,0.511,0.503,0.512,0.505,0.511,0.509,0.505,0.495,0.498,0.501,0.510,0.500,0.515,0.506,0.511,0.505,0.498,0.489,0.506,0.509,0.505,0.503,0.494,0.492,0.509,0.472,0.505,0.506,0.494,0.502,0.509,0.511,0.495,0.504,0.503,0.478,0.504,0.499,0.489,0.479,0.500,0.502,0.510,0.502,0.507,0.491,0.476,0.482,0.505,0.489,0.504,0.499,0.493,0.468,0.511,0.453,0.512,0.501,0.471,0.507,0.507,0.478,0.515,0.509,0.491,0.502,0.513,0.504,0.449,0.488,0.510,0.471,0.506,0.507,0.477,0.447},{0.512,0.512,0.511,0.493,0.512,0.508,0.514,0.516,0.512,0.478,0.507,0.503,0.501,0.488,0.509,0.495,0.506,0.511,0.502,0.503,0.509,0.507,0.509,0.502,0.512,0.514,0.503,0.505,0.506,0.511,0.494,0.508,0.507,0.506,0.502,0.513,0.508,0.505,0.500,0.497,0.500,0.464,0.490,0.507,0.504,0.497,0.502,0.509,0.508,0.508,0.508,0.513,0.517,0.503,0.459,0.510,0.488,0.496,0.508,0.501,0.512,0.506,0.479,0.513,0.509,0.502,0.511,0.508,0.512,0.511,0.515,0.504,0.513,0.492,0.511,0.461,0.502,0.506,0.509,0.505,0.508,0.510,0.504,0.510,0.505,0.496,0.512,0.502,0.498,0.507,0.510,0.507,0.499,0.491,0.500,0.515,0.509,0.508,0.509,0.513,0.475,0.480,0.506,0.500,0.506,0.504,0.490,0.487,0.510,0.465,0.509,0.510,0.498,0.512,0.510,0.511,0.494,0.504,0.500,0.487,0.504,0.495,0.498,0.484,0.493,0.512,0.511,0.503,0.508,0.492,0.488,0.482,0.508,0.508,0.514,0.497,0.505,0.452,0.508,0.478,0.516,0.498,0.482,0.505,0.502,0.476,0.517,0.503,0.494,0.508,0.514,0.508,0.470,0.480,0.506,0.478,0.511,0.510,0.485,0.451},{0.506,0.501,0.510,0.496,0.497,0.506,0.513,0.508,0.513,0.490,0.502,0.504,0.505,0.484,0.506,0.499,0.497,0.507,0.507,0.489,0.504,0.482,0.502,0.506,0.503,0.509,0.504,0.517,0.506,0.501,0.496,0.514,0.507,0.509,0.489,0.502,0.502,0.500,0.502,0.490,0.511,0.481,0.500,0.499,0.498,0.495,0.511,0.510,0.508,0.504,0.511,0.506,0.506,0.506,0.466,0.490,0.492,0.490,0.503,0.492,0.509,0.508,0.494,0.510,0.512,0.509,0.509,0.509,0.505,0.510,0.519,0.494,0.500,0.502,0.504,0.478,0.499,0.497,0.504,0.505,0.502,0.511,0.504,0.517,0.505,0.502,0.494,0.502,0.509,0.509,0.507,0.494,0.502,0.509,0.508,0.499,0.507,0.503,0.507,0.511,0.489,0.486,0.501,0.500,0.506,0.510,0.472,0.501,0.502,0.482,0.508,0.505,0.479,0.510,0.510,0.503,0.495,0.510,0.505,0.489,0.503,0.504,0.477,0.476,0.499,0.499,0.506,0.504,0.509,0.482,0.512,0.472,0.503,0.475,0.501,0.488,0.495,0.489,0.509,0.448,0.513,0.489,0.504,0.507,0.504,0.480,0.518,0.511,0.507,0.506,0.507,0.507,0.445,0.489,0.502,0.482,0.504,0.506,0.494,0.457},{0.509,0.503,0.513,0.499,0.512,0.514,0.512,0.514,0.506,0.497,0.509,0.504,0.512,0.469,0.506,0.496,0.505,0.511,0.511,0.496,0.505,0.505,0.507,0.501,0.509,0.518,0.506,0.507,0.515,0.497,0.499,0.509,0.511,0.495,0.486,0.508,0.505,0.510,0.505,0.495,0.507,0.474,0.491,0.509,0.481,0.505,0.497,0.511,0.508,0.511,0.508,0.510,0.512,0.511,0.461,0.472,0.485,0.499,0.510,0.498,0.505,0.501,0.474,0.512,0.513,0.512,0.516,0.516,0.512,0.506,0.499,0.494,0.498,0.504,0.502,0.477,0.503,0.508,0.506,0.515,0.504,0.510,0.505,0.510,0.501,0.515,0.495,0.509,0.510,0.507,0.511,0.497,0.504,0.486,0.511,0.500,0.513,0.501,0.507,0.504,0.489,0.480,0.504,0.502,0.511,0.505,0.495,0.495,0.506,0.481,0.512,0.504,0.486,0.511,0.512,0.514,0.500,0.509,0.505,0.492,0.511,0.503,0.488,0.476,0.502,0.510,0.508,0.509,0.510,0.493,0.478,0.476,0.507,0.494,0.512,0.496,0.497,0.480,0.523,0.444,0.513,0.503,0.505,0.509,0.515,0.491,0.510,0.506,0.496,0.506,0.513,0.512,0.437,0.485,0.511,0.482,0.506,0.515,0.498,0.447},{0.505,0.506,0.504,0.479,0.513,0.506,0.512,0.490,0.498,0.490,0.505,0.503,0.514,0.433,0.499,0.514,0.512,0.516,0.510,0.497,0.495,0.514,0.509,0.503,0.501,0.506,0.497,0.507,0.518,0.497,0.497,0.505,0.499,0.498,0.472,0.516,0.511,0.505,0.504,0.493,0.499,0.514,0.504,0.509,0.480,0.505,0.507,0.499,0.513,0.506,0.510,0.504,0.505,0.503,0.474,0.493,0.496,0.491,0.509,0.491,0.517,0.516,0.483,0.512,0.511,0.508,0.499,0.520,0.502,0.500,0.505,0.500,0.519,0.496,0.497,0.485,0.510,0.513,0.506,0.507,0.504,0.505,0.500,0.516,0.506,0.505,0.492,0.506,0.507,0.511,0.510,0.492,0.503,0.503,0.509,0.503,0.510,0.506,0.509,0.502,0.473,0.463,0.512,0.505,0.511,0.489,0.490,0.498,0.508,0.432,0.502,0.499,0.484,0.509,0.511,0.502,0.504,0.499,0.499,0.481,0.486,0.496,0.469,0.508,0.490,0.506,0.507,0.511,0.496,0.470,0.483,0.459,0.501,0.491,0.522,0.493,0.497,0.474,0.516,0.438,0.525,0.498,0.503,0.509,0.505,0.501,0.517,0.497,0.494,0.506,0.505,0.505,0.452,0.474,0.514,0.470,0.508,0.503,0.498,0.494},{0.508,0.507,0.509,0.492,0.510,0.514,0.515,0.508,0.510,0.487,0.511,0.506,0.501,0.479,0.512,0.507,0.511,0.513,0.509,0.500,0.509,0.509,0.510,0.499,0.502,0.511,0.501,0.499,0.515,0.504,0.495,0.510,0.506,0.499,0.509,0.511,0.511,0.506,0.505,0.501,0.505,0.482,0.496,0.510,0.484,0.500,0.508,0.511,0.517,0.506,0.512,0.505,0.508,0.508,0.465,0.495,0.492,0.504,0.513,0.494,0.506,0.499,0.474,0.509,0.518,0.512,0.509,0.513,0.510,0.511,0.507,0.501,0.502,0.498,0.504,0.474,0.510,0.512,0.508,0.508,0.507,0.505,0.502,0.515,0.516,0.505,0.514,0.509,0.504,0.488,0.513,0.503,0.507,0.513,0.511,0.506,0.512,0.500,0.511,0.507,0.490,0.487,0.508,0.510,0.510,0.502,0.495,0.500,0.509,0.469,0.514,0.508,0.495,0.506,0.511,0.513,0.497,0.503,0.506,0.476,0.510,0.497,0.486,0.466,0.503,0.511,0.502,0.500,0.510,0.499,0.475,0.477,0.504,0.488,0.511,0.505,0.499,0.450,0.505,0.464,0.510,0.498,0.489,0.510,0.509,0.476,0.518,0.497,0.485,0.511,0.516,0.510,0.439,0.491,0.507,0.474,0.509,0.505,0.497,0.453},{0.505,0.498,0.506,0.501,0.510,0.508,0.514,0.504,0.500,0.481,0.508,0.497,0.495,0.471,0.503,0.486,0.514,0.512,0.507,0.506,0.498,0.490,0.504,0.499,0.508,0.503,0.500,0.496,0.515,0.494,0.486,0.509,0.509,0.497,0.483,0.501,0.512,0.509,0.499,0.493,0.503,0.481,0.489,0.504,0.473,0.495,0.485,0.506,0.503,0.506,0.511,0.503,0.508,0.504,0.476,0.495,0.480,0.492,0.507,0.487,0.506,0.505,0.505,0.507,0.504,0.506,0.511,0.509,0.507,0.498,0.491,0.497,0.493,0.501,0.499,0.476,0.502,0.499,0.507,0.506,0.505,0.509,0.504,0.513,0.503,0.504,0.518,0.501,0.498,0.522,0.512,0.497,0.504,0.514,0.506,0.504,0.506,0.507,0.510,0.505,0.484,0.480,0.502,0.498,0.501,0.500,0.487,0.491,0.504,0.470,0.503,0.504,0.470,0.508,0.509,0.506,0.494,0.500,0.503,0.494,0.503,0.486,0.483,0.477,0.501,0.500,0.497,0.506,0.514,0.480,0.477,0.474,0.508,0.482,0.505,0.507,0.475,0.478,0.501,0.453,0.506,0.488,0.486,0.500,0.512,0.478,0.523,0.509,0.492,0.501,0.512,0.505,0.450,0.486,0.507,0.487,0.509,0.505,0.478,0.452},{0.477,0.467,0.461,0.429,0.459,0.480,0.474,0.464,0.474,0.458,0.475,0.454,0.465,0.465,0.454,0.465,0.466,0.468,0.474,0.467,0.466,0.449,0.466,0.464,0.451,0.462,0.466,0.472,0.454,0.451,0.451,0.464,0.478,0.480,0.450,0.457,0.456,0.447,0.464,0.460,0.457,0.432,0.448,0.458,0.440,0.457,0.469,0.467,0.459,0.466,0.461,0.474,0.465,0.476,0.462,0.435,0.448,0.445,0.461,0.466,0.485,0.470,0.511,0.454,0.481,0.487,0.466,0.490,0.463,0.443,0.478,0.454,0.482,0.460,0.453,0.429,0.482,0.481,0.482,0.474,0.469,0.450,0.467,0.480,0.465,0.466,0.474,0.474,0.460,0.444,0.466,0.467,0.465,0.452,0.467,0.468,0.455,0.449,0.482,0.457,0.426,0.455,0.459,0.490,0.471,0.457,0.448,0.449,0.464,0.405,0.476,0.458,0.422,0.473,0.462,0.468,0.472,0.463,0.462,0.444,0.479,0.449,0.451,0.456,0.457,0.456,0.479,0.461,0.479,0.462,0.454,0.442,0.471,0.446,0.498,0.459,0.463,0.468,0.475,0.412,0.462,0.486,0.435,0.469,0.456,0.470,0.482,0.471,0.485,0.466,0.465,0.468,0.414,0.430,0.475,0.461,0.466,0.440,0.456,0.342},{0.489,0.491,0.492,0.501,0.476,0.496,0.484,0.494,0.478,0.474,0.500,0.493,0.495,0.470,0.504,0.469,0.481,0.488,0.479,0.483,0.500,0.500,0.489,0.485,0.478,0.484,0.482,0.464,0.484,0.487,0.486,0.502,0.497,0.491,0.468,0.504,0.502,0.480,0.485,0.458,0.486,0.466,0.491,0.477,0.503,0.476,0.467,0.488,0.510,0.490,0.472,0.493,0.495,0.495,0.435,0.486,0.469,0.445,0.479,0.470,0.498,0.465,0.465,0.503,0.496,0.501,0.506,0.483,0.490,0.494,0.503,0.475,0.463,0.485,0.490,0.475,0.477,0.486,0.489,0.499,0.470,0.491,0.502,0.502,0.489,0.480,0.490,0.481,0.497,0.484,0.495,0.473,0.463,0.470,0.476,0.483,0.484,0.494,0.488,0.501,0.449,0.467,0.480,0.487,0.491,0.494,0.470,0.479,0.478,0.440,0.488,0.487,0.483,0.483,0.485,0.496,0.487,0.498,0.485,0.504,0.474,0.477,0.450,0.460,0.479,0.491,0.467,0.493,0.489,0.447,0.509,0.480,0.501,0.490,0.461,0.478,0.500,0.460,0.475,0.464,0.484,0.466,0.500,0.483,0.489,0.431,0.491,0.511,0.452,0.459,0.509,0.513,0.431,0.508,0.489,0.484,0.470,0.479,0.484,0.429},{0.473,0.471,0.464,0.484,0.490,0.456,0.483,0.489,0.462,0.484,0.478,0.490,0.473,0.439,0.469,0.482,0.496,0.467,0.472,0.464,0.493,0.463,0.475,0.464,0.493,0.496,0.475,0.490,0.483,0.486,0.491,0.477,0.481,0.494,0.481,0.492,0.468,0.468,0.474,0.480,0.472,0.439,0.478,0.473,0.450,0.478,0.484,0.463,0.488,0.492,0.485,0.496,0.492,0.480,0.448,0.469,0.472,0.468,0.477,0.474,0.475,0.471,0.484,0.490,0.476,0.465,0.484,0.482,0.486,0.447,0.461,0.468,0.465,0.469,0.466,0.470,0.459,0.478,0.482,0.491,0.478,0.482,0.479,0.491,0.470,0.443,0.477,0.465,0.489,0.476,0.471,0.466,0.500,0.433,0.471,0.477,0.468,0.463,0.482,0.462,0.451,0.462,0.475,0.457,0.444,0.477,0.462,0.463,0.474,0.456,0.486,0.471,0.428,0.477,0.473,0.482,0.475,0.477,0.453,0.472,0.461,0.483,0.445,0.455,0.477,0.487,0.493,0.473,0.475,0.478,0.480,0.475,0.485,0.489,0.500,0.518,0.452,0.368,0.484,0.419,0.467,0.496,0.477,0.466,0.467,0.443,0.461,0.487,0.443,0.477,0.480,0.484,0.405,0.459,0.468,0.472,0.459,0.494,0.447,0.414},{0.499,0.497,0.490,0.482,0.493,0.509,0.501,0.505,0.477,0.465,0.496,0.492,0.492,0.472,0.504,0.485,0.496,0.477,0.494,0.497,0.489,0.497,0.490,0.488,0.501,0.484,0.478,0.485,0.507,0.495,0.466,0.506,0.489,0.495,0.453,0.491,0.489,0.509,0.482,0.492,0.495,0.481,0.466,0.498,0.487,0.499,0.468,0.493,0.496,0.490,0.499,0.491,0.504,0.492,0.445,0.445,0.468,0.493,0.489,0.495,0.498,0.488,0.473,0.492,0.505,0.498,0.485,0.477,0.499,0.492,0.486,0.499,0.476,0.476,0.499,0.469,0.484,0.495,0.500,0.499,0.502,0.506,0.489,0.500,0.492,0.493,0.491,0.498,0.514,0.481,0.494,0.481,0.471,0.477,0.484,0.499,0.495,0.498,0.500,0.502,0.471,0.492,0.496,0.506,0.497,0.461,0.457,0.469,0.499,0.437,0.501,0.486,0.488,0.499,0.486,0.498,0.462,0.506,0.485,0.450,0.516,0.469,0.487,0.487,0.477,0.497,0.495,0.503,0.500,0.500,0.458,0.474,0.485,0.485,0.488,0.483,0.501,0.449,0.487,0.445,0.490,0.466,0.470,0.497,0.491,0.503,0.500,0.498,0.478,0.496,0.501,0.497,0.433,0.436,0.494,0.454,0.495,0.510,0.461,0.442},{0.512,0.504,0.498,0.487,0.504,0.508,0.506,0.522,0.506,0.490,0.502,0.515,0.496,0.474,0.507,0.503,0.500,0.505,0.510,0.513,0.496,0.504,0.501,0.500,0.514,0.509,0.498,0.504,0.499,0.490,0.481,0.497,0.499,0.500,0.496,0.507,0.508,0.504,0.505,0.486,0.490,0.485,0.462,0.500,0.489,0.493,0.496,0.506,0.508,0.503,0.510,0.509,0.513,0.507,0.461,0.479,0.477,0.489,0.501,0.505,0.487,0.493,0.464,0.506,0.509,0.506,0.505,0.504,0.505,0.499,0.501,0.493,0.508,0.510,0.503,0.460,0.506,0.493,0.499,0.504,0.494,0.497,0.502,0.500,0.503,0.500,0.501,0.507,0.494,0.502,0.502,0.504,0.503,0.487,0.503,0.498,0.506,0.501,0.506,0.507,0.490,0.504,0.501,0.516,0.507,0.486,0.477,0.490,0.503,0.449,0.505,0.500,0.474,0.504,0.506,0.510,0.492,0.502,0.505,0.488,0.506,0.501,0.471,0.486,0.498,0.503,0.501,0.498,0.509,0.481,0.478,0.479,0.500,0.506,0.496,0.504,0.492,0.486,0.508,0.450,0.503,0.501,0.484,0.508,0.501,0.476,0.507,0.513,0.501,0.507,0.511,0.504,0.432,0.473,0.512,0.478,0.498,0.501,0.487,0.448},{0.486,0.489,0.488,0.476,0.499,0.501,0.488,0.497,0.493,0.453,0.495,0.490,0.492,0.448,0.493,0.451,0.498,0.488,0.495,0.470,0.476,0.490,0.483,0.488,0.476,0.504,0.478,0.489,0.501,0.479,0.472,0.500,0.480,0.493,0.472,0.492,0.492,0.500,0.496,0.469,0.482,0.441,0.471,0.485,0.494,0.478,0.490,0.493,0.501,0.492,0.498,0.491,0.494,0.487,0.466,0.470,0.474,0.495,0.505,0.489,0.480,0.495,0.469,0.486,0.484,0.499,0.484,0.502,0.502,0.478,0.504,0.477,0.474,0.497,0.488,0.467,0.481,0.499,0.488,0.490,0.493,0.500,0.478,0.498,0.497,0.474,0.493,0.486,0.501,0.483,0.490,0.488,0.488,0.462,0.496,0.495,0.497,0.494,0.485,0.487,0.464,0.471,0.494,0.494,0.493,0.483,0.476,0.464,0.495,0.445,0.491,0.495,0.470,0.490,0.506,0.492,0.472,0.498,0.486,0.487,0.480,0.480,0.464,0.434,0.482,0.503,0.483,0.509,0.494,0.485,0.470,0.456,0.491,0.508,0.496,0.489,0.480,0.426,0.499,0.444,0.499,0.483,0.455,0.493,0.490,0.446,0.504,0.481,0.447,0.490,0.496,0.501,0.438,0.488,0.483,0.464,0.500,0.493,0.456,0.445},{0.506,0.495,0.499,0.507,0.495,0.510,0.508,0.501,0.501,0.489,0.501,0.495,0.498,0.484,0.512,0.496,0.501,0.509,0.501,0.475,0.513,0.502,0.501,0.498,0.501,0.513,0.494,0.483,0.511,0.494,0.489,0.500,0.509,0.502,0.489,0.501,0.494,0.506,0.505,0.490,0.505,0.471,0.493,0.502,0.489,0.503,0.498,0.504,0.512,0.509,0.505,0.517,0.506,0.506,0.485,0.498,0.475,0.498,0.487,0.480,0.500,0.499,0.458,0.509,0.507,0.512,0.501,0.504,0.502,0.498,0.489,0.498,0.517,0.500,0.505,0.492,0.501,0.507,0.489,0.503,0.487,0.501,0.495,0.509,0.500,0.500,0.506,0.505,0.486,0.500,0.511,0.487,0.509,0.502,0.514,0.503,0.505,0.496,0.508,0.506,0.474,0.499,0.505,0.502,0.504,0.499,0.492,0.479,0.504,0.436,0.503,0.495,0.494,0.506,0.500,0.509,0.495,0.508,0.487,0.476,0.505,0.494,0.498,0.488,0.490,0.500,0.504,0.491,0.505,0.519,0.491,0.471,0.497,0.462,0.506,0.497,0.501,0.474,0.506,0.454,0.497,0.490,0.488,0.504,0.503,0.456,0.499,0.505,0.502,0.509,0.507,0.505,0.430,0.487,0.513,0.467,0.505,0.501,0.485,0.438},{0.499,0.499,0.494,0.495,0.501,0.505,0.513,0.509,0.497,0.465,0.497,0.507,0.505,0.482,0.500,0.486,0.507,0.502,0.498,0.500,0.500,0.495,0.494,0.491,0.511,0.502,0.494,0.478,0.500,0.499,0.493,0.504,0.506,0.496,0.488,0.497,0.502,0.492,0.490,0.494,0.486,0.476,0.496,0.499,0.479,0.484,0.501,0.503,0.506,0.508,0.501,0.516,0.499,0.505,0.470,0.465,0.471,0.488,0.493,0.495,0.499,0.496,0.470,0.502,0.501,0.504,0.502,0.504,0.499,0.505,0.528,0.483,0.500,0.482,0.503,0.474,0.486,0.488,0.491,0.494,0.497,0.494,0.497,0.505,0.506,0.498,0.506,0.489,0.505,0.507,0.503,0.490,0.504,0.501,0.509,0.506,0.501,0.496,0.500,0.487,0.467,0.475,0.502,0.494,0.495,0.491,0.480,0.488,0.498,0.470,0.495,0.496,0.491,0.506,0.498,0.494,0.494,0.503,0.501,0.495,0.495,0.500,0.475,0.473,0.484,0.502,0.501,0.507,0.511,0.504,0.487,0.480,0.504,0.499,0.506,0.491,0.488,0.474,0.503,0.460,0.505,0.499,0.480,0.505,0.500,0.465,0.504,0.514,0.482,0.490,0.507,0.501,0.456,0.466,0.508,0.478,0.509,0.501,0.482,0.452},{0.493,0.482,0.478,0.468,0.507,0.469,0.480,0.491,0.468,0.471,0.477,0.480,0.490,0.452,0.477,0.513,0.481,0.489,0.496,0.458,0.492,0.467,0.477,0.486,0.471,0.474,0.469,0.467,0.482,0.471,0.451,0.441,0.496,0.449,0.450,0.487,0.485,0.485,0.474,0.467,0.457,0.431,0.465,0.470,0.483,0.477,0.468,0.462,0.479,0.494,0.474,0.483,0.474,0.505,0.511,0.465,0.484,0.473,0.464,0.469,0.458,0.470,0.477,0.485,0.468,0.491,0.489,0.478,0.486,0.475,0.495,0.467,0.486,0.477,0.457,0.476,0.479,0.492,0.490,0.476,0.493,0.484,0.473,0.486,0.482,0.475,0.484,0.488,0.494,0.462,0.476,0.459,0.468,0.455,0.462,0.475,0.488,0.467,0.474,0.497,0.460,0.465,0.482,0.491,0.467,0.458,0.490,0.479,0.506,0.439,0.475,0.459,0.457,0.479,0.468,0.464,0.472,0.495,0.465,0.481,0.485,0.450,0.482,0.465,0.465,0.475,0.506,0.487,0.500,0.428,0.467,0.468,0.487,0.478,0.494,0.463,0.476,0.466,0.501,0.462,0.488,0.464,0.448,0.492,0.471,0.458,0.500,0.498,0.481,0.496,0.475,0.495,0.425,0.480,0.470,0.498,0.485,0.472,0.481,0.432},{0.507,0.505,0.508,0.511,0.501,0.516,0.515,0.500,0.511,0.475,0.502,0.504,0.510,0.500,0.508,0.498,0.504,0.513,0.508,0.506,0.509,0.506,0.503,0.503,0.502,0.508,0.499,0.503,0.515,0.506,0.493,0.505,0.500,0.493,0.481,0.506,0.514,0.506,0.507,0.511,0.494,0.481,0.475,0.500,0.486,0.505,0.494,0.509,0.513,0.510,0.512,0.512,0.509,0.507,0.454,0.503,0.490,0.492,0.506,0.486,0.509,0.502,0.485,0.504,0.513,0.508,0.511,0.513,0.503,0.511,0.510,0.500,0.506,0.504,0.500,0.497,0.500,0.506,0.495,0.509,0.503,0.507,0.507,0.519,0.503,0.498,0.510,0.509,0.500,0.508,0.513,0.499,0.504,0.489,0.516,0.492,0.506,0.502,0.511,0.500,0.485,0.495,0.510,0.500,0.511,0.508,0.504,0.492,0.513,0.448,0.509,0.500,0.497,0.503,0.505,0.507,0.496,0.504,0.507,0.487,0.506,0.514,0.479,0.484,0.506,0.510,0.505,0.506,0.523,0.493,0.466,0.466,0.507,0.480,0.511,0.512,0.506,0.465,0.507,0.440,0.509,0.499,0.490,0.513,0.510,0.477,0.514,0.522,0.500,0.516,0.515,0.514,0.427,0.491,0.508,0.496,0.509,0.505,0.500,0.458},{0.509,0.507,0.508,0.498,0.503,0.504,0.512,0.507,0.505,0.493,0.506,0.509,0.499,0.482,0.509,0.503,0.509,0.513,0.510,0.502,0.507,0.504,0.505,0.504,0.506,0.507,0.503,0.500,0.513,0.511,0.492,0.513,0.513,0.501,0.491,0.510,0.507,0.509,0.508,0.500,0.501,0.474,0.497,0.507,0.492,0.498,0.494,0.514,0.509,0.512,0.513,0.511,0.518,0.504,0.481,0.496,0.476,0.505,0.509,0.484,0.507,0.501,0.468,0.513,0.509,0.512,0.515,0.514,0.509,0.508,0.503,0.501,0.502,0.504,0.512,0.495,0.507,0.514,0.507,0.507,0.506,0.508,0.512,0.511,0.506,0.501,0.503,0.507,0.512,0.507,0.512,0.495,0.504,0.495,0.516,0.506,0.507,0.503,0.511,0.511,0.472,0.497,0.509,0.507,0.508,0.496,0.478,0.499,0.509,0.464,0.511,0.505,0.491,0.512,0.510,0.511,0.498,0.508,0.509,0.494,0.503,0.508,0.501,0.482,0.500,0.504,0.509,0.509,0.511,0.491,0.494,0.462,0.507,0.506,0.515,0.504,0.515,0.482,0.514,0.463,0.506,0.504,0.490,0.509,0.512,0.499,0.513,0.514,0.485,0.506,0.515,0.511,0.434,0.475,0.504,0.476,0.505,0.503,0.496,0.444},{0.506,0.504,0.508,0.509,0.507,0.512,0.516,0.500,0.504,0.489,0.508,0.508,0.498,0.453,0.507,0.482,0.509,0.506,0.510,0.492,0.502,0.507,0.501,0.500,0.516,0.516,0.502,0.508,0.507,0.508,0.488,0.504,0.509,0.505,0.486,0.508,0.510,0.508,0.505,0.493,0.503,0.478,0.477,0.506,0.463,0.498,0.501,0.508,0.502,0.509,0.512,0.508,0.512,0.506,0.487,0.501,0.465,0.498,0.506,0.499,0.512,0.504,0.491,0.508,0.512,0.506,0.512,0.508,0.510,0.509,0.522,0.494,0.500,0.493,0.499,0.493,0.500,0.507,0.513,0.503,0.507,0.510,0.505,0.509,0.509,0.502,0.509,0.509,0.506,0.504,0.512,0.501,0.508,0.499,0.508,0.511,0.511,0.503,0.515,0.498,0.490,0.487,0.508,0.510,0.507,0.506,0.486,0.496,0.509,0.473,0.508,0.507,0.480,0.504,0.502,0.506,0.497,0.509,0.503,0.478,0.499,0.494,0.466,0.473,0.505,0.505,0.501,0.495,0.514,0.497,0.483,0.482,0.509,0.494,0.509,0.509,0.485,0.483,0.507,0.467,0.508,0.501,0.486,0.508,0.509,0.469,0.511,0.516,0.498,0.510,0.513,0.508,0.459,0.478,0.510,0.477,0.513,0.506,0.494,0.453},{0.507,0.500,0.509,0.511,0.506,0.511,0.514,0.512,0.512,0.493,0.508,0.508,0.513,0.482,0.506,0.501,0.509,0.507,0.513,0.489,0.499,0.499,0.507,0.498,0.512,0.516,0.500,0.512,0.504,0.502,0.492,0.508,0.506,0.497,0.472,0.508,0.504,0.510,0.506,0.499,0.495,0.479,0.476,0.503,0.475,0.494,0.501,0.510,0.511,0.509,0.516,0.499,0.509,0.511,0.466,0.506,0.484,0.485,0.505,0.484,0.501,0.502,0.489,0.511,0.515,0.512,0.506,0.516,0.508,0.510,0.511,0.502,0.506,0.497,0.507,0.462,0.503,0.499,0.507,0.506,0.501,0.507,0.505,0.517,0.507,0.504,0.504,0.513,0.500,0.502,0.510,0.498,0.507,0.505,0.511,0.507,0.506,0.503,0.511,0.503,0.508,0.483,0.506,0.500,0.509,0.511,0.489,0.497,0.507,0.466,0.505,0.497,0.495,0.508,0.512,0.508,0.502,0.511,0.505,0.489,0.507,0.505,0.484,0.473,0.504,0.500,0.506,0.500,0.508,0.485,0.489,0.487,0.505,0.507,0.509,0.503,0.492,0.472,0.511,0.468,0.507,0.500,0.480,0.510,0.514,0.514,0.511,0.522,0.495,0.513,0.514,0.508,0.460,0.478,0.511,0.470,0.509,0.511,0.490,0.464},{0.512,0.511,0.509,0.511,0.503,0.513,0.517,0.521,0.507,0.487,0.507,0.507,0.509,0.446,0.509,0.500,0.512,0.512,0.511,0.490,0.509,0.488,0.507,0.507,0.504,0.521,0.497,0.512,0.511,0.500,0.500,0.515,0.517,0.509,0.501,0.507,0.513,0.511,0.510,0.502,0.505,0.493,0.488,0.506,0.477,0.493,0.507,0.510,0.508,0.509,0.516,0.520,0.513,0.509,0.490,0.483,0.482,0.477,0.504,0.502,0.504,0.504,0.478,0.513,0.514,0.508,0.516,0.509,0.511,0.499,0.499,0.500,0.511,0.511,0.506,0.488,0.499,0.505,0.498,0.510,0.509,0.510,0.504,0.510,0.506,0.511,0.512,0.516,0.519,0.504,0.510,0.506,0.509,0.485,0.509,0.512,0.516,0.503,0.512,0.513,0.470,0.492,0.511,0.509,0.508,0.505,0.487,0.475,0.511,0.458,0.507,0.502,0.493,0.510,0.503,0.510,0.505,0.507,0.507,0.494,0.504,0.512,0.465,0.456,0.503,0.503,0.510,0.505,0.512,0.491,0.488,0.478,0.508,0.482,0.512,0.510,0.505,0.476,0.510,0.479,0.513,0.501,0.501,0.508,0.509,0.492,0.514,0.521,0.508,0.512,0.512,0.511,0.461,0.477,0.514,0.481,0.510,0.512,0.500,0.468},{0.509,0.498,0.506,0.492,0.507,0.509,0.511,0.510,0.503,0.484,0.502,0.514,0.509,0.487,0.506,0.491,0.504,0.506,0.502,0.490,0.505,0.495,0.500,0.496,0.509,0.514,0.491,0.489,0.509,0.501,0.488,0.505,0.503,0.494,0.479,0.513,0.501,0.505,0.505,0.497,0.490,0.482,0.476,0.503,0.488,0.497,0.499,0.508,0.512,0.505,0.512,0.502,0.510,0.507,0.463,0.490,0.486,0.499,0.505,0.502,0.502,0.499,0.486,0.503,0.509,0.510,0.508,0.511,0.504,0.499,0.508,0.497,0.502,0.505,0.505,0.501,0.502,0.503,0.506,0.509,0.501,0.503,0.504,0.504,0.502,0.501,0.505,0.509,0.507,0.503,0.508,0.484,0.503,0.500,0.507,0.499,0.506,0.498,0.505,0.496,0.472,0.493,0.502,0.504,0.510,0.492,0.484,0.488,0.500,0.466,0.500,0.501,0.476,0.507,0.505,0.509,0.501,0.507,0.504,0.473,0.503,0.497,0.471,0.474,0.501,0.501,0.507,0.504,0.504,0.494,0.478,0.487,0.502,0.493,0.511,0.498,0.502,0.486,0.503,0.463,0.506,0.507,0.480,0.507,0.499,0.500,0.509,0.512,0.494,0.506,0.509,0.505,0.451,0.472,0.500,0.479,0.511,0.505,0.482,0.446},{0.502,0.497,0.499,0.505,0.497,0.508,0.503,0.509,0.496,0.462,0.490,0.504,0.508,0.476,0.501,0.466,0.499,0.509,0.495,0.500,0.497,0.490,0.497,0.496,0.499,0.517,0.507,0.486,0.505,0.487,0.488,0.504,0.513,0.503,0.498,0.498,0.499,0.487,0.497,0.506,0.511,0.490,0.485,0.492,0.491,0.507,0.482,0.501,0.511,0.510,0.506,0.500,0.511,0.498,0.443,0.494,0.447,0.492,0.499,0.478,0.498,0.505,0.475,0.511,0.508,0.509,0.510,0.499,0.499,0.499,0.505,0.498,0.500,0.496,0.496,0.493,0.517,0.518,0.490,0.504,0.513,0.494,0.483,0.497,0.498,0.505,0.511,0.481,0.505,0.498,0.508,0.491,0.496,0.489,0.506,0.499,0.499,0.481,0.502,0.506,0.474,0.447,0.489,0.495,0.507,0.497,0.487,0.486,0.505,0.465,0.509,0.489,0.474,0.496,0.489,0.496,0.491,0.493,0.495,0.473,0.506,0.499,0.489,0.469,0.485,0.495,0.501,0.497,0.493,0.484,0.447,0.483,0.501,0.488,0.502,0.511,0.492,0.464,0.507,0.476,0.508,0.505,0.481,0.497,0.494,0.493,0.501,0.508,0.503,0.504,0.512,0.499,0.450,0.456,0.503,0.467,0.501,0.501,0.492,0.442},{0.505,0.507,0.515,0.524,0.481,0.503,0.498,0.505,0.505,0.487,0.509,0.515,0.504,0.446,0.508,0.511,0.480,0.523,0.521,0.503,0.496,0.511,0.499,0.501,0.500,0.514,0.481,0.508,0.507,0.519,0.507,0.510,0.513,0.497,0.511,0.519,0.513,0.508,0.502,0.490,0.495,0.448,0.511,0.502,0.495,0.508,0.503,0.502,0.515,0.519,0.499,0.505,0.507,0.491,0.478,0.503,0.461,0.486,0.501,0.504,0.489,0.528,0.495,0.510,0.503,0.522,0.511,0.499,0.508,0.505,0.503,0.503,0.500,0.491,0.509,0.477,0.497,0.506,0.521,0.492,0.507,0.498,0.496,0.491,0.521,0.488,0.477,0.487,0.532,0.520,0.494,0.497,0.508,0.470,0.508,0.510,0.494,0.505,0.500,0.506,0.515,0.463,0.513,0.491,0.505,0.484,0.512,0.472,0.504,0.433,0.499,0.504,0.497,0.496,0.519,0.518,0.494,0.516,0.505,0.492,0.509,0.485,0.524,0.489,0.523,0.516,0.529,0.510,0.483,0.507,0.496,0.490,0.511,0.501,0.509,0.518,0.492,0.476,0.524,0.460,0.505,0.501,0.503,0.512,0.504,0.483,0.516,0.530,0.491,0.517,0.506,0.504,0.435,0.517,0.503,0.506,0.505,0.490,0.444,0.474},{0.497,0.493,0.490,0.494,0.498,0.501,0.501,0.495,0.502,0.474,0.481,0.500,0.506,0.467,0.500,0.483,0.509,0.511,0.493,0.489,0.501,0.501,0.496,0.494,0.498,0.485,0.498,0.495,0.501,0.490,0.491,0.500,0.497,0.502,0.491,0.491,0.504,0.497,0.496,0.502,0.481,0.462,0.488,0.494,0.491,0.489,0.500,0.499,0.504,0.494,0.494,0.500,0.501,0.497,0.454,0.475,0.468,0.499,0.493,0.477,0.498,0.483,0.467,0.500,0.501,0.494,0.502,0.500,0.497,0.498,0.503,0.495,0.491,0.494,0.495,0.460,0.497,0.482,0.501,0.499,0.495,0.493,0.492,0.500,0.494,0.493,0.511,0.506,0.496,0.487,0.489,0.501,0.491,0.487,0.505,0.495,0.501,0.496,0.505,0.502,0.467,0.492,0.498,0.491,0.497,0.485,0.464,0.496,0.494,0.476,0.489,0.488,0.473,0.494,0.499,0.501,0.492,0.492,0.493,0.471,0.495,0.499,0.465,0.464,0.500,0.501,0.511,0.491,0.488,0.480,0.482,0.483,0.498,0.507,0.511,0.493,0.474,0.456,0.493,0.446,0.508,0.484,0.482,0.504,0.495,0.473,0.500,0.498,0.480,0.499,0.499,0.501,0.433,0.464,0.499,0.457,0.496,0.491,0.471,0.442},{0.501,0.498,0.506,0.486,0.506,0.515,0.503,0.499,0.490,0.494,0.504,0.499,0.486,0.485,0.504,0.478,0.504,0.507,0.512,0.484,0.508,0.506,0.493,0.510,0.501,0.482,0.497,0.504,0.510,0.501,0.494,0.509,0.505,0.488,0.497,0.501,0.514,0.493,0.496,0.483,0.504,0.468,0.489,0.489,0.490,0.479,0.502,0.503,0.513,0.500,0.498,0.519,0.502,0.493,0.482,0.463,0.465,0.476,0.508,0.474,0.517,0.500,0.486,0.506,0.502,0.500,0.506,0.511,0.502,0.500,0.500,0.491,0.499,0.494,0.502,0.467,0.498,0.509,0.504,0.499,0.504,0.513,0.490,0.520,0.507,0.508,0.506,0.495,0.517,0.499,0.500,0.488,0.499,0.494,0.504,0.508,0.503,0.498,0.503,0.506,0.471,0.490,0.494,0.506,0.514,0.499,0.487,0.504,0.502,0.431,0.511,0.503,0.477,0.511,0.514,0.504,0.499,0.507,0.493,0.454,0.487,0.493,0.483,0.481,0.488,0.479,0.488,0.511,0.509,0.475,0.476,0.467,0.495,0.503,0.503,0.492,0.499,0.487,0.498,0.427,0.503,0.474,0.454,0.497,0.505,0.479,0.505,0.510,0.498,0.501,0.511,0.505,0.448,0.469,0.496,0.468,0.500,0.500,0.471,0.446},{0.500,0.505,0.503,0.493,0.503,0.497,0.503,0.504,0.501,0.496,0.505,0.503,0.493,0.454,0.498,0.497,0.500,0.502,0.512,0.502,0.505,0.503,0.504,0.496,0.493,0.506,0.496,0.484,0.505,0.503,0.484,0.501,0.498,0.486,0.474,0.482,0.504,0.503,0.498,0.496,0.498,0.473,0.491,0.501,0.471,0.483,0.503,0.504,0.492,0.502,0.504,0.496,0.498,0.501,0.460,0.485,0.469,0.476,0.510,0.497,0.500,0.482,0.477,0.504,0.504,0.493,0.497,0.511,0.505,0.496,0.491,0.494,0.494,0.498,0.497,0.497,0.500,0.498,0.511,0.483,0.496,0.505,0.495,0.508,0.497,0.497,0.497,0.502,0.501,0.496,0.504,0.501,0.497,0.508,0.503,0.492,0.502,0.484,0.510,0.494,0.503,0.502,0.495,0.501,0.499,0.485,0.489,0.498,0.502,0.450,0.505,0.488,0.486,0.507,0.506,0.501,0.501,0.503,0.481,0.477,0.496,0.503,0.468,0.466,0.486,0.491,0.495,0.487,0.499,0.493,0.465,0.473,0.503,0.490,0.509,0.492,0.510,0.477,0.496,0.458,0.498,0.486,0.482,0.496,0.498,0.523,0.498,0.514,0.478,0.501,0.504,0.499,0.431,0.483,0.498,0.460,0.498,0.491,0.486,0.458},{0.505,0.506,0.504,0.494,0.503,0.508,0.505,0.515,0.501,0.491,0.502,0.517,0.495,0.490,0.505,0.484,0.502,0.503,0.499,0.489,0.506,0.501,0.502,0.500,0.505,0.503,0.497,0.497,0.504,0.497,0.487,0.506,0.502,0.506,0.472,0.508,0.499,0.499,0.504,0.492,0.494,0.493,0.497,0.501,0.489,0.489,0.514,0.508,0.511,0.504,0.502,0.497,0.504,0.499,0.453,0.490,0.466,0.499,0.503,0.488,0.505,0.503,0.457,0.500,0.512,0.499,0.507,0.506,0.505,0.496,0.509,0.495,0.502,0.497,0.501,0.484,0.502,0.499,0.503,0.507,0.500,0.498,0.497,0.498,0.499,0.504,0.499,0.501,0.490,0.507,0.504,0.491,0.498,0.497,0.500,0.510,0.504,0.499,0.502,0.498,0.475,0.504,0.500,0.499,0.501,0.491,0.475,0.487,0.501,0.463,0.499,0.503,0.481,0.507,0.510,0.504,0.494,0.507,0.500,0.488,0.503,0.497,0.498,0.479,0.495,0.500,0.498,0.500,0.513,0.491,0.488,0.490,0.502,0.489,0.506,0.500,0.486,0.482,0.497,0.437,0.510,0.503,0.497,0.499,0.499,0.488,0.514,0.509,0.485,0.507,0.511,0.501,0.452,0.487,0.509,0.468,0.506,0.498,0.486,0.459},{0.490,0.485,0.476,0.470,0.476,0.490,0.488,0.514,0.484,0.448,0.462,0.478,0.482,0.487,0.475,0.454,0.478,0.472,0.442,0.468,0.466,0.472,0.479,0.489,0.470,0.463,0.490,0.445,0.467,0.491,0.489,0.482,0.472,0.466,0.450,0.462,0.471,0.473,0.480,0.487,0.488,0.488,0.465,0.464,0.495,0.460,0.482,0.473,0.461,0.478,0.477,0.485,0.474,0.476,0.429,0.475,0.470,0.469,0.460,0.467,0.492,0.474,0.476,0.497,0.495,0.493,0.462,0.488,0.501,0.493,0.477,0.460,0.467,0.497,0.484,0.477,0.499,0.490,0.479,0.487,0.482,0.492,0.461,0.483,0.480,0.439,0.489,0.477,0.500,0.478,0.498,0.469,0.466,0.430,0.490,0.469,0.487,0.481,0.490,0.489,0.478,0.462,0.478,0.497,0.480,0.462,0.458,0.481,0.473,0.434,0.504,0.465,0.468,0.473,0.480,0.491,0.475,0.479,0.474,0.467,0.472,0.487,0.467,0.450,0.458,0.468,0.481,0.500,0.493,0.464,0.447,0.462,0.484,0.448,0.478,0.494,0.461,0.393,0.475,0.455,0.476,0.463,0.441,0.477,0.494,0.448,0.478,0.466,0.474,0.484,0.494,0.486,0.418,0.462,0.473,0.420,0.476,0.470,0.449,0.392},{0.502,0.505,0.505,0.498,0.505,0.508,0.509,0.500,0.498,0.496,0.503,0.507,0.504,0.485,0.509,0.479,0.507,0.504,0.503,0.487,0.506,0.499,0.500,0.500,0.513,0.506,0.502,0.510,0.497,0.492,0.493,0.506,0.490,0.493,0.482,0.500,0.506,0.500,0.494,0.498,0.497,0.465,0.478,0.499,0.482,0.501,0.501,0.512,0.502,0.499,0.503,0.510,0.510,0.502,0.482,0.477,0.459,0.484,0.506,0.481,0.501,0.486,0.479,0.500,0.507,0.500,0.503,0.499,0.502,0.517,0.497,0.497,0.498,0.500,0.502,0.499,0.500,0.495,0.498,0.492,0.500,0.494,0.500,0.503,0.505,0.495,0.504,0.499,0.515,0.494,0.505,0.496,0.501,0.488,0.507,0.505,0.504,0.500,0.507,0.494,0.485,0.486,0.504,0.511,0.508,0.511,0.479,0.487,0.496,0.468,0.505,0.503,0.475,0.507,0.503,0.503,0.495,0.517,0.498,0.467,0.499,0.489,0.467,0.473,0.502,0.499,0.498,0.494,0.506,0.491,0.495,0.459,0.506,0.481,0.502,0.500,0.494,0.475,0.503,0.458,0.504,0.501,0.492,0.502,0.505,0.480,0.507,0.507,0.484,0.500,0.508,0.503,0.437,0.490,0.505,0.462,0.506,0.504,0.491,0.448},{0.501,0.495,0.515,0.491,0.495,0.516,0.506,0.502,0.510,0.491,0.492,0.508,0.506,0.434,0.488,0.484,0.503,0.488,0.486,0.492,0.490,0.501,0.496,0.500,0.486,0.508,0.486,0.487,0.503,0.479,0.487,0.502,0.493,0.501,0.490,0.496,0.493,0.490,0.509,0.514,0.500,0.486,0.467,0.505,0.489,0.489,0.487,0.505,0.506,0.497,0.508,0.513,0.512,0.499,0.481,0.486,0.478,0.495,0.493,0.499,0.507,0.488,0.492,0.506,0.514,0.507,0.499,0.505,0.503,0.518,0.506,0.482,0.509,0.498,0.499,0.490,0.495,0.497,0.500,0.495,0.500,0.494,0.494,0.495,0.503,0.487,0.503,0.508,0.485,0.497,0.503,0.494,0.493,0.512,0.505,0.510,0.503,0.501,0.504,0.493,0.491,0.498,0.502,0.492,0.503,0.491,0.493,0.496,0.496,0.437,0.511,0.496,0.489,0.499,0.500,0.497,0.497,0.507,0.513,0.489,0.499,0.499,0.481,0.486,0.495,0.477,0.515,0.511,0.515,0.495,0.479,0.457,0.501,0.477,0.504,0.510,0.497,0.479,0.501,0.484,0.504,0.490,0.482,0.500,0.503,0.496,0.507,0.484,0.471,0.491,0.509,0.502,0.468,0.511,0.501,0.456,0.504,0.510,0.474,0.445},{0.498,0.496,0.499,0.497,0.501,0.503,0.504,0.501,0.506,0.489,0.500,0.513,0.509,0.476,0.495,0.499,0.503,0.502,0.509,0.474,0.500,0.482,0.494,0.496,0.515,0.515,0.496,0.512,0.497,0.496,0.496,0.504,0.501,0.495,0.476,0.499,0.504,0.506,0.499,0.494,0.498,0.492,0.486,0.507,0.495,0.495,0.502,0.511,0.509,0.504,0.506,0.506,0.508,0.507,0.482,0.489,0.482,0.500,0.499,0.488,0.489,0.491,0.490,0.495,0.507,0.513,0.507,0.498,0.506,0.490,0.521,0.501,0.504,0.511,0.503,0.479,0.498,0.500,0.501,0.496,0.491,0.505,0.500,0.505,0.498,0.490,0.499,0.500,0.489,0.491,0.512,0.498,0.501,0.509,0.508,0.499,0.508,0.501,0.506,0.503,0.486,0.490,0.509,0.507,0.489,0.494,0.490,0.456,0.507,0.485,0.506,0.498,0.479,0.514,0.506,0.500,0.493,0.500,0.488,0.468,0.500,0.499,0.488,0.490,0.501,0.497,0.482,0.494,0.495,0.470,0.490,0.492,0.499,0.493,0.507,0.497,0.488,0.479,0.499,0.428,0.505,0.498,0.490,0.504,0.501,0.481,0.498,0.511,0.502,0.508,0.515,0.499,0.467,0.479,0.502,0.491,0.501,0.500,0.476,0.435},{0.504,0.499,0.503,0.502,0.506,0.506,0.509,0.516,0.511,0.488,0.507,0.505,0.504,0.496,0.499,0.477,0.504,0.505,0.503,0.498,0.503,0.490,0.504,0.497,0.510,0.504,0.497,0.500,0.507,0.498,0.494,0.506,0.507,0.506,0.490,0.506,0.508,0.505,0.504,0.496,0.494,0.468,0.484,0.503,0.471,0.496,0.497,0.510,0.505,0.505,0.515,0.507,0.508,0.506,0.474,0.499,0.491,0.499,0.504,0.490,0.503,0.494,0.476,0.509,0.507,0.503,0.506,0.510,0.509,0.504,0.492,0.499,0.499,0.483,0.507,0.487,0.492,0.495,0.496,0.504,0.499,0.504,0.500,0.513,0.503,0.501,0.503,0.502,0.498,0.490,0.505,0.498,0.501,0.486,0.504,0.500,0.500,0.496,0.510,0.502,0.492,0.490,0.506,0.503,0.505,0.492,0.493,0.481,0.508,0.450,0.505,0.504,0.488,0.506,0.509,0.508,0.501,0.504,0.503,0.482,0.496,0.493,0.471,0.481,0.499,0.500,0.507,0.504,0.504,0.496,0.469,0.478,0.502,0.489,0.513,0.498,0.486,0.477,0.508,0.479,0.507,0.492,0.495,0.509,0.510,0.481,0.512,0.526,0.486,0.507,0.508,0.504,0.456,0.481,0.507,0.458,0.511,0.502,0.462,0.438},{0.506,0.503,0.500,0.487,0.504,0.502,0.508,0.506,0.503,0.483,0.504,0.503,0.503,0.487,0.500,0.493,0.513,0.502,0.503,0.504,0.509,0.500,0.499,0.501,0.508,0.509,0.504,0.500,0.499,0.495,0.486,0.503,0.506,0.496,0.481,0.496,0.502,0.500,0.497,0.495,0.511,0.466,0.488,0.504,0.478,0.486,0.501,0.505,0.508,0.502,0.504,0.504,0.507,0.505,0.469,0.470,0.478,0.502,0.494,0.493,0.487,0.497,0.493,0.503,0.506,0.507,0.501,0.509,0.501,0.513,0.507,0.495,0.504,0.496,0.500,0.482,0.500,0.500,0.491,0.499,0.501,0.497,0.502,0.510,0.501,0.498,0.508,0.504,0.509,0.506,0.502,0.496,0.501,0.501,0.504,0.515,0.504,0.504,0.499,0.496,0.501,0.495,0.503,0.495,0.505,0.495,0.479,0.493,0.496,0.471,0.502,0.495,0.468,0.503,0.514,0.497,0.497,0.507,0.501,0.476,0.500,0.520,0.482,0.473,0.495,0.497,0.501,0.510,0.507,0.479,0.470,0.475,0.506,0.497,0.505,0.494,0.484,0.484,0.500,0.451,0.502,0.501,0.489,0.502,0.506,0.479,0.514,0.501,0.496,0.504,0.505,0.500,0.465,0.484,0.501,0.478,0.504,0.508,0.489,0.455},{0.502,0.500,0.504,0.497,0.500,0.513,0.512,0.500,0.506,0.491,0.500,0.505,0.509,0.473,0.500,0.498,0.508,0.498,0.514,0.476,0.503,0.492,0.494,0.503,0.512,0.511,0.495,0.492,0.510,0.504,0.474,0.501,0.501,0.503,0.492,0.505,0.502,0.508,0.501,0.492,0.495,0.462,0.486,0.500,0.480,0.488,0.498,0.506,0.510,0.511,0.510,0.505,0.505,0.509,0.450,0.491,0.482,0.506,0.497,0.500,0.501,0.494,0.484,0.507,0.508,0.510,0.507,0.510,0.503,0.494,0.498,0.493,0.513,0.505,0.498,0.492,0.494,0.494,0.505,0.504,0.497,0.503,0.496,0.506,0.510,0.504,0.500,0.507,0.503,0.502,0.508,0.496,0.497,0.500,0.501,0.504,0.504,0.498,0.511,0.493,0.486,0.481,0.512,0.504,0.501,0.496,0.493,0.494,0.500,0.440,0.503,0.499,0.474,0.498,0.506,0.508,0.493,0.504,0.500,0.469,0.512,0.505,0.499,0.482,0.499,0.506,0.498,0.502,0.503,0.487,0.474,0.489,0.504,0.476,0.516,0.495,0.495,0.470,0.502,0.456,0.516,0.500,0.472,0.504,0.508,0.499,0.511,0.507,0.483,0.506,0.503,0.507,0.456,0.484,0.514,0.478,0.506,0.497,0.491,0.459},{0.500,0.503,0.500,0.503,0.504,0.497,0.507,0.490,0.497,0.472,0.497,0.499,0.501,0.510,0.502,0.487,0.499,0.503,0.500,0.502,0.500,0.486,0.500,0.499,0.519,0.493,0.503,0.489,0.502,0.487,0.491,0.503,0.499,0.511,0.489,0.506,0.499,0.495,0.502,0.483,0.500,0.460,0.488,0.501,0.484,0.498,0.490,0.501,0.504,0.504,0.505,0.500,0.502,0.504,0.467,0.502,0.479,0.489,0.502,0.478,0.495,0.497,0.473,0.507,0.512,0.505,0.505,0.504,0.504,0.483,0.496,0.492,0.490,0.495,0.497,0.461,0.500,0.494,0.500,0.500,0.502,0.496,0.496,0.498,0.505,0.503,0.501,0.495,0.488,0.498,0.497,0.485,0.494,0.493,0.499,0.495,0.497,0.495,0.494,0.496,0.473,0.470,0.496,0.492,0.494,0.501,0.486,0.490,0.499,0.452,0.495,0.491,0.486,0.494,0.498,0.500,0.493,0.495,0.502,0.493,0.503,0.501,0.470,0.451,0.497,0.491,0.500,0.495,0.515,0.469,0.480,0.472,0.495,0.477,0.500,0.487,0.481,0.464,0.504,0.456,0.499,0.495,0.487,0.491,0.494,0.498,0.498,0.494,0.499,0.495,0.509,0.499,0.425,0.482,0.501,0.482,0.501,0.498,0.473,0.449},{0.512,0.506,0.505,0.479,0.492,0.509,0.509,0.512,0.510,0.488,0.512,0.517,0.510,0.469,0.513,0.505,0.506,0.506,0.508,0.500,0.506,0.507,0.509,0.500,0.518,0.507,0.494,0.507,0.515,0.496,0.486,0.514,0.507,0.516,0.492,0.511,0.514,0.502,0.511,0.486,0.500,0.466,0.497,0.500,0.486,0.501,0.503,0.512,0.510,0.517,0.510,0.516,0.515,0.513,0.480,0.502,0.491,0.500,0.500,0.498,0.509,0.505,0.486,0.519,0.511,0.509,0.517,0.510,0.504,0.497,0.491,0.500,0.520,0.508,0.498,0.483,0.503,0.495,0.505,0.513,0.510,0.506,0.498,0.508,0.511,0.505,0.524,0.501,0.518,0.515,0.514,0.502,0.505,0.482,0.508,0.506,0.511,0.506,0.502,0.502,0.492,0.496,0.501,0.511,0.504,0.504,0.496,0.479,0.511,0.451,0.508,0.507,0.476,0.504,0.511,0.507,0.501,0.500,0.509,0.503,0.512,0.487,0.501,0.488,0.505,0.508,0.502,0.505,0.506,0.489,0.501,0.501,0.507,0.496,0.509,0.493,0.472,0.474,0.517,0.455,0.521,0.501,0.484,0.506,0.510,0.481,0.520,0.505,0.490,0.507,0.508,0.509,0.475,0.496,0.518,0.481,0.505,0.506,0.467,0.446},{0.500,0.502,0.503,0.496,0.499,0.503,0.511,0.509,0.501,0.491,0.500,0.509,0.500,0.465,0.506,0.464,0.507,0.511,0.502,0.488,0.500,0.500,0.501,0.503,0.501,0.509,0.486,0.505,0.506,0.500,0.491,0.504,0.502,0.493,0.497,0.506,0.502,0.495,0.505,0.489,0.484,0.475,0.485,0.504,0.492,0.491,0.495,0.511,0.505,0.505,0.501,0.506,0.516,0.503,0.465,0.489,0.470,0.492,0.503,0.497,0.500,0.506,0.482,0.503,0.506,0.509,0.507,0.506,0.502,0.498,0.521,0.494,0.507,0.497,0.499,0.480,0.505,0.503,0.498,0.503,0.501,0.510,0.505,0.511,0.503,0.500,0.494,0.505,0.506,0.505,0.507,0.492,0.502,0.481,0.503,0.507,0.505,0.501,0.504,0.498,0.494,0.481,0.505,0.498,0.498,0.503,0.498,0.496,0.504,0.451,0.502,0.505,0.492,0.507,0.504,0.508,0.497,0.502,0.505,0.486,0.502,0.503,0.487,0.470,0.500,0.501,0.500,0.493,0.499,0.500,0.501,0.494,0.505,0.484,0.498,0.495,0.498,0.467,0.508,0.456,0.509,0.510,0.478,0.500,0.503,0.485,0.502,0.516,0.485,0.508,0.510,0.503,0.431,0.482,0.508,0.486,0.498,0.498,0.481,0.457},{0.502,0.499,0.503,0.501,0.506,0.504,0.492,0.509,0.495,0.477,0.501,0.520,0.498,0.492,0.510,0.493,0.507,0.508,0.491,0.507,0.505,0.495,0.502,0.491,0.487,0.519,0.493,0.512,0.496,0.472,0.489,0.498,0.501,0.499,0.500,0.498,0.511,0.496,0.500,0.497,0.482,0.464,0.482,0.502,0.463,0.494,0.495,0.503,0.496,0.502,0.515,0.505,0.505,0.504,0.466,0.480,0.443,0.493,0.500,0.474,0.500,0.498,0.475,0.498,0.501,0.502,0.504,0.511,0.501,0.505,0.488,0.493,0.508,0.497,0.504,0.439,0.495,0.487,0.490,0.501,0.498,0.504,0.503,0.505,0.500,0.497,0.498,0.497,0.500,0.508,0.502,0.495,0.499,0.503,0.502,0.501,0.493,0.500,0.508,0.475,0.497,0.483,0.512,0.505,0.500,0.498,0.486,0.494,0.508,0.469,0.503,0.499,0.476,0.505,0.500,0.500,0.493,0.504,0.499,0.480,0.496,0.502,0.465,0.453,0.505,0.502,0.506,0.491,0.510,0.466,0.499,0.486,0.502,0.499,0.510,0.496,0.480,0.472,0.497,0.421,0.504,0.497,0.490,0.501,0.503,0.484,0.504,0.508,0.497,0.508,0.503,0.506,0.415,0.485,0.517,0.469,0.508,0.503,0.459,0.453},{0.505,0.503,0.503,0.502,0.507,0.514,0.511,0.506,0.502,0.499,0.505,0.511,0.500,0.484,0.506,0.512,0.505,0.507,0.498,0.484,0.489,0.507,0.507,0.498,0.507,0.521,0.500,0.493,0.501,0.498,0.487,0.511,0.511,0.499,0.483,0.493,0.509,0.502,0.501,0.517,0.495,0.495,0.495,0.504,0.492,0.497,0.505,0.512,0.512,0.494,0.495,0.492,0.514,0.518,0.474,0.490,0.477,0.491,0.501,0.493,0.506,0.506,0.484,0.510,0.503,0.509,0.504,0.512,0.505,0.511,0.477,0.511,0.506,0.497,0.499,0.489,0.504,0.503,0.499,0.503,0.508,0.500,0.501,0.524,0.494,0.498,0.503,0.511,0.503,0.507,0.504,0.489,0.495,0.490,0.504,0.511,0.515,0.501,0.505,0.497,0.477,0.485,0.500,0.497,0.510,0.487,0.489,0.491,0.500,0.459,0.498,0.516,0.486,0.504,0.495,0.522,0.499,0.508,0.500,0.505,0.496,0.503,0.490,0.472,0.487,0.513,0.506,0.498,0.515,0.515,0.481,0.486,0.507,0.475,0.507,0.503,0.480,0.439,0.510,0.445,0.496,0.500,0.492,0.511,0.510,0.484,0.499,0.514,0.493,0.504,0.508,0.512,0.418,0.483,0.511,0.473,0.512,0.498,0.467,0.434},{0.508,0.502,0.499,0.501,0.507,0.507,0.508,0.500,0.502,0.502,0.504,0.500,0.503,0.470,0.499,0.497,0.511,0.506,0.502,0.485,0.502,0.507,0.502,0.499,0.501,0.502,0.490,0.502,0.509,0.498,0.495,0.506,0.509,0.517,0.491,0.500,0.505,0.505,0.499,0.479,0.496,0.464,0.484,0.498,0.492,0.489,0.494,0.505,0.502,0.502,0.509,0.506,0.509,0.501,0.474,0.481,0.465,0.498,0.507,0.486,0.505,0.489,0.488,0.509,0.507,0.509,0.513,0.516,0.509,0.481,0.487,0.506,0.495,0.502,0.501,0.477,0.499,0.508,0.500,0.502,0.504,0.507,0.495,0.501,0.505,0.497,0.511,0.503,0.503,0.508,0.507,0.496,0.500,0.479,0.508,0.501,0.507,0.496,0.504,0.503,0.482,0.481,0.508,0.508,0.501,0.500,0.486,0.483,0.500,0.459,0.508,0.496,0.470,0.503,0.504,0.507,0.496,0.508,0.496,0.481,0.499,0.493,0.499,0.481,0.493,0.506,0.505,0.512,0.502,0.498,0.476,0.471,0.500,0.474,0.506,0.496,0.488,0.469,0.502,0.467,0.516,0.496,0.504,0.504,0.505,0.482,0.515,0.501,0.496,0.507,0.508,0.511,0.455,0.472,0.506,0.481,0.504,0.502,0.479,0.426},{0.508,0.486,0.502,0.476,0.499,0.509,0.495,0.510,0.503,0.482,0.491,0.506,0.498,0.467,0.495,0.488,0.504,0.505,0.508,0.476,0.517,0.496,0.512,0.502,0.501,0.527,0.502,0.472,0.501,0.482,0.503,0.508,0.502,0.519,0.476,0.507,0.496,0.490,0.510,0.498,0.481,0.474,0.491,0.500,0.478,0.505,0.491,0.511,0.498,0.509,0.510,0.507,0.504,0.498,0.460,0.497,0.489,0.514,0.494,0.501,0.486,0.505,0.494,0.500,0.512,0.506,0.500,0.519,0.507,0.505,0.532,0.496,0.517,0.501,0.490,0.500,0.515,0.485,0.489,0.498,0.509,0.503,0.488,0.518,0.506,0.500,0.503,0.503,0.498,0.505,0.502,0.489,0.495,0.479,0.496,0.510,0.494,0.497,0.511,0.503,0.485,0.486,0.507,0.501,0.499,0.501,0.481,0.513,0.505,0.477,0.511,0.494,0.482,0.480,0.501,0.506,0.502,0.505,0.503,0.483,0.504,0.478,0.461,0.451,0.494,0.505,0.499,0.497,0.497,0.490,0.466,0.472,0.497,0.465,0.514,0.482,0.477,0.437,0.513,0.474,0.502,0.498,0.484,0.498,0.480,0.463,0.501,0.510,0.508,0.507,0.517,0.504,0.444,0.475,0.501,0.474,0.502,0.511,0.478,0.444},{0.497,0.494,0.507,0.501,0.504,0.500,0.495,0.504,0.502,0.492,0.500,0.505,0.511,0.505,0.506,0.503,0.509,0.499,0.503,0.477,0.490,0.501,0.490,0.493,0.515,0.497,0.495,0.499,0.491,0.491,0.483,0.494,0.504,0.501,0.477,0.496,0.508,0.501,0.494,0.497,0.495,0.464,0.514,0.492,0.471,0.486,0.498,0.509,0.507,0.509,0.507,0.511,0.488,0.522,0.444,0.484,0.476,0.481,0.502,0.483,0.500,0.507,0.462,0.508,0.507,0.504,0.502,0.504,0.503,0.498,0.520,0.487,0.499,0.496,0.507,0.478,0.494,0.497,0.491,0.490,0.506,0.502,0.498,0.515,0.505,0.508,0.507,0.508,0.505,0.500,0.509,0.504,0.502,0.500,0.504,0.497,0.502,0.501,0.509,0.483,0.483,0.479,0.500,0.505,0.500,0.486,0.486,0.497,0.495,0.457,0.509,0.503,0.480,0.496,0.484,0.500,0.492,0.489,0.506,0.481,0.500,0.504,0.462,0.485,0.501,0.504,0.518,0.508,0.507,0.484,0.486,0.466,0.505,0.493,0.510,0.492,0.475,0.468,0.503,0.461,0.499,0.492,0.486,0.502,0.503,0.470,0.511,0.526,0.497,0.512,0.508,0.506,0.453,0.469,0.501,0.465,0.495,0.499,0.475,0.468},{0.509,0.499,0.504,0.488,0.505,0.506,0.514,0.507,0.508,0.500,0.509,0.494,0.501,0.498,0.509,0.498,0.504,0.510,0.507,0.489,0.502,0.512,0.506,0.503,0.504,0.521,0.499,0.500,0.508,0.505,0.490,0.507,0.511,0.510,0.486,0.511,0.508,0.505,0.502,0.498,0.500,0.471,0.488,0.506,0.499,0.504,0.488,0.505,0.510,0.507,0.511,0.510,0.513,0.512,0.466,0.495,0.471,0.494,0.502,0.490,0.511,0.503,0.476,0.513,0.512,0.512,0.510,0.510,0.508,0.508,0.494,0.489,0.500,0.504,0.504,0.498,0.505,0.503,0.512,0.505,0.502,0.508,0.497,0.514,0.507,0.502,0.504,0.507,0.502,0.509,0.504,0.501,0.501,0.501,0.502,0.513,0.505,0.503,0.510,0.505,0.490,0.480,0.506,0.507,0.503,0.507,0.493,0.501,0.506,0.459,0.507,0.514,0.464,0.511,0.509,0.507,0.493,0.505,0.503,0.478,0.506,0.500,0.492,0.473,0.499,0.500,0.499,0.505,0.505,0.486,0.486,0.457,0.506,0.490,0.519,0.497,0.498,0.471,0.508,0.456,0.511,0.496,0.480,0.502,0.509,0.475,0.518,0.504,0.496,0.505,0.513,0.509,0.440,0.473,0.510,0.466,0.510,0.505,0.486,0.434},{0.493,0.504,0.490,0.483,0.492,0.493,0.495,0.501,0.494,0.470,0.494,0.496,0.491,0.461,0.498,0.469,0.498,0.497,0.504,0.476,0.501,0.501,0.498,0.492,0.491,0.498,0.490,0.492,0.495,0.491,0.474,0.499,0.501,0.472,0.480,0.509,0.497,0.494,0.494,0.484,0.486,0.459,0.478,0.492,0.477,0.474,0.489,0.495,0.507,0.494,0.497,0.492,0.503,0.497,0.467,0.473,0.466,0.481,0.504,0.488,0.487,0.490,0.459,0.499,0.495,0.501,0.498,0.506,0.484,0.491,0.497,0.501,0.488,0.501,0.491,0.469,0.496,0.494,0.498,0.498,0.496,0.496,0.485,0.502,0.492,0.495,0.489,0.496,0.489,0.504,0.501,0.490,0.494,0.489,0.493,0.492,0.502,0.496,0.495,0.502,0.475,0.492,0.495,0.503,0.494,0.506,0.469,0.498,0.491,0.441,0.497,0.498,0.459,0.495,0.512,0.497,0.484,0.483,0.485,0.474,0.498,0.496,0.460,0.475,0.493,0.483,0.489,0.500,0.492,0.457,0.483,0.457,0.495,0.484,0.487,0.487,0.483,0.458,0.506,0.426,0.495,0.489,0.489,0.492,0.500,0.474,0.498,0.508,0.487,0.500,0.504,0.494,0.428,0.484,0.491,0.479,0.495,0.494,0.486,0.439},{0.505,0.496,0.496,0.504,0.492,0.509,0.506,0.500,0.502,0.500,0.501,0.500,0.492,0.480,0.503,0.498,0.504,0.503,0.504,0.485,0.502,0.487,0.499,0.485,0.510,0.494,0.496,0.508,0.500,0.500,0.486,0.503,0.509,0.492,0.487,0.510,0.502,0.498,0.498,0.500,0.495,0.477,0.475,0.498,0.478,0.499,0.503,0.498,0.499,0.502,0.504,0.503,0.507,0.504,0.465,0.463,0.500,0.471,0.503,0.488,0.509,0.504,0.468,0.504,0.504,0.508,0.507,0.509,0.503,0.496,0.508,0.491,0.499,0.497,0.498,0.466,0.501,0.493,0.501,0.501,0.501,0.497,0.494,0.505,0.502,0.499,0.495,0.500,0.495,0.502,0.501,0.494,0.500,0.483,0.502,0.507,0.502,0.500,0.503,0.485,0.481,0.481,0.506,0.501,0.500,0.496,0.469,0.479,0.495,0.466,0.502,0.501,0.474,0.501,0.503,0.501,0.494,0.498,0.505,0.477,0.501,0.495,0.456,0.474,0.498,0.497,0.498,0.501,0.504,0.480,0.471,0.477,0.498,0.484,0.504,0.495,0.486,0.456,0.497,0.455,0.497,0.494,0.478,0.497,0.499,0.468,0.505,0.506,0.484,0.504,0.509,0.506,0.434,0.482,0.504,0.472,0.497,0.502,0.489,0.439},{0.487,0.481,0.490,0.513,0.496,0.502,0.513,0.508,0.487,0.480,0.473,0.481,0.499,0.492,0.496,0.489,0.504,0.505,0.486,0.496,0.507,0.502,0.482,0.486,0.517,0.504,0.479,0.476,0.497,0.487,0.465,0.482,0.517,0.480,0.496,0.492,0.508,0.486,0.482,0.478,0.467,0.442,0.496,0.488,0.502,0.495,0.447,0.501,0.491,0.509,0.486,0.503,0.513,0.514,0.452,0.470,0.433,0.477,0.487,0.462,0.502,0.501,0.455,0.489,0.495,0.499,0.505,0.485,0.500,0.489,0.470,0.487,0.494,0.508,0.497,0.430,0.488,0.512,0.509,0.486,0.501,0.500,0.493,0.482,0.481,0.503,0.490,0.479,0.479,0.500,0.501,0.489,0.483,0.492,0.477,0.470,0.500,0.472,0.504,0.491,0.474,0.462,0.461,0.503,0.473,0.476,0.488,0.492,0.498,0.471,0.507,0.462,0.468,0.501,0.502,0.497,0.483,0.489,0.489,0.479,0.489,0.468,0.491,0.464,0.498,0.490,0.476,0.483,0.480,0.465,0.493,0.453,0.477,0.471,0.517,0.467,0.492,0.437,0.489,0.447,0.503,0.466,0.473,0.483,0.513,0.460,0.480,0.490,0.464,0.484,0.496,0.487,0.372,0.472,0.494,0.450,0.486,0.502,0.443,0.443},{0.501,0.506,0.506,0.496,0.503,0.505,0.514,0.502,0.508,0.494,0.507,0.501,0.501,0.461,0.503,0.494,0.505,0.515,0.502,0.503,0.510,0.514,0.511,0.504,0.522,0.520,0.484,0.517,0.508,0.498,0.505,0.511,0.508,0.517,0.485,0.496,0.507,0.506,0.497,0.497,0.498,0.498,0.483,0.503,0.471,0.501,0.503,0.510,0.500,0.508,0.511,0.509,0.511,0.506,0.467,0.476,0.471,0.484,0.503,0.496,0.514,0.509,0.462,0.516,0.516,0.508,0.511,0.509,0.507,0.506,0.508,0.505,0.504,0.503,0.500,0.490,0.507,0.505,0.508,0.504,0.504,0.501,0.499,0.508,0.503,0.502,0.504,0.508,0.496,0.504,0.502,0.493,0.502,0.477,0.505,0.507,0.510,0.492,0.508,0.509,0.488,0.482,0.496,0.501,0.502,0.493,0.496,0.475,0.503,0.471,0.503,0.501,0.475,0.508,0.511,0.509,0.492,0.501,0.501,0.456,0.505,0.490,0.487,0.485,0.496,0.496,0.511,0.503,0.516,0.494,0.471,0.465,0.503,0.473,0.502,0.500,0.505,0.480,0.502,0.460,0.506,0.496,0.462,0.504,0.503,0.493,0.508,0.501,0.493,0.500,0.508,0.506,0.444,0.478,0.509,0.462,0.503,0.504,0.488,0.468},{0.503,0.501,0.506,0.482,0.503,0.500,0.507,0.498,0.505,0.504,0.509,0.504,0.512,0.481,0.505,0.479,0.509,0.498,0.495,0.491,0.506,0.505,0.510,0.502,0.509,0.504,0.497,0.506,0.502,0.497,0.497,0.507,0.500,0.499,0.473,0.510,0.510,0.495,0.502,0.488,0.484,0.464,0.504,0.506,0.487,0.500,0.504,0.500,0.515,0.499,0.500,0.503,0.506,0.504,0.468,0.483,0.477,0.499,0.498,0.495,0.503,0.506,0.475,0.492,0.506,0.511,0.507,0.512,0.499,0.499,0.510,0.495,0.508,0.492,0.510,0.469,0.505,0.510,0.499,0.500,0.515,0.504,0.495,0.506,0.507,0.501,0.511,0.501,0.510,0.497,0.513,0.492,0.507,0.470,0.507,0.503,0.505,0.500,0.514,0.509,0.490,0.478,0.508,0.502,0.513,0.496,0.469,0.488,0.506,0.449,0.511,0.502,0.489,0.509,0.503,0.508,0.499,0.511,0.502,0.487,0.512,0.506,0.488,0.461,0.497,0.498,0.496,0.498,0.504,0.504,0.478,0.475,0.504,0.485,0.506,0.500,0.479,0.462,0.514,0.448,0.503,0.501,0.475,0.505,0.508,0.487,0.516,0.510,0.498,0.507,0.511,0.502,0.467,0.487,0.506,0.469,0.504,0.504,0.497,0.440},{0.508,0.507,0.506,0.495,0.513,0.500,0.508,0.508,0.504,0.495,0.503,0.507,0.503,0.466,0.506,0.501,0.507,0.515,0.507,0.488,0.504,0.504,0.500,0.497,0.510,0.503,0.504,0.502,0.506,0.497,0.490,0.509,0.498,0.500,0.488,0.513,0.506,0.508,0.497,0.488,0.497,0.472,0.475,0.510,0.497,0.500,0.497,0.515,0.509,0.507,0.513,0.510,0.512,0.506,0.455,0.484,0.468,0.495,0.506,0.497,0.505,0.501,0.488,0.506,0.507,0.511,0.506,0.516,0.506,0.499,0.494,0.501,0.503,0.502,0.504,0.487,0.504,0.503,0.508,0.500,0.504,0.504,0.497,0.511,0.505,0.493,0.515,0.507,0.494,0.502,0.505,0.502,0.502,0.500,0.510,0.505,0.503,0.491,0.511,0.506,0.471,0.480,0.504,0.506,0.503,0.505,0.486,0.493,0.506,0.441,0.510,0.507,0.489,0.505,0.497,0.509,0.495,0.507,0.498,0.475,0.508,0.493,0.472,0.479,0.492,0.505,0.515,0.500,0.509,0.511,0.461,0.449,0.504,0.485,0.511,0.499,0.486,0.468,0.513,0.435,0.507,0.504,0.464,0.508,0.505,0.493,0.510,0.507,0.503,0.497,0.510,0.507,0.454,0.473,0.508,0.476,0.512,0.497,0.479,0.435},{0.505,0.496,0.500,0.487,0.502,0.504,0.505,0.502,0.496,0.455,0.490,0.497,0.505,0.468,0.496,0.487,0.499,0.505,0.502,0.480,0.494,0.497,0.499,0.494,0.501,0.499,0.488,0.500,0.505,0.493,0.479,0.501,0.504,0.506,0.478,0.515,0.500,0.495,0.497,0.489,0.482,0.460,0.502,0.504,0.490,0.492,0.499,0.506,0.508,0.503,0.501,0.506,0.500,0.507,0.449,0.494,0.463,0.498,0.501,0.494,0.496,0.496,0.467,0.502,0.503,0.503,0.503,0.503,0.498,0.481,0.505,0.496,0.498,0.484,0.499,0.481,0.500,0.501,0.501,0.496,0.504,0.498,0.495,0.506,0.501,0.500,0.501,0.496,0.497,0.501,0.503,0.496,0.500,0.472,0.492,0.500,0.491,0.498,0.504,0.503,0.480,0.486,0.499,0.495,0.490,0.504,0.496,0.493,0.497,0.448,0.509,0.504,0.469,0.504,0.508,0.503,0.489,0.503,0.490,0.484,0.499,0.494,0.494,0.467,0.495,0.486,0.499,0.503,0.502,0.478,0.473,0.462,0.499,0.496,0.508,0.496,0.495,0.483,0.502,0.454,0.500,0.485,0.498,0.502,0.497,0.463,0.509,0.496,0.487,0.496,0.504,0.504,0.426,0.491,0.506,0.471,0.497,0.496,0.475,0.427},{0.506,0.501,0.505,0.500,0.509,0.511,0.516,0.498,0.509,0.510,0.502,0.511,0.502,0.484,0.509,0.497,0.506,0.510,0.503,0.484,0.502,0.503,0.511,0.499,0.509,0.503,0.501,0.495,0.506,0.499,0.492,0.512,0.507,0.506,0.496,0.513,0.509,0.499,0.510,0.495,0.497,0.476,0.484,0.506,0.479,0.501,0.501,0.511,0.509,0.507,0.507,0.509,0.511,0.510,0.482,0.488,0.482,0.500,0.506,0.485,0.508,0.500,0.474,0.511,0.511,0.515,0.511,0.512,0.505,0.502,0.500,0.505,0.503,0.510,0.502,0.490,0.507,0.504,0.506,0.510,0.499,0.511,0.494,0.502,0.504,0.508,0.505,0.504,0.511,0.509,0.510,0.495,0.503,0.504,0.508,0.514,0.511,0.504,0.504,0.505,0.480,0.505,0.507,0.504,0.505,0.497,0.486,0.472,0.505,0.465,0.504,0.506,0.490,0.510,0.511,0.511,0.500,0.505,0.504,0.500,0.509,0.498,0.484,0.477,0.501,0.501,0.512,0.510,0.517,0.487,0.481,0.483,0.511,0.486,0.506,0.503,0.489,0.486,0.508,0.467,0.503,0.494,0.498,0.507,0.506,0.495,0.512,0.515,0.495,0.507,0.514,0.504,0.429,0.492,0.508,0.481,0.504,0.503,0.464,0.438},{0.502,0.506,0.503,0.516,0.506,0.506,0.501,0.501,0.501,0.482,0.503,0.510,0.496,0.479,0.492,0.495,0.504,0.496,0.503,0.470,0.505,0.509,0.504,0.494,0.496,0.508,0.505,0.495,0.511,0.494,0.484,0.499,0.496,0.504,0.478,0.514,0.494,0.498,0.498,0.473,0.499,0.465,0.483,0.499,0.493,0.507,0.501,0.505,0.513,0.511,0.504,0.502,0.507,0.505,0.457,0.501,0.462,0.502,0.507,0.487,0.506,0.487,0.497,0.500,0.511,0.498,0.503,0.513,0.496,0.506,0.506,0.502,0.506,0.494,0.498,0.489,0.494,0.493,0.503,0.502,0.496,0.493,0.496,0.502,0.498,0.475,0.497,0.503,0.503,0.483,0.505,0.502,0.485,0.491,0.509,0.509,0.506,0.503,0.505,0.498,0.496,0.484,0.491,0.497,0.499,0.489,0.502,0.487,0.500,0.453,0.502,0.495,0.484,0.498,0.500,0.506,0.492,0.496,0.490,0.488,0.487,0.489,0.492,0.476,0.490,0.504,0.500,0.498,0.501,0.484,0.478,0.473,0.499,0.498,0.508,0.499,0.483,0.470,0.502,0.441,0.498,0.493,0.470,0.497,0.497,0.479,0.504,0.513,0.485,0.498,0.510,0.502,0.451,0.478,0.511,0.478,0.500,0.500,0.479,0.449},{0.485,0.499,0.508,0.471,0.484,0.481,0.495,0.509,0.493,0.410,0.497,0.495,0.490,0.470,0.480,0.488,0.479,0.503,0.478,0.493,0.475,0.472,0.501,0.486,0.494,0.453,0.491,0.487,0.510,0.475,0.458,0.489,0.500,0.481,0.482,0.503,0.491,0.490,0.482,0.464,0.472,0.502,0.448,0.491,0.480,0.486,0.473,0.498,0.475,0.489,0.489,0.473,0.490,0.484,0.426,0.449,0.451,0.471,0.490,0.464,0.474,0.467,0.460,0.485,0.472,0.490,0.508,0.470,0.472,0.474,0.515,0.467,0.471,0.503,0.475,0.478,0.485,0.491,0.486,0.492,0.501,0.486,0.473,0.492,0.494,0.497,0.477,0.482,0.485,0.483,0.490,0.475,0.481,0.474,0.488,0.490,0.471,0.480,0.480,0.496,0.483,0.461,0.483,0.475,0.485,0.500,0.442,0.448,0.496,0.429,0.480,0.459,0.455,0.486,0.489,0.476,0.467,0.488,0.491,0.459,0.490,0.468,0.490,0.492,0.480,0.479,0.488,0.488,0.470,0.470,0.510,0.488,0.488,0.494,0.485,0.481,0.482,0.493,0.501,0.407,0.492,0.491,0.482,0.482,0.486,0.415,0.500,0.503,0.493,0.480,0.487,0.483,0.423,0.422,0.488,0.430,0.476,0.494,0.460,0.432},{0.497,0.502,0.488,0.463,0.480,0.495,0.498,0.493,0.480,0.463,0.494,0.483,0.467,0.446,0.504,0.468,0.488,0.460,0.483,0.491,0.492,0.493,0.501,0.471,0.460,0.472,0.458,0.473,0.491,0.459,0.457,0.478,0.501,0.488,0.472,0.501,0.489,0.473,0.488,0.478,0.487,0.476,0.495,0.493,0.477,0.469,0.502,0.489,0.480,0.486,0.480,0.463,0.487,0.480,0.455,0.467,0.462,0.492,0.504,0.471,0.499,0.475,0.465,0.495,0.497,0.487,0.483,0.492,0.493,0.447,0.463,0.492,0.490,0.502,0.504,0.462,0.486,0.498,0.490,0.490,0.495,0.481,0.470,0.496,0.481,0.483,0.485,0.481,0.486,0.479,0.480,0.492,0.481,0.462,0.482,0.478,0.480,0.486,0.505,0.484,0.461,0.485,0.500,0.492,0.477,0.484,0.468,0.482,0.486,0.456,0.505,0.487,0.478,0.493,0.494,0.501,0.471,0.472,0.498,0.467,0.498,0.465,0.449,0.473,0.480,0.484,0.499,0.474,0.483,0.477,0.425,0.458,0.494,0.510,0.489,0.479,0.456,0.412,0.484,0.434,0.497,0.488,0.474,0.486,0.500,0.517,0.491,0.515,0.492,0.493,0.491,0.484,0.482,0.484,0.498,0.467,0.489,0.468,0.476,0.412},{0.501,0.506,0.507,0.501,0.503,0.507,0.509,0.501,0.501,0.494,0.494,0.510,0.502,0.482,0.508,0.481,0.504,0.510,0.500,0.489,0.503,0.494,0.505,0.493,0.507,0.517,0.494,0.506,0.504,0.505,0.493,0.504,0.512,0.504,0.506,0.513,0.504,0.501,0.499,0.498,0.495,0.481,0.489,0.505,0.493,0.491,0.491,0.506,0.506,0.501,0.504,0.512,0.508,0.502,0.459,0.480,0.475,0.496,0.501,0.494,0.505,0.502,0.482,0.510,0.509,0.508,0.506,0.511,0.502,0.489,0.513,0.498,0.494,0.495,0.500,0.478,0.504,0.502,0.509,0.506,0.503,0.512,0.496,0.501,0.505,0.512,0.500,0.508,0.507,0.500,0.506,0.495,0.506,0.461,0.496,0.508,0.504,0.499,0.507,0.491,0.483,0.500,0.502,0.503,0.506,0.499,0.483,0.482,0.509,0.441,0.496,0.504,0.472,0.506,0.501,0.511,0.495,0.505,0.496,0.493,0.503,0.501,0.468,0.471,0.496,0.510,0.500,0.500,0.503,0.490,0.492,0.469,0.504,0.499,0.506,0.502,0.482,0.469,0.509,0.460,0.512,0.498,0.492,0.504,0.502,0.462,0.505,0.522,0.496,0.507,0.513,0.511,0.445,0.487,0.513,0.481,0.503,0.498,0.504,0.429},{0.497,0.494,0.500,0.495,0.505,0.502,0.499,0.512,0.508,0.481,0.499,0.509,0.513,0.501,0.515,0.494,0.508,0.497,0.500,0.488,0.508,0.499,0.492,0.506,0.486,0.518,0.491,0.505,0.510,0.496,0.472,0.505,0.494,0.487,0.488,0.505,0.512,0.509,0.502,0.475,0.502,0.479,0.489,0.500,0.481,0.498,0.496,0.509,0.500,0.500,0.502,0.505,0.510,0.498,0.490,0.487,0.457,0.506,0.516,0.494,0.502,0.494,0.491,0.500,0.507,0.510,0.500,0.509,0.504,0.495,0.491,0.491,0.506,0.501,0.499,0.497,0.511,0.492,0.507,0.503,0.495,0.504,0.492,0.511,0.498,0.505,0.497,0.508,0.501,0.505,0.507,0.503,0.501,0.503,0.501,0.502,0.506,0.495,0.504,0.497,0.475,0.492,0.503,0.500,0.500,0.489,0.458,0.493,0.501,0.466,0.506,0.493,0.455,0.498,0.504,0.507,0.500,0.495,0.498,0.481,0.492,0.491,0.468,0.476,0.492,0.502,0.503,0.504,0.504,0.500,0.491,0.475,0.500,0.493,0.511,0.502,0.507,0.471,0.501,0.454,0.502,0.497,0.488,0.506,0.500,0.436,0.511,0.497,0.491,0.505,0.511,0.508,0.445,0.479,0.492,0.460,0.501,0.495,0.467,0.449},{0.501,0.506,0.503,0.497,0.500,0.509,0.506,0.498,0.500,0.494,0.502,0.502,0.506,0.494,0.496,0.496,0.503,0.510,0.495,0.488,0.504,0.493,0.502,0.493,0.508,0.501,0.498,0.494,0.503,0.500,0.497,0.504,0.502,0.494,0.482,0.503,0.505,0.501,0.504,0.502,0.502,0.469,0.476,0.507,0.501,0.496,0.513,0.505,0.506,0.506,0.511,0.511,0.510,0.501,0.471,0.491,0.444,0.497,0.507,0.493,0.504,0.495,0.467,0.511,0.508,0.507,0.509,0.508,0.510,0.507,0.505,0.497,0.514,0.499,0.501,0.480,0.508,0.503,0.489,0.505,0.505,0.501,0.494,0.504,0.498,0.500,0.510,0.501,0.499,0.500,0.503,0.494,0.500,0.473,0.502,0.513,0.503,0.490,0.505,0.499,0.485,0.477,0.506,0.500,0.502,0.495,0.483,0.488,0.499,0.472,0.504,0.497,0.470,0.506,0.510,0.511,0.498,0.504,0.506,0.487,0.509,0.495,0.492,0.478,0.499,0.496,0.510,0.504,0.502,0.492,0.487,0.452,0.500,0.491,0.507,0.492,0.497,0.469,0.512,0.458,0.503,0.501,0.474,0.502,0.499,0.495,0.512,0.497,0.506,0.499,0.513,0.504,0.453,0.475,0.505,0.464,0.505,0.505,0.474,0.444},{0.503,0.501,0.500,0.500,0.511,0.495,0.504,0.478,0.500,0.489,0.495,0.501,0.502,0.492,0.484,0.514,0.500,0.497,0.507,0.501,0.494,0.494,0.497,0.507,0.495,0.514,0.494,0.514,0.494,0.485,0.493,0.494,0.505,0.476,0.489,0.500,0.491,0.492,0.480,0.476,0.485,0.451,0.475,0.499,0.475,0.484,0.498,0.503,0.504,0.510,0.505,0.489,0.502,0.500,0.457,0.494,0.477,0.461,0.486,0.483,0.499,0.491,0.458,0.508,0.496,0.506,0.511,0.505,0.492,0.497,0.484,0.485,0.499,0.485,0.491,0.462,0.511,0.491,0.494,0.492,0.495,0.496,0.501,0.504,0.503,0.498,0.487,0.500,0.501,0.486,0.507,0.506,0.496,0.476,0.493,0.496,0.505,0.504,0.497,0.489,0.500,0.484,0.499,0.489,0.495,0.498,0.457,0.494,0.499,0.481,0.499,0.504,0.475,0.502,0.499,0.496,0.493,0.503,0.487,0.480,0.489,0.489,0.499,0.476,0.499,0.488,0.503,0.507,0.496,0.435,0.495,0.483,0.497,0.496,0.503,0.483,0.469,0.476,0.511,0.447,0.505,0.497,0.477,0.498,0.496,0.486,0.494,0.503,0.478,0.494,0.500,0.506,0.433,0.489,0.502,0.478,0.502,0.496,0.502,0.458},{0.484,0.473,0.491,0.454,0.481,0.494,0.487,0.486,0.478,0.460,0.488,0.509,0.456,0.459,0.472,0.483,0.489,0.505,0.482,0.464,0.475,0.470,0.492,0.485,0.475,0.511,0.495,0.499,0.487,0.484,0.475,0.488,0.500,0.462,0.497,0.470,0.488,0.484,0.479,0.494,0.486,0.418,0.483,0.490,0.464,0.482,0.458,0.494,0.490,0.472,0.495,0.490,0.495,0.487,0.448,0.470,0.462,0.457,0.477,0.476,0.492,0.480,0.490,0.504,0.478,0.486,0.489,0.487,0.484,0.487,0.512,0.464,0.487,0.489,0.475,0.458,0.479,0.493,0.490,0.493,0.479,0.493,0.486,0.496,0.498,0.486,0.489,0.486,0.481,0.486,0.493,0.469,0.469,0.488,0.496,0.469,0.486,0.496,0.486,0.502,0.442,0.468,0.483,0.458,0.483,0.457,0.482,0.488,0.472,0.405,0.497,0.489,0.464,0.473,0.493,0.483,0.483,0.470,0.486,0.481,0.492,0.474,0.418,0.448,0.475,0.484,0.493,0.490,0.485,0.447,0.449,0.449,0.483,0.442,0.481,0.494,0.480,0.442,0.508,0.436,0.494,0.457,0.493,0.480,0.489,0.451,0.498,0.480,0.463,0.482,0.488,0.487,0.452,0.455,0.512,0.442,0.476,0.480,0.492,0.467},{0.499,0.490,0.486,0.440,0.491,0.498,0.506,0.498,0.490,0.472,0.492,0.488,0.466,0.463,0.476,0.451,0.493,0.490,0.486,0.457,0.461,0.498,0.484,0.486,0.470,0.493,0.500,0.504,0.482,0.479,0.492,0.492,0.490,0.475,0.483,0.484,0.507,0.486,0.491,0.475,0.496,0.476,0.433,0.496,0.489,0.491,0.479,0.492,0.487,0.501,0.495,0.498,0.500,0.491,0.449,0.479,0.463,0.469,0.490,0.464,0.479,0.488,0.479,0.492,0.499,0.496,0.497,0.475,0.488,0.486,0.472,0.496,0.504,0.498,0.487,0.481,0.487,0.496,0.456,0.481,0.493,0.494,0.490,0.479,0.496,0.494,0.491,0.483,0.513,0.497,0.501,0.498,0.479,0.492,0.475,0.488,0.493,0.493,0.472,0.487,0.448,0.482,0.482,0.493,0.488,0.494,0.488,0.486,0.475,0.489,0.476,0.499,0.447,0.495,0.498,0.488,0.477,0.491,0.502,0.459,0.481,0.518,0.467,0.446,0.481,0.484,0.475,0.508,0.482,0.465,0.469,0.452,0.490,0.469,0.495,0.481,0.499,0.464,0.507,0.439,0.490,0.450,0.476,0.477,0.503,0.463,0.503,0.489,0.463,0.480,0.495,0.482,0.421,0.449,0.494,0.447,0.482,0.484,0.482,0.426},{0.509,0.506,0.508,0.500,0.502,0.502,0.499,0.511,0.503,0.502,0.498,0.510,0.514,0.470,0.513,0.489,0.499,0.504,0.513,0.498,0.496,0.494,0.505,0.498,0.514,0.507,0.500,0.507,0.506,0.493,0.495,0.510,0.503,0.486,0.491,0.509,0.508,0.504,0.502,0.501,0.500,0.487,0.488,0.500,0.494,0.492,0.514,0.509,0.510,0.502,0.506,0.508,0.509,0.504,0.464,0.478,0.474,0.499,0.503,0.495,0.504,0.498,0.506,0.513,0.509,0.509,0.507,0.511,0.500,0.505,0.504,0.494,0.502,0.502,0.501,0.473,0.496,0.496,0.507,0.508,0.496,0.500,0.499,0.511,0.504,0.508,0.500,0.500,0.505,0.495,0.506,0.491,0.495,0.498,0.503,0.506,0.506,0.497,0.505,0.500,0.496,0.486,0.509,0.501,0.499,0.499,0.472,0.475,0.501,0.452,0.501,0.493,0.484,0.506,0.493,0.505,0.497,0.500,0.502,0.488,0.499,0.501,0.479,0.483,0.495,0.496,0.507,0.492,0.500,0.484,0.485,0.479,0.505,0.503,0.505,0.491,0.503,0.475,0.514,0.476,0.510,0.498,0.476,0.504,0.502,0.504,0.506,0.515,0.501,0.505,0.511,0.499,0.459,0.471,0.515,0.476,0.506,0.502,0.481,0.448},{0.476,0.450,0.455,0.451,0.472,0.438,0.455,0.470,0.463,0.438,0.462,0.482,0.438,0.438,0.463,0.474,0.461,0.457,0.432,0.454,0.488,0.479,0.444,0.466,0.447,0.473,0.442,0.433,0.460,0.456,0.429,0.469,0.456,0.455,0.463,0.470,0.462,0.440,0.476,0.471,0.463,0.466,0.466,0.456,0.472,0.465,0.477,0.472,0.465,0.482,0.481,0.432,0.469,0.470,0.405,0.440,0.456,0.437,0.449,0.445,0.436,0.470,0.439,0.448,0.464,0.473,0.466,0.458,0.466,0.465,0.433,0.476,0.431,0.450,0.463,0.434,0.468,0.437,0.485,0.450,0.471,0.440,0.452,0.451,0.451,0.469,0.459,0.459,0.477,0.457,0.459,0.441,0.466,0.471,0.471,0.449,0.441,0.448,0.465,0.453,0.429,0.456,0.441,0.466,0.472,0.481,0.405,0.489,0.452,0.455,0.464,0.469,0.415,0.484,0.464,0.456,0.438,0.469,0.470,0.447,0.463,0.449,0.428,0.415,0.470,0.453,0.447,0.482,0.445,0.457,0.443,0.429,0.452,0.501,0.472,0.443,0.457,0.436,0.475,0.428,0.464,0.437,0.453,0.468,0.449,0.437,0.475,0.452,0.438,0.468,0.477,0.467,0.416,0.427,0.452,0.426,0.465,0.468,0.395,0.423},{0.507,0.505,0.503,0.491,0.505,0.514,0.507,0.505,0.502,0.503,0.500,0.506,0.505,0.480,0.499,0.496,0.506,0.505,0.505,0.481,0.504,0.498,0.506,0.496,0.501,0.499,0.493,0.502,0.503,0.484,0.489,0.508,0.499,0.497,0.499,0.509,0.503,0.500,0.500,0.490,0.495,0.481,0.482,0.498,0.473,0.489,0.504,0.505,0.509,0.508,0.512,0.502,0.514,0.503,0.476,0.488,0.486,0.501,0.505,0.491,0.503,0.495,0.475,0.509,0.511,0.508,0.505,0.507,0.500,0.509,0.499,0.489,0.511,0.505,0.499,0.504,0.505,0.511,0.506,0.505,0.502,0.503,0.495,0.508,0.502,0.503,0.498,0.508,0.511,0.509,0.507,0.497,0.502,0.507,0.503,0.511,0.510,0.509,0.504,0.502,0.480,0.505,0.496,0.506,0.504,0.499,0.497,0.476,0.501,0.464,0.501,0.492,0.481,0.502,0.504,0.504,0.495,0.503,0.497,0.491,0.503,0.505,0.467,0.478,0.500,0.501,0.503,0.495,0.500,0.495,0.473,0.471,0.502,0.483,0.504,0.508,0.485,0.484,0.506,0.451,0.506,0.501,0.500,0.504,0.503,0.480,0.507,0.499,0.487,0.501,0.510,0.505,0.455,0.482,0.505,0.491,0.502,0.505,0.472,0.436},{0.491,0.495,0.502,0.492,0.504,0.505,0.511,0.500,0.505,0.494,0.490,0.505,0.501,0.474,0.499,0.474,0.509,0.486,0.516,0.469,0.499,0.496,0.499,0.505,0.509,0.498,0.497,0.503,0.501,0.497,0.490,0.503,0.494,0.513,0.472,0.498,0.501,0.498,0.495,0.477,0.493,0.475,0.472,0.495,0.491,0.484,0.496,0.506,0.510,0.505,0.504,0.499,0.508,0.504,0.458,0.487,0.471,0.486,0.500,0.495,0.495,0.496,0.459,0.500,0.505,0.507,0.497,0.502,0.501,0.489,0.504,0.488,0.503,0.488,0.503,0.465,0.503,0.496,0.498,0.504,0.495,0.499,0.491,0.507,0.505,0.499,0.516,0.496,0.494,0.503,0.514,0.498,0.501,0.462,0.501,0.502,0.507,0.504,0.506,0.495,0.459,0.487,0.504,0.493,0.497,0.504,0.489,0.499,0.493,0.469,0.492,0.497,0.455,0.499,0.497,0.505,0.497,0.502,0.496,0.471,0.499,0.505,0.469,0.484,0.487,0.511,0.494,0.486,0.517,0.489,0.485,0.485,0.495,0.487,0.491,0.492,0.490,0.454,0.503,0.475,0.510,0.501,0.472,0.501,0.502,0.494,0.501,0.511,0.490,0.502,0.505,0.505,0.430,0.485,0.501,0.473,0.504,0.490,0.509,0.457},{0.478,0.485,0.459,0.507,0.486,0.477,0.483,0.475,0.466,0.483,0.480,0.489,0.478,0.452,0.464,0.484,0.482,0.494,0.477,0.459,0.483,0.469,0.481,0.469,0.466,0.505,0.467,0.470,0.479,0.476,0.485,0.472,0.493,0.493,0.444,0.490,0.479,0.487,0.496,0.461,0.494,0.432,0.460,0.483,0.474,0.483,0.504,0.494,0.498,0.479,0.486,0.484,0.495,0.470,0.422,0.483,0.428,0.488,0.474,0.470,0.494,0.491,0.457,0.497,0.491,0.480,0.495,0.493,0.476,0.474,0.497,0.473,0.477,0.486,0.481,0.468,0.475,0.489,0.479,0.488,0.468,0.474,0.486,0.476,0.492,0.476,0.486,0.470,0.482,0.480,0.464,0.459,0.474,0.468,0.475,0.489,0.489,0.469,0.490,0.484,0.455,0.478,0.472,0.455,0.470,0.475,0.464,0.447,0.484,0.415,0.481,0.455,0.478,0.481,0.468,0.482,0.468,0.484,0.487,0.481,0.483,0.455,0.427,0.444,0.454,0.471,0.485,0.483,0.496,0.477,0.466,0.470,0.489,0.453,0.464,0.472,0.475,0.445,0.484,0.414,0.484,0.477,0.487,0.477,0.483,0.451,0.496,0.488,0.469,0.480,0.492,0.473,0.417,0.460,0.479,0.432,0.479,0.479,0.439,0.402},{0.508,0.507,0.509,0.504,0.509,0.506,0.514,0.504,0.505,0.495,0.505,0.503,0.500,0.478,0.507,0.504,0.508,0.507,0.502,0.500,0.515,0.487,0.500,0.500,0.497,0.505,0.505,0.511,0.503,0.494,0.498,0.506,0.508,0.493,0.470,0.510,0.507,0.502,0.503,0.501,0.496,0.485,0.483,0.502,0.487,0.501,0.505,0.502,0.512,0.510,0.511,0.509,0.506,0.508,0.473,0.483,0.477,0.499,0.504,0.490,0.506,0.506,0.479,0.503,0.512,0.504,0.508,0.510,0.507,0.496,0.496,0.494,0.511,0.507,0.507,0.473,0.507,0.499,0.514,0.506,0.503,0.498,0.494,0.504,0.507,0.505,0.504,0.503,0.480,0.496,0.511,0.495,0.501,0.501,0.508,0.509,0.505,0.504,0.510,0.498,0.486,0.493,0.506,0.498,0.506,0.502,0.473,0.495,0.506,0.484,0.502,0.499,0.481,0.504,0.510,0.505,0.497,0.501,0.507,0.488,0.495,0.508,0.466,0.476,0.504,0.497,0.508,0.506,0.504,0.492,0.488,0.493,0.506,0.493,0.514,0.511,0.504,0.484,0.510,0.458,0.508,0.497,0.499,0.505,0.501,0.486,0.516,0.513,0.497,0.509,0.507,0.505,0.450,0.466,0.504,0.473,0.506,0.506,0.477,0.480},{0.513,0.505,0.505,0.512,0.507,0.506,0.511,0.516,0.509,0.487,0.499,0.513,0.499,0.475,0.506,0.487,0.508,0.506,0.511,0.492,0.510,0.499,0.502,0.491,0.522,0.509,0.501,0.497,0.507,0.496,0.487,0.506,0.506,0.508,0.474,0.514,0.503,0.502,0.499,0.496,0.502,0.493,0.485,0.508,0.486,0.500,0.505,0.509,0.510,0.510,0.512,0.511,0.511,0.509,0.462,0.485,0.473,0.486,0.506,0.506,0.500,0.498,0.468,0.505,0.510,0.502,0.512,0.503,0.505,0.489,0.519,0.499,0.514,0.506,0.510,0.480,0.503,0.500,0.506,0.509,0.514,0.506,0.498,0.511,0.504,0.500,0.495,0.504,0.501,0.484,0.509,0.512,0.503,0.502,0.511,0.503,0.497,0.508,0.511,0.500,0.489,0.494,0.501,0.504,0.510,0.499,0.493,0.498,0.493,0.464,0.504,0.497,0.468,0.510,0.504,0.505,0.499,0.512,0.506,0.462,0.512,0.491,0.488,0.479,0.498,0.503,0.508,0.503,0.509,0.479,0.484,0.492,0.509,0.473,0.507,0.508,0.499,0.482,0.509,0.465,0.512,0.502,0.498,0.505,0.506,0.463,0.503,0.512,0.491,0.498,0.507,0.508,0.446,0.496,0.507,0.470,0.503,0.512,0.511,0.447},{0.506,0.502,0.508,0.489,0.501,0.513,0.511,0.512,0.512,0.494,0.507,0.505,0.499,0.477,0.503,0.513,0.507,0.512,0.502,0.493,0.505,0.495,0.508,0.494,0.502,0.512,0.496,0.498,0.509,0.503,0.479,0.513,0.512,0.505,0.493,0.519,0.509,0.508,0.506,0.497,0.502,0.474,0.489,0.503,0.487,0.496,0.503,0.511,0.511,0.503,0.514,0.502,0.513,0.506,0.468,0.496,0.482,0.498,0.510,0.492,0.509,0.494,0.464,0.507,0.511,0.506,0.508,0.510,0.509,0.496,0.518,0.501,0.504,0.501,0.504,0.491,0.503,0.497,0.500,0.508,0.497,0.508,0.500,0.507,0.508,0.500,0.522,0.507,0.506,0.500,0.507,0.497,0.501,0.497,0.509,0.508,0.509,0.503,0.511,0.506,0.476,0.501,0.511,0.507,0.511,0.496,0.483,0.488,0.505,0.456,0.504,0.505,0.482,0.505,0.505,0.505,0.495,0.512,0.505,0.489,0.509,0.490,0.487,0.478,0.499,0.497,0.498,0.498,0.488,0.491,0.491,0.470,0.505,0.467,0.505,0.509,0.494,0.473,0.513,0.447,0.512,0.498,0.487,0.505,0.507,0.473,0.507,0.512,0.493,0.509,0.513,0.507,0.435,0.477,0.506,0.479,0.508,0.505,0.494,0.467},{0.494,0.501,0.497,0.482,0.508,0.497,0.501,0.498,0.502,0.489,0.499,0.498,0.492,0.476,0.495,0.479,0.491,0.499,0.500,0.471,0.495,0.497,0.496,0.495,0.499,0.509,0.494,0.500,0.499,0.494,0.491,0.499,0.501,0.500,0.489,0.499,0.499,0.491,0.489,0.472,0.490,0.458,0.468,0.491,0.486,0.490,0.497,0.495,0.494,0.495,0.500,0.504,0.497,0.494,0.472,0.487,0.475,0.462,0.492,0.472,0.495,0.494,0.472,0.496,0.498,0.497,0.502,0.505,0.501,0.491,0.494,0.492,0.499,0.501,0.494,0.475,0.495,0.497,0.493,0.501,0.497,0.493,0.493,0.501,0.497,0.493,0.499,0.496,0.502,0.492,0.493,0.484,0.494,0.483,0.492,0.499,0.495,0.489,0.500,0.492,0.467,0.471,0.495,0.500,0.498,0.493,0.483,0.477,0.497,0.438,0.495,0.497,0.468,0.497,0.499,0.495,0.492,0.489,0.490,0.476,0.493,0.475,0.472,0.482,0.490,0.496,0.495,0.500,0.498,0.460,0.469,0.478,0.485,0.496,0.499,0.494,0.481,0.467,0.497,0.439,0.503,0.484,0.493,0.487,0.494,0.481,0.490,0.495,0.484,0.496,0.503,0.492,0.454,0.473,0.491,0.449,0.496,0.488,0.486,0.425},{0.505,0.506,0.505,0.483,0.500,0.510,0.512,0.510,0.507,0.496,0.505,0.507,0.498,0.458,0.493,0.502,0.503,0.508,0.505,0.500,0.510,0.496,0.506,0.504,0.500,0.508,0.499,0.497,0.510,0.499,0.491,0.504,0.509,0.482,0.488,0.510,0.508,0.501,0.504,0.491,0.501,0.468,0.454,0.501,0.500,0.494,0.486,0.504,0.504,0.510,0.509,0.499,0.503,0.500,0.463,0.498,0.477,0.506,0.502,0.498,0.508,0.503,0.495,0.504,0.508,0.509,0.511,0.507,0.507,0.493,0.516,0.492,0.507,0.503,0.507,0.479,0.517,0.507,0.500,0.504,0.507,0.504,0.495,0.500,0.502,0.504,0.508,0.508,0.505,0.489,0.505,0.483,0.498,0.489,0.501,0.511,0.507,0.503,0.505,0.496,0.488,0.472,0.505,0.495,0.504,0.503,0.470,0.491,0.500,0.469,0.503,0.502,0.484,0.501,0.512,0.512,0.489,0.502,0.503,0.480,0.506,0.498,0.505,0.487,0.488,0.506,0.499,0.502,0.507,0.499,0.480,0.471,0.503,0.493,0.511,0.510,0.492,0.476,0.505,0.451,0.506,0.505,0.482,0.507,0.502,0.505,0.504,0.508,0.487,0.499,0.507,0.502,0.460,0.485,0.510,0.476,0.509,0.496,0.461,0.438},{0.504,0.492,0.501,0.477,0.498,0.505,0.505,0.506,0.504,0.471,0.500,0.497,0.502,0.484,0.504,0.485,0.509,0.507,0.504,0.501,0.496,0.493,0.499,0.493,0.503,0.500,0.491,0.495,0.501,0.501,0.487,0.500,0.502,0.511,0.495,0.504,0.504,0.500,0.500,0.495,0.490,0.486,0.480,0.505,0.483,0.499,0.504,0.503,0.500,0.505,0.505,0.499,0.506,0.503,0.462,0.485,0.453,0.485,0.505,0.486,0.487,0.501,0.465,0.507,0.509,0.503,0.505,0.507,0.504,0.495,0.505,0.493,0.493,0.481,0.500,0.474,0.498,0.513,0.488,0.503,0.501,0.500,0.502,0.509,0.505,0.499,0.500,0.496,0.503,0.506,0.503,0.485,0.505,0.489,0.501,0.502,0.498,0.490,0.504,0.490,0.491,0.498,0.496,0.498,0.506,0.487,0.486,0.502,0.502,0.470,0.497,0.496,0.487,0.507,0.506,0.505,0.490,0.503,0.499,0.480,0.504,0.506,0.467,0.457,0.495,0.501,0.500,0.503,0.513,0.487,0.478,0.475,0.501,0.487,0.493,0.493,0.493,0.465,0.509,0.454,0.507,0.497,0.484,0.501,0.501,0.489,0.517,0.502,0.493,0.504,0.504,0.495,0.437,0.490,0.503,0.467,0.506,0.496,0.476,0.440},{0.484,0.491,0.477,0.451,0.484,0.489,0.487,0.483,0.476,0.465,0.495,0.494,0.476,0.446,0.475,0.507,0.492,0.472,0.472,0.494,0.502,0.482,0.494,0.477,0.493,0.471,0.466,0.462,0.469,0.484,0.462,0.490,0.483,0.492,0.455,0.488,0.476,0.483,0.488,0.494,0.451,0.446,0.489,0.490,0.485,0.484,0.479,0.478,0.487,0.489,0.492,0.481,0.476,0.494,0.444,0.504,0.472,0.450,0.488,0.487,0.476,0.495,0.481,0.487,0.494,0.478,0.489,0.494,0.473,0.473,0.492,0.471,0.454,0.477,0.488,0.467,0.467,0.489,0.468,0.482,0.476,0.469,0.493,0.503,0.486,0.480,0.505,0.481,0.483,0.481,0.478,0.474,0.477,0.479,0.456,0.487,0.475,0.484,0.500,0.488,0.459,0.467,0.493,0.481,0.487,0.480,0.481,0.459,0.488,0.447,0.491,0.471,0.481,0.488,0.462,0.489,0.476,0.480,0.480,0.481,0.489,0.491,0.453,0.435,0.474,0.485,0.485,0.488,0.468,0.461,0.432,0.448,0.495,0.471,0.488,0.470,0.464,0.458,0.490,0.436,0.485,0.491,0.474,0.493,0.472,0.470,0.489,0.491,0.441,0.483,0.491,0.487,0.450,0.457,0.469,0.461,0.488,0.465,0.452,0.396},{0.511,0.501,0.500,0.505,0.487,0.512,0.510,0.501,0.506,0.488,0.499,0.502,0.497,0.485,0.501,0.493,0.502,0.509,0.508,0.491,0.506,0.494,0.496,0.494,0.489,0.503,0.507,0.509,0.493,0.504,0.477,0.513,0.500,0.486,0.485,0.497,0.498,0.509,0.505,0.506,0.499,0.480,0.495,0.497,0.479,0.491,0.496,0.504,0.504,0.503,0.511,0.486,0.510,0.503,0.479,0.474,0.461,0.516,0.506,0.480,0.505,0.495,0.485,0.506,0.503,0.499,0.507,0.504,0.503,0.506,0.509,0.495,0.487,0.496,0.503,0.472,0.499,0.499,0.500,0.496,0.500,0.512,0.503,0.512,0.502,0.496,0.496,0.499,0.504,0.500,0.506,0.498,0.501,0.489,0.505,0.512,0.508,0.499,0.509,0.487,0.490,0.498,0.503,0.492,0.509,0.489,0.492,0.481,0.499,0.463,0.503,0.499,0.483,0.495,0.512,0.509,0.493,0.506,0.504,0.489,0.501,0.497,0.498,0.463,0.498,0.491,0.506,0.515,0.493,0.481,0.470,0.475,0.499,0.464,0.495,0.503,0.465,0.469,0.505,0.469,0.508,0.500,0.493,0.499,0.498,0.467,0.508,0.517,0.494,0.509,0.506,0.498,0.447,0.499,0.496,0.479,0.504,0.501,0.499,0.461},{0.485,0.499,0.501,0.488,0.512,0.489,0.505,0.491,0.497,0.476,0.503,0.502,0.493,0.476,0.506,0.477,0.489,0.486,0.499,0.500,0.501,0.497,0.499,0.493,0.487,0.500,0.496,0.512,0.508,0.492,0.503,0.492,0.501,0.491,0.461,0.516,0.501,0.496,0.494,0.495,0.481,0.462,0.490,0.490,0.493,0.490,0.493,0.499,0.495,0.504,0.503,0.496,0.497,0.486,0.449,0.477,0.483,0.469,0.501,0.480,0.494,0.500,0.450,0.514,0.508,0.494,0.505,0.512,0.497,0.499,0.485,0.499,0.493,0.503,0.497,0.487,0.489,0.499,0.499,0.493,0.520,0.505,0.501,0.487,0.503,0.502,0.503,0.493,0.478,0.504,0.500,0.496,0.495,0.468,0.490,0.506,0.493,0.494,0.498,0.489,0.468,0.465,0.501,0.491,0.495,0.489,0.474,0.518,0.501,0.449,0.505,0.505,0.455,0.508,0.491,0.490,0.475,0.498,0.506,0.491,0.497,0.496,0.480,0.466,0.500,0.501,0.493,0.502,0.508,0.487,0.483,0.482,0.497,0.491,0.506,0.504,0.476,0.467,0.501,0.431,0.507,0.493,0.477,0.502,0.506,0.485,0.492,0.488,0.496,0.496,0.510,0.500,0.449,0.464,0.501,0.456,0.491,0.499,0.459,0.470},{0.491,0.498,0.475,0.477,0.459,0.471,0.472,0.471,0.478,0.451,0.481,0.495,0.488,0.455,0.510,0.481,0.467,0.487,0.489,0.441,0.469,0.478,0.496,0.495,0.468,0.490,0.488,0.483,0.458,0.505,0.449,0.479,0.486,0.466,0.469,0.508,0.490,0.474,0.461,0.476,0.486,0.451,0.496,0.478,0.427,0.458,0.462,0.489,0.498,0.477,0.488,0.469,0.486,0.483,0.451,0.450,0.445,0.487,0.471,0.464,0.498,0.475,0.482,0.479,0.501,0.466,0.484,0.465,0.471,0.489,0.524,0.465,0.483,0.468,0.498,0.467,0.467,0.481,0.488,0.471,0.482,0.499,0.470,0.501,0.487,0.465,0.490,0.499,0.461,0.462,0.492,0.460,0.456,0.491,0.487,0.488,0.472,0.494,0.484,0.492,0.490,0.449,0.468,0.468,0.492,0.499,0.418,0.467,0.479,0.428,0.467,0.469,0.427,0.466,0.488,0.487,0.472,0.505,0.467,0.453,0.498,0.480,0.477,0.455,0.487,0.470,0.471,0.468,0.491,0.453,0.425,0.456,0.474,0.466,0.479,0.466,0.451,0.476,0.461,0.425,0.489,0.477,0.454,0.484,0.491,0.502,0.484,0.495,0.483,0.485,0.487,0.466,0.429,0.454,0.472,0.468,0.486,0.477,0.464,0.410},{0.450,0.484,0.472,0.474,0.482,0.488,0.472,0.466,0.466,0.432,0.483,0.475,0.487,0.423,0.482,0.451,0.465,0.482,0.488,0.456,0.440,0.459,0.471,0.480,0.451,0.493,0.449,0.477,0.476,0.468,0.455,0.476,0.498,0.468,0.460,0.471,0.480,0.485,0.468,0.484,0.476,0.446,0.417,0.479,0.428,0.482,0.465,0.479,0.484,0.476,0.476,0.508,0.466,0.477,0.456,0.460,0.455,0.487,0.486,0.434,0.488,0.473,0.465,0.484,0.482,0.473,0.473,0.456,0.474,0.469,0.489,0.464,0.481,0.466,0.479,0.450,0.473,0.486,0.490,0.481,0.473,0.482,0.451,0.488,0.470,0.453,0.472,0.481,0.451,0.485,0.473,0.475,0.474,0.464,0.485,0.461,0.479,0.467,0.477,0.476,0.492,0.473,0.471,0.476,0.478,0.476,0.448,0.446,0.483,0.415,0.478,0.484,0.444,0.476,0.479,0.478,0.482,0.487,0.457,0.435,0.463,0.466,0.455,0.472,0.484,0.482,0.470,0.474,0.459,0.468,0.455,0.449,0.478,0.474,0.485,0.470,0.467,0.474,0.467,0.414,0.462,0.471,0.476,0.475,0.470,0.450,0.477,0.480,0.460,0.466,0.472,0.481,0.442,0.473,0.478,0.434,0.488,0.468,0.441,0.429},{0.501,0.491,0.494,0.501,0.506,0.502,0.500,0.495,0.497,0.483,0.497,0.500,0.484,0.487,0.494,0.481,0.507,0.504,0.499,0.509,0.506,0.497,0.491,0.485,0.505,0.501,0.495,0.493,0.495,0.482,0.481,0.492,0.493,0.495,0.487,0.504,0.506,0.502,0.489,0.477,0.483,0.466,0.487,0.500,0.470,0.493,0.479,0.500,0.493,0.499,0.502,0.490,0.503,0.501,0.457,0.479,0.477,0.477,0.498,0.482,0.490,0.484,0.465,0.506,0.500,0.505,0.504,0.503,0.501,0.485,0.523,0.500,0.488,0.486,0.495,0.458,0.502,0.495,0.501,0.499,0.495,0.499,0.497,0.505,0.500,0.505,0.487,0.493,0.494,0.501,0.499,0.493,0.498,0.498,0.496,0.497,0.492,0.495,0.501,0.490,0.480,0.480,0.496,0.492,0.499,0.499,0.475,0.481,0.495,0.470,0.500,0.487,0.454,0.504,0.498,0.499,0.490,0.488,0.495,0.474,0.498,0.500,0.487,0.484,0.496,0.495,0.488,0.492,0.496,0.479,0.468,0.463,0.500,0.481,0.494,0.492,0.485,0.466,0.496,0.457,0.500,0.488,0.485,0.501,0.500,0.465,0.506,0.494,0.477,0.493,0.500,0.498,0.443,0.471,0.499,0.446,0.501,0.498,0.486,0.429},{0.497,0.505,0.503,0.499,0.499,0.508,0.502,0.503,0.500,0.485,0.503,0.503,0.500,0.476,0.509,0.474,0.497,0.507,0.502,0.498,0.495,0.485,0.498,0.497,0.500,0.504,0.492,0.498,0.498,0.497,0.492,0.508,0.503,0.498,0.494,0.502,0.508,0.500,0.502,0.491,0.491,0.456,0.495,0.497,0.491,0.489,0.484,0.502,0.512,0.499,0.510,0.506,0.511,0.500,0.456,0.491,0.487,0.497,0.503,0.503,0.500,0.502,0.475,0.510,0.504,0.505,0.500,0.503,0.501,0.495,0.516,0.501,0.479,0.491,0.500,0.468,0.499,0.477,0.497,0.500,0.497,0.506,0.491,0.508,0.501,0.502,0.513,0.506,0.505,0.504,0.500,0.483,0.497,0.490,0.496,0.498,0.505,0.486,0.501,0.504,0.479,0.484,0.510,0.502,0.496,0.488,0.484,0.484,0.496,0.453,0.501,0.511,0.471,0.497,0.503,0.497,0.496,0.506,0.501,0.485,0.491,0.501,0.470,0.482,0.495,0.498,0.508,0.502,0.489,0.482,0.484,0.463,0.498,0.486,0.496,0.490,0.490,0.493,0.495,0.448,0.510,0.492,0.488,0.497,0.493,0.474,0.504,0.503,0.481,0.502,0.502,0.503,0.464,0.499,0.504,0.484,0.500,0.492,0.467,0.439},{0.491,0.502,0.498,0.490,0.500,0.509,0.494,0.503,0.498,0.487,0.518,0.510,0.491,0.483,0.503,0.502,0.501,0.504,0.507,0.497,0.494,0.503,0.503,0.494,0.521,0.516,0.497,0.493,0.499,0.499,0.489,0.504,0.499,0.493,0.495,0.496,0.502,0.507,0.499,0.480,0.484,0.472,0.503,0.495,0.470,0.493,0.485,0.510,0.511,0.506,0.508,0.507,0.502,0.497,0.479,0.467,0.493,0.495,0.501,0.483,0.504,0.501,0.506,0.505,0.509,0.501,0.506,0.510,0.507,0.501,0.529,0.511,0.488,0.495,0.498,0.481,0.498,0.515,0.482,0.507,0.501,0.498,0.500,0.502,0.500,0.506,0.506,0.505,0.499,0.518,0.499,0.489,0.498,0.476,0.511,0.496,0.515,0.499,0.512,0.500,0.488,0.499,0.500,0.503,0.510,0.503,0.493,0.475,0.507,0.447,0.503,0.494,0.485,0.508,0.508,0.498,0.495,0.499,0.500,0.485,0.506,0.493,0.471,0.470,0.488,0.508,0.499,0.507,0.504,0.488,0.487,0.473,0.496,0.497,0.508,0.484,0.490,0.478,0.499,0.467,0.512,0.496,0.476,0.503,0.495,0.516,0.506,0.536,0.497,0.504,0.496,0.504,0.420,0.481,0.508,0.471,0.504,0.500,0.473,0.437},{0.509,0.505,0.497,0.503,0.494,0.500,0.512,0.513,0.504,0.478,0.503,0.509,0.488,0.478,0.503,0.494,0.505,0.505,0.508,0.494,0.506,0.499,0.500,0.495,0.498,0.495,0.484,0.497,0.511,0.500,0.484,0.503,0.506,0.498,0.488,0.511,0.501,0.503,0.503,0.498,0.492,0.469,0.492,0.504,0.477,0.493,0.497,0.502,0.503,0.504,0.509,0.511,0.500,0.506,0.461,0.493,0.473,0.503,0.498,0.509,0.491,0.507,0.487,0.506,0.509,0.495,0.500,0.505,0.504,0.497,0.510,0.491,0.511,0.487,0.500,0.500,0.494,0.511,0.494,0.504,0.510,0.502,0.495,0.505,0.493,0.491,0.498,0.512,0.497,0.508,0.505,0.500,0.501,0.483,0.503,0.498,0.500,0.503,0.510,0.498,0.488,0.474,0.500,0.504,0.504,0.507,0.490,0.508,0.492,0.482,0.495,0.486,0.483,0.506,0.503,0.498,0.500,0.502,0.503,0.488,0.515,0.502,0.468,0.474,0.492,0.502,0.507,0.500,0.502,0.461,0.475,0.474,0.495,0.480,0.503,0.494,0.498,0.480,0.500,0.452,0.502,0.491,0.477,0.498,0.501,0.509,0.502,0.504,0.484,0.505,0.510,0.500,0.437,0.468,0.513,0.463,0.501,0.505,0.509,0.476},{0.508,0.505,0.497,0.499,0.500,0.507,0.511,0.515,0.496,0.491,0.505,0.507,0.501,0.468,0.505,0.490,0.507,0.507,0.505,0.486,0.505,0.485,0.509,0.502,0.509,0.510,0.494,0.510,0.501,0.497,0.476,0.506,0.500,0.517,0.486,0.505,0.508,0.510,0.506,0.493,0.479,0.484,0.479,0.491,0.483,0.499,0.490,0.507,0.508,0.509,0.510,0.496,0.510,0.514,0.479,0.489,0.475,0.500,0.509,0.494,0.505,0.511,0.500,0.523,0.511,0.514,0.508,0.512,0.504,0.493,0.483,0.488,0.509,0.499,0.513,0.493,0.506,0.515,0.495,0.504,0.507,0.503,0.515,0.506,0.499,0.510,0.515,0.502,0.497,0.507,0.505,0.492,0.504,0.480,0.516,0.504,0.509,0.502,0.517,0.501,0.470,0.483,0.503,0.504,0.502,0.496,0.485,0.482,0.500,0.445,0.500,0.517,0.496,0.504,0.509,0.488,0.498,0.507,0.513,0.468,0.493,0.508,0.491,0.459,0.496,0.489,0.504,0.502,0.504,0.484,0.479,0.469,0.504,0.474,0.498,0.505,0.496,0.489,0.509,0.470,0.503,0.494,0.458,0.506,0.496,0.499,0.509,0.507,0.485,0.501,0.515,0.503,0.447,0.475,0.496,0.478,0.511,0.503,0.483,0.455},{0.491,0.473,0.500,0.475,0.487,0.498,0.496,0.489,0.497,0.475,0.482,0.485,0.483,0.424,0.479,0.493,0.492,0.494,0.510,0.518,0.473,0.498,0.487,0.481,0.477,0.504,0.481,0.502,0.491,0.483,0.496,0.486,0.496,0.502,0.478,0.500,0.500,0.482,0.472,0.435,0.469,0.489,0.476,0.484,0.474,0.491,0.468,0.491,0.492,0.482,0.493,0.470,0.499,0.480,0.462,0.447,0.478,0.500,0.481,0.485,0.519,0.504,0.428,0.493,0.491,0.497,0.485,0.491,0.494,0.484,0.507,0.480,0.475,0.493,0.491,0.464,0.491,0.495,0.470,0.496,0.479,0.487,0.469,0.489,0.500,0.466,0.515,0.498,0.490,0.484,0.486,0.457,0.480,0.465,0.494,0.504,0.511,0.478,0.487,0.484,0.470,0.477,0.490,0.500,0.492,0.435,0.447,0.465,0.484,0.457,0.495,0.489,0.477,0.492,0.479,0.491,0.460,0.499,0.487,0.461,0.481,0.487,0.453,0.468,0.479,0.482,0.488,0.461,0.484,0.486,0.479,0.479,0.487,0.471,0.503,0.482,0.463,0.427,0.482,0.445,0.499,0.481,0.471,0.490,0.494,0.471,0.504,0.510,0.488,0.512,0.484,0.476,0.433,0.436,0.489,0.470,0.482,0.481,0.457,0.426},{0.469,0.513,0.477,0.494,0.474,0.484,0.487,0.487,0.477,0.482,0.478,0.478,0.493,0.477,0.498,0.474,0.498,0.464,0.494,0.459,0.488,0.485,0.486,0.484,0.476,0.485,0.492,0.493,0.484,0.460,0.503,0.494,0.486,0.470,0.476,0.498,0.491,0.483,0.479,0.458,0.484,0.458,0.466,0.466,0.460,0.485,0.504,0.476,0.488,0.512,0.478,0.483,0.475,0.477,0.454,0.509,0.480,0.458,0.478,0.470,0.491,0.487,0.467,0.466,0.494,0.483,0.489,0.488,0.478,0.447,0.496,0.482,0.476,0.465,0.488,0.447,0.495,0.479,0.490,0.469,0.470,0.474,0.480,0.501,0.501,0.499,0.481,0.476,0.466,0.486,0.486,0.483,0.471,0.493,0.471,0.478,0.461,0.473,0.481,0.478,0.510,0.425,0.492,0.491,0.487,0.495,0.449,0.469,0.485,0.443,0.473,0.485,0.466,0.488,0.484,0.491,0.469,0.480,0.478,0.432,0.470,0.483,0.425,0.455,0.468,0.484,0.487,0.475,0.479,0.479,0.479,0.467,0.465,0.443,0.483,0.459,0.470,0.453,0.463,0.424,0.492,0.484,0.481,0.482,0.496,0.497,0.491,0.496,0.497,0.478,0.505,0.475,0.408,0.387,0.486,0.437,0.489,0.501,0.407,0.461},{0.471,0.469,0.479,0.462,0.446,0.484,0.494,0.478,0.487,0.452,0.476,0.483,0.479,0.443,0.474,0.480,0.484,0.451,0.486,0.442,0.481,0.457,0.472,0.474,0.480,0.498,0.483,0.469,0.479,0.483,0.478,0.481,0.487,0.448,0.445,0.475,0.464,0.496,0.476,0.477,0.475,0.447,0.470,0.477,0.469,0.470,0.500,0.482,0.482,0.472,0.476,0.459,0.477,0.474,0.442,0.480,0.475,0.474,0.479,0.456,0.471,0.480,0.468,0.466,0.462,0.482,0.487,0.478,0.487,0.483,0.490,0.483,0.467,0.473,0.490,0.462,0.459,0.457,0.492,0.478,0.475,0.489,0.472,0.501,0.494,0.486,0.486,0.471,0.472,0.466,0.457,0.457,0.477,0.453,0.465,0.475,0.449,0.462,0.483,0.473,0.488,0.458,0.469,0.475,0.452,0.483,0.449,0.452,0.479,0.429,0.471,0.485,0.470,0.493,0.492,0.470,0.478,0.471,0.475,0.448,0.475,0.482,0.456,0.449,0.463,0.463,0.473,0.474,0.469,0.479,0.467,0.473,0.467,0.457,0.486,0.481,0.469,0.440,0.475,0.419,0.497,0.484,0.455,0.467,0.486,0.415,0.488,0.486,0.462,0.471,0.465,0.453,0.421,0.465,0.482,0.432,0.474,0.488,0.437,0.409},{0.502,0.506,0.504,0.508,0.503,0.509,0.508,0.510,0.510,0.500,0.503,0.506,0.497,0.477,0.511,0.500,0.503,0.506,0.511,0.487,0.504,0.505,0.502,0.502,0.504,0.496,0.496,0.512,0.503,0.497,0.487,0.509,0.506,0.492,0.496,0.508,0.505,0.504,0.498,0.497,0.493,0.474,0.487,0.500,0.485,0.494,0.507,0.505,0.508,0.503,0.507,0.501,0.504,0.508,0.471,0.501,0.485,0.485,0.500,0.491,0.497,0.504,0.487,0.507,0.507,0.509,0.505,0.508,0.502,0.501,0.511,0.498,0.495,0.503,0.502,0.484,0.506,0.501,0.499,0.502,0.506,0.504,0.495,0.507,0.505,0.502,0.507,0.500,0.497,0.505,0.506,0.495,0.498,0.477,0.503,0.504,0.504,0.499,0.511,0.499,0.488,0.494,0.504,0.500,0.500,0.497,0.483,0.490,0.505,0.452,0.502,0.495,0.489,0.506,0.509,0.505,0.485,0.503,0.501,0.495,0.499,0.497,0.474,0.478,0.500,0.498,0.496,0.495,0.504,0.487,0.465,0.467,0.501,0.473,0.506,0.495,0.494,0.463,0.499,0.444,0.509,0.503,0.489,0.500,0.501,0.479,0.515,0.508,0.493,0.509,0.506,0.505,0.443,0.486,0.502,0.470,0.502,0.504,0.480,0.452},{0.485,0.515,0.494,0.468,0.501,0.491,0.484,0.502,0.499,0.493,0.494,0.494,0.490,0.490,0.499,0.486,0.486,0.489,0.495,0.488,0.500,0.487,0.484,0.494,0.473,0.477,0.497,0.486,0.503,0.478,0.481,0.490,0.455,0.468,0.496,0.487,0.511,0.483,0.493,0.462,0.497,0.481,0.462,0.493,0.471,0.487,0.492,0.489,0.508,0.475,0.494,0.491,0.488,0.482,0.446,0.490,0.489,0.485,0.506,0.508,0.462,0.499,0.478,0.480,0.506,0.494,0.507,0.482,0.493,0.488,0.501,0.507,0.503,0.490,0.489,0.448,0.481,0.477,0.493,0.489,0.497,0.476,0.477,0.496,0.484,0.499,0.475,0.474,0.465,0.493,0.490,0.484,0.484,0.471,0.473,0.485,0.485,0.496,0.486,0.498,0.494,0.510,0.499,0.493,0.491,0.496,0.442,0.469,0.503,0.501,0.483,0.487,0.453,0.493,0.473,0.467,0.496,0.493,0.487,0.471,0.464,0.491,0.466,0.474,0.481,0.486,0.497,0.480,0.474,0.471,0.443,0.457,0.473,0.488,0.488,0.502,0.479,0.422,0.499,0.471,0.496,0.446,0.467,0.488,0.491,0.484,0.479,0.487,0.493,0.486,0.488,0.495,0.426,0.477,0.498,0.460,0.501,0.505,0.465,0.463},{0.506,0.509,0.509,0.504,0.514,0.509,0.507,0.517,0.505,0.493,0.510,0.516,0.501,0.493,0.513,0.505,0.512,0.509,0.505,0.514,0.502,0.508,0.511,0.504,0.493,0.526,0.508,0.520,0.503,0.499,0.496,0.511,0.511,0.510,0.475,0.509,0.515,0.507,0.503,0.508,0.511,0.464,0.515,0.511,0.494,0.503,0.504,0.504,0.514,0.501,0.512,0.522,0.511,0.505,0.498,0.461,0.500,0.488,0.496,0.496,0.506,0.506,0.494,0.511,0.515,0.509,0.509,0.512,0.511,0.502,0.509,0.511,0.503,0.509,0.506,0.478,0.502,0.504,0.507,0.513,0.505,0.516,0.500,0.509,0.498,0.510,0.507,0.506,0.514,0.510,0.519,0.487,0.504,0.517,0.502,0.506,0.511,0.508,0.506,0.508,0.485,0.489,0.506,0.511,0.507,0.503,0.481,0.495,0.505,0.472,0.504,0.491,0.464,0.514,0.507,0.505,0.499,0.511,0.493,0.488,0.495,0.506,0.479,0.485,0.494,0.496,0.508,0.503,0.498,0.503,0.483,0.486,0.506,0.488,0.505,0.505,0.511,0.434,0.507,0.468,0.512,0.486,0.465,0.504,0.507,0.491,0.512,0.505,0.496,0.513,0.519,0.504,0.447,0.473,0.508,0.478,0.510,0.503,0.480,0.456},{0.505,0.500,0.511,0.506,0.509,0.506,0.494,0.488,0.499,0.473,0.499,0.499,0.492,0.472,0.498,0.466,0.498,0.505,0.504,0.485,0.511,0.492,0.496,0.489,0.502,0.497,0.486,0.513,0.500,0.483,0.492,0.506,0.497,0.487,0.508,0.504,0.500,0.483,0.491,0.507,0.484,0.468,0.490,0.496,0.484,0.492,0.502,0.499,0.497,0.488,0.496,0.493,0.505,0.507,0.459,0.478,0.518,0.483,0.504,0.489,0.497,0.491,0.463,0.512,0.504,0.509,0.503,0.510,0.498,0.511,0.518,0.493,0.492,0.492,0.500,0.494,0.500,0.510,0.497,0.498,0.494,0.495,0.487,0.493,0.495,0.496,0.503,0.496,0.482,0.492,0.497,0.487,0.495,0.467,0.500,0.500,0.499,0.496,0.503,0.499,0.481,0.479,0.502,0.502,0.492,0.483,0.494,0.481,0.491,0.443,0.508,0.492,0.472,0.511,0.508,0.509,0.494,0.510,0.493,0.470,0.503,0.504,0.466,0.470,0.492,0.490,0.484,0.494,0.505,0.482,0.459,0.481,0.495,0.502,0.505,0.497,0.494,0.453,0.507,0.457,0.498,0.466,0.481,0.504,0.498,0.482,0.498,0.486,0.478,0.490,0.505,0.507,0.412,0.469,0.502,0.455,0.506,0.491,0.462,0.444},{0.496,0.470,0.489,0.487,0.493,0.503,0.499,0.509,0.486,0.494,0.486,0.491,0.503,0.451,0.481,0.505,0.494,0.502,0.498,0.492,0.486,0.483,0.487,0.481,0.506,0.490,0.498,0.464,0.491,0.497,0.498,0.500,0.484,0.461,0.480,0.501,0.482,0.497,0.482,0.497,0.486,0.463,0.456,0.489,0.458,0.488,0.493,0.493,0.505,0.495,0.497,0.497,0.499,0.475,0.463,0.500,0.452,0.501,0.492,0.480,0.501,0.488,0.476,0.506,0.515,0.485,0.492,0.505,0.502,0.492,0.492,0.474,0.499,0.510,0.486,0.461,0.494,0.497,0.488,0.486,0.484,0.495,0.481,0.472,0.498,0.480,0.480,0.488,0.477,0.475,0.498,0.483,0.486,0.492,0.505,0.479,0.486,0.495,0.489,0.483,0.482,0.456,0.482,0.507,0.497,0.469,0.480,0.499,0.503,0.457,0.485,0.490,0.475,0.504,0.499,0.494,0.481,0.492,0.493,0.464,0.465,0.476,0.451,0.467,0.485,0.490,0.490,0.498,0.496,0.463,0.470,0.469,0.494,0.479,0.511,0.494,0.491,0.446,0.499,0.476,0.493,0.457,0.475,0.492,0.497,0.484,0.495,0.508,0.498,0.482,0.488,0.496,0.393,0.489,0.496,0.451,0.499,0.484,0.452,0.424},{0.475,0.474,0.474,0.464,0.491,0.458,0.493,0.479,0.464,0.447,0.478,0.458,0.492,0.425,0.453,0.475,0.484,0.479,0.478,0.487,0.479,0.483,0.482,0.462,0.485,0.476,0.434,0.495,0.453,0.442,0.469,0.470,0.490,0.452,0.444,0.461,0.487,0.468,0.455,0.453,0.489,0.432,0.456,0.475,0.467,0.464,0.463,0.468,0.452,0.489,0.480,0.474,0.450,0.478,0.468,0.460,0.368,0.449,0.486,0.426,0.474,0.474,0.466,0.465,0.482,0.483,0.472,0.476,0.486,0.464,0.476,0.456,0.487,0.477,0.482,0.393,0.475,0.479,0.479,0.477,0.484,0.470,0.464,0.474,0.467,0.472,0.439,0.469,0.437,0.468,0.471,0.458,0.456,0.437,0.480,0.462,0.468,0.483,0.486,0.470,0.493,0.412,0.469,0.471,0.469,0.476,0.442,0.464,0.475,0.436,0.484,0.454,0.445,0.484,0.482,0.473,0.467,0.476,0.465,0.458,0.469,0.467,0.476,0.474,0.466,0.493,0.478,0.480,0.489,0.427,0.453,0.440,0.463,0.422,0.434,0.453,0.446,0.468,0.481,0.464,0.479,0.494,0.460,0.465,0.481,0.462,0.477,0.496,0.448,0.475,0.466,0.477,0.418,0.467,0.460,0.388,0.457,0.479,0.412,0.442},{0.509,0.508,0.506,0.508,0.505,0.509,0.518,0.528,0.508,0.504,0.502,0.508,0.512,0.489,0.502,0.500,0.509,0.511,0.506,0.477,0.514,0.495,0.499,0.504,0.513,0.508,0.507,0.506,0.505,0.494,0.505,0.511,0.512,0.517,0.504,0.512,0.506,0.506,0.500,0.503,0.510,0.464,0.486,0.503,0.494,0.502,0.503,0.511,0.508,0.509,0.523,0.516,0.505,0.501,0.475,0.475,0.484,0.487,0.508,0.499,0.506,0.503,0.501,0.507,0.514,0.507,0.511,0.510,0.503,0.507,0.524,0.493,0.498,0.496,0.497,0.475,0.503,0.501,0.499,0.508,0.500,0.502,0.504,0.517,0.508,0.497,0.510,0.502,0.513,0.503,0.508,0.506,0.497,0.489,0.502,0.514,0.513,0.502,0.508,0.502,0.501,0.484,0.509,0.501,0.512,0.511,0.508,0.507,0.514,0.475,0.506,0.503,0.484,0.510,0.509,0.513,0.497,0.505,0.509,0.490,0.505,0.501,0.461,0.467,0.496,0.495,0.499,0.500,0.509,0.482,0.463,0.475,0.499,0.499,0.507,0.507,0.499,0.481,0.505,0.463,0.509,0.492,0.489,0.505,0.513,0.498,0.515,0.507,0.497,0.506,0.514,0.509,0.459,0.471,0.511,0.473,0.511,0.514,0.490,0.448},{0.440,0.453,0.457,0.467,0.460,0.465,0.448,0.455,0.440,0.458,0.429,0.465,0.468,0.429,0.461,0.446,0.467,0.456,0.445,0.440,0.437,0.448,0.445,0.453,0.429,0.454,0.456,0.451,0.468,0.457,0.457,0.435,0.444,0.489,0.440,0.459,0.465,0.472,0.446,0.410,0.457,0.454,0.447,0.467,0.427,0.440,0.445,0.453,0.478,0.448,0.444,0.438,0.464,0.453,0.412,0.464,0.419,0.445,0.450,0.444,0.454,0.460,0.462,0.440,0.463,0.467,0.468,0.479,0.463,0.476,0.460,0.446,0.427,0.458,0.437,0.455,0.458,0.484,0.428,0.479,0.451,0.456,0.456,0.455,0.456,0.421,0.445,0.467,0.474,0.461,0.456,0.426,0.455,0.447,0.460,0.448,0.435,0.454,0.467,0.441,0.407,0.434,0.460,0.454,0.458,0.447,0.436,0.439,0.476,0.428,0.451,0.475,0.414,0.458,0.465,0.447,0.439,0.451,0.454,0.436,0.469,0.431,0.425,0.414,0.457,0.448,0.467,0.452,0.470,0.445,0.424,0.419,0.444,0.471,0.468,0.457,0.476,0.464,0.463,0.452,0.481,0.447,0.418,0.461,0.470,0.433,0.467,0.455,0.446,0.487,0.452,0.461,0.386,0.426,0.454,0.408,0.469,0.440,0.434,0.411},{0.498,0.507,0.502,0.503,0.499,0.507,0.505,0.515,0.502,0.493,0.502,0.511,0.508,0.465,0.512,0.487,0.501,0.511,0.509,0.491,0.513,0.504,0.508,0.503,0.505,0.497,0.493,0.491,0.511,0.507,0.499,0.511,0.510,0.500,0.495,0.512,0.517,0.502,0.506,0.486,0.495,0.480,0.480,0.507,0.485,0.502,0.491,0.512,0.516,0.513,0.513,0.525,0.510,0.506,0.462,0.484,0.467,0.490,0.503,0.499,0.497,0.505,0.488,0.509,0.506,0.508,0.507,0.513,0.506,0.508,0.505,0.508,0.503,0.498,0.510,0.476,0.504,0.504,0.505,0.507,0.502,0.516,0.499,0.521,0.509,0.504,0.496,0.516,0.502,0.499,0.511,0.495,0.497,0.503,0.506,0.503,0.507,0.500,0.503,0.498,0.492,0.497,0.512,0.502,0.503,0.505,0.494,0.490,0.510,0.464,0.506,0.510,0.484,0.508,0.512,0.512,0.503,0.506,0.507,0.485,0.508,0.507,0.489,0.462,0.500,0.510,0.512,0.502,0.503,0.499,0.492,0.497,0.509,0.496,0.512,0.498,0.493,0.479,0.509,0.481,0.504,0.503,0.494,0.505,0.504,0.473,0.515,0.514,0.504,0.511,0.514,0.513,0.448,0.498,0.510,0.480,0.508,0.500,0.474,0.436},{0.493,0.487,0.494,0.478,0.485,0.502,0.503,0.506,0.493,0.483,0.494,0.502,0.497,0.461,0.508,0.473,0.499,0.491,0.481,0.494,0.493,0.513,0.500,0.486,0.495,0.509,0.508,0.495,0.494,0.488,0.499,0.494,0.500,0.492,0.499,0.500,0.506,0.495,0.488,0.495,0.488,0.450,0.487,0.491,0.489,0.475,0.500,0.501,0.498,0.489,0.503,0.498,0.498,0.488,0.486,0.466,0.496,0.466,0.501,0.483,0.490,0.499,0.464,0.499,0.504,0.501,0.500,0.501,0.507,0.505,0.501,0.484,0.474,0.486,0.503,0.463,0.501,0.490,0.498,0.492,0.501,0.500,0.495,0.501,0.510,0.497,0.500,0.496,0.498,0.492,0.496,0.489,0.494,0.466,0.496,0.501,0.504,0.485,0.494,0.493,0.491,0.488,0.498,0.497,0.501,0.497,0.457,0.450,0.498,0.437,0.501,0.501,0.477,0.497,0.502,0.498,0.484,0.505,0.497,0.491,0.500,0.493,0.477,0.471,0.488,0.492,0.496,0.491,0.494,0.481,0.484,0.484,0.503,0.446,0.486,0.466,0.457,0.494,0.492,0.447,0.503,0.493,0.454,0.491,0.479,0.443,0.501,0.503,0.489,0.488,0.495,0.494,0.439,0.503,0.503,0.466,0.490,0.507,0.496,0.412},{0.472,0.488,0.485,0.486,0.502,0.478,0.478,0.497,0.481,0.479,0.480,0.490,0.485,0.467,0.497,0.472,0.472,0.492,0.504,0.475,0.482,0.477,0.493,0.483,0.502,0.508,0.471,0.504,0.477,0.455,0.471,0.480,0.487,0.492,0.487,0.494,0.474,0.483,0.488,0.472,0.464,0.455,0.473,0.483,0.456,0.501,0.498,0.471,0.482,0.504,0.505,0.503,0.489,0.486,0.435,0.500,0.477,0.470,0.484,0.455,0.488,0.480,0.448,0.490,0.490,0.486,0.480,0.501,0.480,0.481,0.503,0.482,0.454,0.482,0.497,0.441,0.492,0.482,0.490,0.495,0.489,0.472,0.487,0.484,0.478,0.490,0.492,0.504,0.484,0.486,0.480,0.489,0.478,0.473,0.462,0.475,0.464,0.498,0.498,0.470,0.482,0.474,0.492,0.488,0.474,0.477,0.493,0.476,0.476,0.453,0.500,0.472,0.487,0.499,0.498,0.487,0.493,0.482,0.484,0.474,0.493,0.477,0.454,0.476,0.485,0.488,0.476,0.477,0.458,0.471,0.481,0.455,0.489,0.467,0.465,0.481,0.475,0.460,0.489,0.418,0.494,0.454,0.482,0.493,0.463,0.431,0.484,0.466,0.476,0.484,0.484,0.497,0.452,0.416,0.487,0.425,0.477,0.485,0.463,0.409},{0.505,0.501,0.503,0.494,0.504,0.506,0.505,0.508,0.505,0.496,0.502,0.509,0.499,0.469,0.506,0.497,0.501,0.504,0.505,0.493,0.498,0.486,0.502,0.501,0.502,0.506,0.498,0.499,0.506,0.494,0.497,0.507,0.503,0.505,0.511,0.514,0.509,0.499,0.500,0.489,0.495,0.474,0.492,0.501,0.485,0.498,0.500,0.507,0.505,0.507,0.509,0.509,0.510,0.500,0.469,0.483,0.466,0.497,0.508,0.493,0.504,0.505,0.492,0.513,0.509,0.508,0.510,0.508,0.507,0.497,0.512,0.504,0.497,0.496,0.499,0.477,0.502,0.500,0.504,0.509,0.502,0.504,0.491,0.506,0.500,0.501,0.511,0.504,0.498,0.502,0.502,0.492,0.497,0.483,0.504,0.505,0.508,0.502,0.507,0.497,0.482,0.486,0.504,0.506,0.502,0.498,0.480,0.477,0.504,0.468,0.504,0.501,0.477,0.505,0.505,0.505,0.487,0.507,0.501,0.493,0.499,0.502,0.484,0.475,0.501,0.497,0.503,0.498,0.506,0.490,0.482,0.467,0.500,0.488,0.504,0.504,0.492,0.465,0.505,0.461,0.505,0.491,0.493,0.502,0.503,0.476,0.507,0.507,0.494,0.497,0.507,0.504,0.438,0.480,0.503,0.477,0.502,0.500,0.468,0.438},{0.499,0.502,0.496,0.499,0.509,0.508,0.505,0.517,0.502,0.472,0.498,0.507,0.508,0.492,0.498,0.515,0.508,0.507,0.508,0.490,0.503,0.503,0.501,0.507,0.509,0.501,0.497,0.481,0.508,0.502,0.505,0.509,0.503,0.495,0.475,0.510,0.514,0.505,0.496,0.486,0.490,0.489,0.493,0.504,0.487,0.483,0.503,0.507,0.502,0.504,0.515,0.505,0.509,0.512,0.456,0.489,0.467,0.491,0.501,0.490,0.503,0.500,0.471,0.510,0.512,0.509,0.514,0.509,0.499,0.494,0.504,0.495,0.505,0.498,0.499,0.494,0.505,0.503,0.501,0.510,0.506,0.508,0.494,0.510,0.503,0.503,0.510,0.505,0.480,0.503,0.509,0.500,0.499,0.513,0.503,0.508,0.505,0.497,0.506,0.497,0.486,0.500,0.502,0.500,0.499,0.496,0.489,0.503,0.502,0.449,0.503,0.502,0.483,0.501,0.506,0.507,0.494,0.502,0.501,0.472,0.498,0.506,0.491,0.470,0.500,0.493,0.495,0.501,0.496,0.494,0.496,0.486,0.501,0.491,0.507,0.498,0.497,0.481,0.513,0.470,0.504,0.479,0.463,0.503,0.501,0.479,0.508,0.502,0.495,0.501,0.505,0.509,0.466,0.487,0.498,0.485,0.501,0.488,0.474,0.434},{0.468,0.463,0.469,0.465,0.474,0.481,0.482,0.495,0.462,0.509,0.489,0.502,0.479,0.468,0.476,0.467,0.479,0.480,0.484,0.436,0.474,0.465,0.486,0.476,0.471,0.490,0.468,0.468,0.490,0.472,0.471,0.492,0.497,0.490,0.468,0.514,0.475,0.485,0.482,0.485,0.483,0.417,0.475,0.473,0.492,0.467,0.462,0.478,0.476,0.480,0.491,0.501,0.476,0.478,0.470,0.431,0.443,0.503,0.476,0.446,0.456,0.465,0.458,0.477,0.499,0.469,0.514,0.492,0.500,0.493,0.483,0.473,0.479,0.523,0.488,0.448,0.480,0.496,0.481,0.481,0.479,0.499,0.498,0.481,0.485,0.484,0.484,0.482,0.463,0.470,0.475,0.474,0.468,0.460,0.493,0.487,0.493,0.463,0.495,0.479,0.415,0.517,0.462,0.436,0.495,0.486,0.451,0.463,0.504,0.437,0.480,0.494,0.451,0.486,0.463,0.473,0.481,0.505,0.489,0.470,0.467,0.485,0.502,0.450,0.465,0.474,0.516,0.509,0.499,0.471,0.497,0.415,0.479,0.484,0.491,0.482,0.484,0.462,0.498,0.433,0.473,0.443,0.431,0.476,0.479,0.479,0.498,0.483,0.472,0.475,0.478,0.480,0.410,0.455,0.486,0.475,0.491,0.451,0.444,0.448},{0.514,0.509,0.509,0.518,0.520,0.509,0.516,0.509,0.509,0.483,0.502,0.506,0.504,0.470,0.498,0.501,0.510,0.517,0.513,0.484,0.511,0.500,0.506,0.509,0.515,0.499,0.498,0.496,0.494,0.502,0.473,0.515,0.517,0.505,0.498,0.510,0.521,0.511,0.507,0.499,0.500,0.468,0.480,0.505,0.460,0.499,0.505,0.515,0.517,0.518,0.510,0.517,0.518,0.523,0.482,0.491,0.461,0.500,0.507,0.504,0.499,0.504,0.500,0.514,0.513,0.511,0.511,0.514,0.509,0.501,0.516,0.500,0.505,0.498,0.514,0.478,0.507,0.507,0.498,0.512,0.514,0.511,0.498,0.520,0.502,0.504,0.499,0.515,0.501,0.511,0.518,0.498,0.505,0.480,0.508,0.516,0.510,0.509,0.512,0.504,0.500,0.491,0.505,0.511,0.512,0.494,0.498,0.503,0.506,0.475,0.507,0.501,0.496,0.516,0.503,0.507,0.490,0.504,0.517,0.489,0.508,0.492,0.484,0.477,0.506,0.504,0.506,0.502,0.509,0.504,0.491,0.488,0.515,0.479,0.512,0.498,0.495,0.477,0.515,0.467,0.515,0.501,0.484,0.507,0.508,0.498,0.507,0.514,0.488,0.503,0.514,0.514,0.447,0.491,0.516,0.474,0.512,0.511,0.504,0.474},{0.505,0.509,0.500,0.509,0.503,0.523,0.516,0.513,0.515,0.503,0.512,0.502,0.510,0.481,0.502,0.480,0.510,0.521,0.508,0.498,0.503,0.505,0.504,0.506,0.514,0.516,0.500,0.520,0.496,0.497,0.492,0.517,0.516,0.513,0.510,0.533,0.507,0.497,0.502,0.486,0.486,0.461,0.462,0.515,0.512,0.508,0.502,0.509,0.503,0.511,0.506,0.497,0.497,0.509,0.471,0.511,0.487,0.498,0.513,0.481,0.505,0.514,0.498,0.522,0.514,0.516,0.522,0.521,0.512,0.508,0.530,0.498,0.510,0.514,0.509,0.466,0.507,0.484,0.511,0.526,0.501,0.507,0.494,0.505,0.516,0.508,0.514,0.501,0.510,0.526,0.504,0.508,0.506,0.490,0.501,0.510,0.507,0.496,0.515,0.513,0.503,0.515,0.522,0.497,0.497,0.503,0.480,0.489,0.515,0.452,0.499,0.511,0.488,0.513,0.512,0.512,0.495,0.508,0.502,0.491,0.517,0.488,0.495,0.480,0.494,0.503,0.536,0.504,0.507,0.510,0.496,0.486,0.508,0.487,0.505,0.486,0.508,0.496,0.507,0.455,0.514,0.503,0.466,0.507,0.502,0.483,0.514,0.506,0.501,0.511,0.509,0.510,0.457,0.492,0.518,0.482,0.506,0.493,0.465,0.448},{0.499,0.488,0.493,0.478,0.483,0.499,0.489,0.513,0.497,0.481,0.495,0.500,0.492,0.458,0.493,0.507,0.486,0.509,0.490,0.468,0.505,0.489,0.481,0.482,0.533,0.496,0.489,0.499,0.490,0.481,0.455,0.489,0.500,0.487,0.491,0.489,0.503,0.496,0.485,0.464,0.477,0.484,0.470,0.491,0.482,0.475,0.497,0.491,0.494,0.507,0.496,0.494,0.485,0.492,0.485,0.452,0.443,0.478,0.501,0.447,0.502,0.482,0.481,0.500,0.485,0.498,0.495,0.508,0.494,0.503,0.491,0.480,0.498,0.478,0.485,0.474,0.484,0.471,0.502,0.486,0.496,0.483,0.499,0.490,0.485,0.497,0.493,0.496,0.508,0.497,0.496,0.487,0.484,0.464,0.493,0.498,0.503,0.487,0.495,0.485,0.493,0.492,0.496,0.491,0.506,0.478,0.463,0.463,0.501,0.438,0.487,0.490,0.469,0.497,0.491,0.493,0.484,0.487,0.493,0.441,0.494,0.496,0.483,0.460,0.477,0.481,0.497,0.484,0.485,0.488,0.497,0.462,0.493,0.493,0.496,0.478,0.498,0.448,0.497,0.446,0.504,0.489,0.476,0.494,0.495,0.472,0.488,0.501,0.489,0.502,0.493,0.496,0.457,0.465,0.491,0.481,0.490,0.484,0.463,0.440},{0.504,0.501,0.508,0.504,0.505,0.514,0.507,0.511,0.505,0.488,0.507,0.511,0.511,0.464,0.511,0.498,0.513,0.508,0.505,0.491,0.501,0.497,0.505,0.497,0.508,0.514,0.499,0.498,0.513,0.497,0.496,0.514,0.502,0.502,0.490,0.521,0.506,0.501,0.496,0.499,0.494,0.484,0.456,0.506,0.499,0.500,0.501,0.502,0.508,0.506,0.506,0.506,0.511,0.501,0.466,0.459,0.477,0.496,0.507,0.490,0.509,0.490,0.496,0.516,0.506,0.510,0.513,0.512,0.506,0.504,0.517,0.499,0.501,0.501,0.507,0.484,0.500,0.491,0.508,0.507,0.504,0.506,0.495,0.507,0.508,0.508,0.504,0.507,0.507,0.512,0.505,0.500,0.504,0.484,0.500,0.507,0.497,0.496,0.507,0.498,0.480,0.493,0.507,0.505,0.499,0.494,0.482,0.480,0.505,0.468,0.501,0.502,0.480,0.509,0.498,0.509,0.496,0.499,0.504,0.483,0.509,0.496,0.485,0.466,0.493,0.502,0.504,0.505,0.501,0.512,0.478,0.471,0.509,0.486,0.513,0.490,0.482,0.475,0.506,0.487,0.511,0.488,0.484,0.497,0.501,0.475,0.503,0.511,0.502,0.502,0.506,0.507,0.471,0.453,0.506,0.479,0.503,0.500,0.479,0.448},{0.508,0.508,0.512,0.500,0.509,0.510,0.520,0.501,0.512,0.496,0.512,0.517,0.514,0.475,0.517,0.495,0.506,0.514,0.513,0.503,0.517,0.505,0.504,0.503,0.518,0.513,0.512,0.504,0.517,0.498,0.495,0.518,0.509,0.510,0.494,0.508,0.515,0.511,0.505,0.493,0.505,0.481,0.499,0.513,0.487,0.502,0.504,0.513,0.514,0.507,0.513,0.505,0.516,0.512,0.465,0.509,0.480,0.501,0.511,0.496,0.507,0.507,0.475,0.515,0.515,0.513,0.514,0.512,0.509,0.512,0.506,0.499,0.511,0.504,0.511,0.494,0.508,0.509,0.515,0.508,0.505,0.503,0.509,0.508,0.510,0.503,0.508,0.508,0.517,0.508,0.513,0.504,0.509,0.496,0.508,0.511,0.510,0.504,0.514,0.510,0.487,0.491,0.513,0.511,0.513,0.500,0.488,0.495,0.511,0.477,0.510,0.505,0.492,0.507,0.507,0.513,0.503,0.507,0.504,0.491,0.506,0.510,0.487,0.472,0.500,0.502,0.496,0.510,0.515,0.484,0.505,0.465,0.506,0.488,0.519,0.505,0.488,0.466,0.514,0.452,0.514,0.495,0.484,0.507,0.505,0.478,0.514,0.509,0.493,0.506,0.509,0.514,0.447,0.484,0.504,0.482,0.513,0.508,0.496,0.436},{0.506,0.504,0.508,0.504,0.509,0.510,0.508,0.512,0.505,0.495,0.509,0.509,0.505,0.450,0.505,0.500,0.509,0.508,0.507,0.506,0.507,0.486,0.507,0.508,0.512,0.511,0.503,0.504,0.504,0.500,0.494,0.504,0.514,0.490,0.479,0.502,0.509,0.502,0.504,0.496,0.506,0.481,0.483,0.509,0.488,0.488,0.497,0.504,0.508,0.507,0.512,0.505,0.510,0.505,0.468,0.513,0.484,0.497,0.504,0.501,0.505,0.501,0.495,0.514,0.511,0.508,0.508,0.511,0.505,0.499,0.504,0.501,0.505,0.499,0.501,0.486,0.503,0.502,0.499,0.504,0.500,0.507,0.499,0.509,0.503,0.506,0.512,0.511,0.504,0.506,0.509,0.494,0.506,0.487,0.506,0.502,0.507,0.504,0.504,0.502,0.483,0.484,0.511,0.508,0.504,0.506,0.487,0.482,0.499,0.467,0.505,0.505,0.473,0.505,0.508,0.507,0.492,0.502,0.495,0.487,0.498,0.500,0.466,0.481,0.498,0.503,0.504,0.500,0.503,0.476,0.475,0.453,0.505,0.495,0.504,0.507,0.496,0.477,0.509,0.461,0.513,0.494,0.497,0.504,0.509,0.480,0.514,0.510,0.496,0.507,0.514,0.504,0.453,0.480,0.504,0.483,0.501,0.500,0.482,0.456},{0.438,0.458,0.416,0.434,0.451,0.442,0.463,0.435,0.445,0.452,0.426,0.456,0.448,0.429,0.455,0.438,0.438,0.440,0.439,0.415,0.449,0.435,0.451,0.440,0.427,0.472,0.440,0.443,0.439,0.425,0.417,0.451,0.442,0.432,0.445,0.441,0.451,0.442,0.463,0.416,0.438,0.425,0.404,0.448,0.419,0.449,0.462,0.449,0.470,0.445,0.437,0.452,0.439,0.450,0.414,0.431,0.405,0.433,0.432,0.438,0.430,0.456,0.425,0.427,0.434,0.459,0.460,0.461,0.451,0.450,0.435,0.433,0.448,0.431,0.452,0.418,0.437,0.468,0.467,0.456,0.465,0.456,0.425,0.475,0.431,0.415,0.418,0.455,0.444,0.453,0.440,0.428,0.434,0.372,0.444,0.467,0.454,0.426,0.429,0.451,0.423,0.482,0.445,0.445,0.453,0.433,0.452,0.421,0.459,0.416,0.455,0.430,0.417,0.450,0.446,0.435,0.454,0.460,0.437,0.450,0.447,0.449,0.429,0.442,0.443,0.464,0.420,0.437,0.447,0.433,0.408,0.421,0.443,0.426,0.447,0.412,0.393,0.418,0.459,0.386,0.448,0.439,0.452,0.438,0.466,0.410,0.447,0.457,0.457,0.471,0.447,0.453,0.443,0.425,0.473,0.465,0.456,0.442,0.415,0.436},{0.474,0.470,0.475,0.479,0.466,0.494,0.492,0.495,0.482,0.454,0.483,0.489,0.493,0.445,0.494,0.466,0.475,0.475,0.487,0.478,0.486,0.451,0.487,0.480,0.470,0.468,0.456,0.465,0.478,0.479,0.460,0.484,0.482,0.481,0.471,0.485,0.481,0.472,0.479,0.466,0.486,0.444,0.462,0.477,0.463,0.451,0.489,0.488,0.480,0.489,0.485,0.474,0.491,0.486,0.430,0.508,0.459,0.436,0.473,0.488,0.487,0.466,0.480,0.491,0.475,0.478,0.478,0.477,0.472,0.456,0.517,0.464,0.469,0.483,0.487,0.462,0.490,0.511,0.479,0.481,0.484,0.484,0.482,0.496,0.482,0.485,0.483,0.472,0.475,0.469,0.473,0.484,0.482,0.472,0.478,0.487,0.473,0.491,0.492,0.478,0.422,0.484,0.487,0.479,0.475,0.489,0.455,0.449,0.471,0.427,0.482,0.485,0.460,0.466,0.496,0.477,0.473,0.485,0.490,0.457,0.499,0.464,0.454,0.473,0.471,0.499,0.481,0.468,0.475,0.436,0.387,0.465,0.486,0.477,0.473,0.469,0.489,0.467,0.471,0.426,0.498,0.503,0.416,0.480,0.487,0.455,0.491,0.492,0.465,0.453,0.484,0.480,0.425,0.477,0.489,0.465,0.481,0.496,0.483,0.428},{0.504,0.495,0.508,0.503,0.505,0.508,0.510,0.509,0.507,0.492,0.507,0.517,0.505,0.490,0.513,0.482,0.501,0.512,0.504,0.479,0.504,0.507,0.502,0.497,0.519,0.516,0.506,0.521,0.508,0.503,0.490,0.502,0.512,0.515,0.494,0.514,0.505,0.501,0.504,0.495,0.490,0.463,0.506,0.501,0.508,0.500,0.506,0.510,0.506,0.502,0.511,0.514,0.507,0.507,0.475,0.489,0.468,0.494,0.512,0.483,0.513,0.508,0.470,0.508,0.504,0.510,0.511,0.514,0.500,0.503,0.503,0.499,0.496,0.498,0.509,0.473,0.505,0.501,0.502,0.507,0.501,0.514,0.501,0.518,0.508,0.517,0.511,0.506,0.501,0.501,0.510,0.491,0.504,0.494,0.509,0.506,0.508,0.506,0.508,0.511,0.488,0.498,0.513,0.492,0.505,0.502,0.512,0.494,0.515,0.452,0.505,0.501,0.479,0.504,0.507,0.506,0.491,0.510,0.503,0.469,0.496,0.501,0.472,0.478,0.499,0.504,0.508,0.513,0.496,0.489,0.486,0.482,0.502,0.498,0.508,0.502,0.496,0.460,0.511,0.454,0.510,0.503,0.487,0.503,0.498,0.486,0.516,0.518,0.491,0.506,0.504,0.504,0.473,0.489,0.505,0.460,0.514,0.509,0.473,0.462},{0.472,0.478,0.469,0.467,0.458,0.463,0.482,0.484,0.490,0.441,0.445,0.483,0.486,0.438,0.490,0.504,0.478,0.474,0.482,0.475,0.489,0.462,0.487,0.482,0.484,0.485,0.464,0.456,0.475,0.461,0.463,0.476,0.479,0.478,0.429,0.478,0.483,0.468,0.466,0.442,0.471,0.489,0.443,0.485,0.452,0.452,0.483,0.471,0.478,0.482,0.482,0.470,0.474,0.487,0.461,0.484,0.472,0.454,0.478,0.464,0.467,0.478,0.498,0.496,0.476,0.477,0.470,0.481,0.479,0.467,0.506,0.457,0.468,0.460,0.468,0.420,0.462,0.456,0.491,0.458,0.478,0.478,0.482,0.481,0.486,0.469,0.473,0.481,0.474,0.465,0.466,0.479,0.472,0.450,0.462,0.469,0.476,0.471,0.481,0.478,0.430,0.467,0.481,0.460,0.464,0.478,0.442,0.447,0.476,0.426,0.491,0.473,0.432,0.473,0.470,0.479,0.449,0.476,0.467,0.461,0.479,0.456,0.468,0.434,0.446,0.484,0.471,0.463,0.478,0.470,0.437,0.432,0.470,0.460,0.478,0.455,0.451,0.388,0.473,0.408,0.480,0.466,0.425,0.477,0.485,0.475,0.474,0.482,0.481,0.479,0.482,0.483,0.465,0.465,0.460,0.469,0.469,0.449,0.423,0.453},{0.505,0.501,0.498,0.498,0.498,0.507,0.513,0.503,0.502,0.485,0.504,0.502,0.502,0.475,0.514,0.507,0.504,0.502,0.506,0.489,0.511,0.500,0.502,0.496,0.506,0.509,0.498,0.499,0.508,0.500,0.488,0.507,0.499,0.492,0.487,0.502,0.506,0.502,0.499,0.501,0.491,0.483,0.496,0.507,0.487,0.508,0.502,0.506,0.511,0.504,0.506,0.508,0.509,0.509,0.466,0.470,0.459,0.495,0.498,0.500,0.505,0.509,0.485,0.509,0.505,0.513,0.509,0.510,0.511,0.501,0.505,0.496,0.500,0.498,0.506,0.476,0.506,0.504,0.501,0.511,0.504,0.506,0.501,0.505,0.498,0.508,0.512,0.504,0.502,0.495,0.510,0.495,0.497,0.486,0.503,0.504,0.512,0.497,0.504,0.500,0.476,0.489,0.503,0.501,0.505,0.502,0.476,0.482,0.506,0.465,0.502,0.504,0.479,0.506,0.503,0.508,0.496,0.509,0.506,0.488,0.504,0.491,0.486,0.488,0.501,0.500,0.504,0.501,0.511,0.482,0.489,0.474,0.502,0.501,0.510,0.506,0.499,0.457,0.511,0.469,0.508,0.490,0.477,0.502,0.501,0.491,0.512,0.506,0.490,0.503,0.513,0.501,0.456,0.481,0.514,0.469,0.500,0.507,0.469,0.450},{0.508,0.500,0.501,0.487,0.497,0.502,0.506,0.504,0.503,0.495,0.507,0.508,0.494,0.492,0.513,0.499,0.504,0.500,0.510,0.491,0.500,0.502,0.506,0.504,0.504,0.509,0.506,0.512,0.508,0.501,0.491,0.511,0.503,0.491,0.500,0.517,0.504,0.498,0.497,0.505,0.500,0.472,0.479,0.501,0.489,0.507,0.506,0.507,0.510,0.506,0.515,0.503,0.505,0.505,0.440,0.479,0.494,0.510,0.501,0.493,0.501,0.501,0.472,0.505,0.503,0.506,0.511,0.512,0.505,0.501,0.490,0.491,0.500,0.491,0.498,0.470,0.504,0.510,0.500,0.502,0.508,0.497,0.498,0.506,0.498,0.503,0.498,0.502,0.511,0.499,0.505,0.494,0.502,0.502,0.504,0.504,0.497,0.496,0.503,0.500,0.494,0.468,0.498,0.495,0.505,0.496,0.480,0.484,0.502,0.468,0.505,0.490,0.479,0.506,0.512,0.505,0.488,0.496,0.496,0.465,0.501,0.499,0.477,0.468,0.498,0.492,0.500,0.505,0.503,0.481,0.501,0.488,0.504,0.505,0.503,0.491,0.484,0.479,0.514,0.440,0.500,0.507,0.485,0.500,0.488,0.451,0.511,0.493,0.484,0.500,0.508,0.500,0.442,0.496,0.509,0.449,0.507,0.500,0.486,0.440},{0.478,0.467,0.501,0.462,0.488,0.494,0.474,0.470,0.499,0.504,0.504,0.485,0.459,0.427,0.482,0.470,0.485,0.486,0.454,0.484,0.501,0.502,0.484,0.477,0.476,0.499,0.481,0.498,0.478,0.488,0.499,0.485,0.503,0.469,0.450,0.498,0.475,0.466,0.480,0.490,0.472,0.467,0.492,0.482,0.430,0.480,0.482,0.477,0.485,0.494,0.498,0.498,0.497,0.478,0.456,0.484,0.447,0.461,0.487,0.456,0.485,0.482,0.481,0.500,0.496,0.494,0.490,0.500,0.482,0.492,0.444,0.471,0.471,0.486,0.486,0.449,0.491,0.474,0.476,0.462,0.489,0.491,0.473,0.467,0.481,0.459,0.467,0.479,0.478,0.475,0.486,0.486,0.489,0.443,0.488,0.497,0.479,0.475,0.464,0.479,0.460,0.476,0.504,0.467,0.474,0.502,0.492,0.482,0.481,0.395,0.472,0.509,0.439,0.477,0.511,0.494,0.486,0.461,0.476,0.452,0.499,0.459,0.464,0.441,0.486,0.467,0.473,0.509,0.483,0.457,0.407,0.437,0.480,0.465,0.480,0.462,0.452,0.412,0.490,0.434,0.474,0.496,0.463,0.468,0.474,0.444,0.504,0.465,0.463,0.479,0.496,0.482,0.415,0.483,0.473,0.423,0.469,0.486,0.481,0.398},{0.436,0.459,0.456,0.440,0.429,0.433,0.470,0.430,0.463,0.444,0.466,0.459,0.438,0.432,0.446,0.447,0.450,0.461,0.465,0.414,0.444,0.460,0.457,0.440,0.456,0.430,0.453,0.458,0.450,0.426,0.418,0.454,0.456,0.445,0.441,0.441,0.462,0.442,0.442,0.471,0.432,0.441,0.434,0.468,0.432,0.448,0.427,0.447,0.451,0.457,0.447,0.494,0.453,0.452,0.342,0.429,0.414,0.442,0.448,0.445,0.438,0.452,0.432,0.458,0.444,0.453,0.464,0.468,0.446,0.442,0.474,0.442,0.446,0.458,0.459,0.392,0.448,0.445,0.435,0.438,0.455,0.459,0.449,0.446,0.457,0.453,0.434,0.426,0.444,0.468,0.434,0.439,0.439,0.443,0.468,0.440,0.435,0.427,0.438,0.449,0.432,0.412,0.429,0.449,0.444,0.458,0.467,0.426,0.448,0.423,0.436,0.457,0.402,0.480,0.447,0.467,0.425,0.438,0.440,0.396,0.461,0.470,0.410,0.429,0.429,0.439,0.437,0.476,0.455,0.426,0.461,0.409,0.452,0.463,0.456,0.444,0.424,0.442,0.448,0.411,0.436,0.412,0.409,0.438,0.434,0.448,0.474,0.448,0.440,0.448,0.436,0.456,0.436,0.428,0.462,0.453,0.450,0.440,0.398,0.443},};

//TODO think about card advantage
//TODO

// 0805 honkide 13th

using namespace std;

vector<vector<double> > mulMatrix(vector<vector<double> > a,vector<vector<double> > b)
{
    int r1 = a.size();
    int c1 = a[0].size();
    int r2 = b.size();
    int c2 = b[0].size();

    cerr << c1 << ":" << r1 << ":" << c2 << ":" << r2 << endl;

    // If column of first matrix in not equal to row of second matrix,
    // ask the user to enter the size of matrix again.
    while (c1!=r2)
    {
        cerr << "Error! column of first matrix not equal to row of second.";
        cin >> c1;
    }

    cerr << "1" << endl;

    vector<vector<double> > result;
    result.resize(r1);
    for(int i = 0; i < r1; i++){
        result[i].resize(c2);
    }

    cerr << "2" << endl;

    // Initializing elements of matrix mult to 0.
    for(int i = 0; i < r1; i++){
        for(int j = 0; j < c2; j++)
        {
            result[i][j]=0;
        }
    }

    cerr << "3" << endl;

    // Multiplying matrix a and b and storing in array mult.
    for(int i = 0; i < r1; i++){
        for(int j = 0; j < c2; j++){
            for(int k = 0; k < c1; k++)
            {
                //cerr << i << ":" << j << ":" << k << endl;
                /*cerr << result[j][i] << endl;
                cerr << a[k][i] << endl;
                cerr << b[j][k] << endl;*/
                result[i][j] += a[i][k] * b[k][j];
            }
        }
    }

    // Displaying the multiplication of two matrix.
    //cerr << "Output Matrix: " << endl;
    /*for(int i = 0; i < r1; i++)
    for(int j = 0; j < c2; j++)
    {
        //cerr << " " << result[i][j];
        if(j == c2-1)
            //cerr << endl;
    }*/
    return result;
}

std::vector<std::string> split(std::string str, char del) {
    int first = 0;
    int last = str.find_first_of(del);

    std::vector<std::string> result;

    while (first < str.size()) {
        std::string subStr(str, first, last - first);

        result.push_back(subStr);

        first = last + 1;
        last = str.find_first_of(del, first);

        if (last == std::string::npos) {
            last = str.size();
        }
    }

    return result;
}

class Card {
    int cardNumber;
    int instanceId;
    int location;
    int cardType;
    int cost;
    int attack;
    int defense;
    string abilities;
    int myHealthChange;
    int opponentHealthChange;
    int cardDraw;
    bool actionDone;
    int playScore;
    string command;
public:
    Card(int cardNumber, int instanceId, int location, int cardType, int cost, int attack, int defense, string abilities, int myHealthChange, int opponentHealthChange, int cardDraw, bool actionDone){
        this->cardNumber = cardNumber;
        this->instanceId = instanceId;
        this->location = location;
        this->cardType = cardType;
        this->cost = cost;
        this->attack = attack;
        this->defense = defense;
        this->abilities = abilities;
        this->myHealthChange = myHealthChange;
        this->opponentHealthChange = opponentHealthChange;
        this->cardDraw = cardDraw;
        this->actionDone = actionDone;
        this->playScore = 0;
    }

    Card* getCardCopy(){
        return new Card(this->cardNumber, this->instanceId, this->location, this->cardType, this->cost, this->attack, this->defense, this->abilities, this->myHealthChange, this->opponentHealthChange, this->cardDraw, this->actionDone);
    }

    int getDraw(){
        return cardDraw;
    }

    int getCost(){
        return cost;
    }

    int getID(){
        return instanceId;
    }

    int getAttack(){
        return attack;
    }

    int getDefense(){
        return defense;
    }

    string getAbilities(){
        return abilities;
    }

    bool isGuard(){
        return abilities.find("G") != std::string::npos;
    }

    bool isCharge(){
        return abilities.find("C") != std::string::npos;
    }

    bool isLethal(){
        return abilities.find("L") != std::string::npos;
    }

    bool isWard(){
        return abilities.find("W") != std::string::npos;
    }

    bool isDrain(){
        return abilities.find("D") != std::string::npos;
    }

    bool isBreakThrough(){
        return abilities.find("B") != std::string::npos;
    }

    bool getActionDone(){
        return actionDone;
    }

    void doAction(){
        this->actionDone = true;
    }

    int takeDamage(int damage){
        if(damage == 0){
            return 0;
        }
        if(isWard()){
            std::replace(abilities.begin(), abilities.end(), 'W', '-');
        }
        else{
            defense -= damage;
        }
    }

    // hyokati calculation
    int calcBasicValue(){
        if(defense <= 0){
            return 0;
        }
        int base = attack + defense;
        if(isWard()){
            base += attack;
        }
        if(isGuard()){
            base += 1;
        }
        if(isDrain()){
            //base += attack;
        }
        if(isBreakThrough()){
            if(attack >= 5){
                base += attack - 4;
            }
        }
        return base;
    }

    int getType(){
        return cardType;
    }

    bool operator<(const Card& another) const {
        return cost > another.cost;
    }

    void buff(Card* card){
        if(card->isGuard() && !isGuard()){
            abilities += 'G';
        }
        if(card->isLethal() && !isLethal()){
            abilities += 'L';
        }
        if(card->isWard() && !isWard()){
            abilities += 'W';
        }
        if(card->isDrain() && !isDrain()){
            abilities += 'D';
        }
        if(card->isBreakThrough() && !isBreakThrough()){
            abilities += 'B';
        }
        attack += card->getAttack();
        defense += card->getDefense();
    }

    void deBuff(Card* card){
        if(card->isGuard()){
            std::replace(abilities.begin(), abilities.end(), 'G', '-');
        }
        if(card->isLethal()){
            std::replace(abilities.begin(), abilities.end(), 'L', '-');
        }
        if(card->isWard()){
            std::replace(abilities.begin(), abilities.end(), 'W', '-');
        }
        if(card->isDrain()){
            std::replace(abilities.begin(), abilities.end(), 'D', '-');
        }
        if(card->isBreakThrough()){
            std::replace(abilities.begin(), abilities.end(), 'B', '-');
        }
        attack += card->getAttack();
        if(attack < 0){
            attack = 0;
        }
        takeDamage(-card->getDefense());
    }

    void setCommand(string command){
        this->command = command;
    }

    string getCommand(){
        return command;
    }

    int getCardNumber(){
        return cardNumber;
    }

    int getMyHealthChange(){
        return myHealthChange;
    }

    int getOpponentHealthChange(){
        return opponentHealthChange;
    }
};
bool cmp(Card *a, Card *b)
    {
        return (a->getCost() > b->getCost());
    }
class Player {
    int health;
    int mana;
    int deck;
    int rune;
public:
    Player(int health, int mana, int deck, int rune){
        this->health = health;
        this->mana = mana;
        this->deck = deck;
        this->rune = rune;
    }

    Player* getPlayerCopy(){
        return new Player (health, mana, deck, rune);
    }

    int getMana(){
        return mana;
    }

    int getDeck(){
        return deck;
    }

    int getHealth(){
        return health;
    }

    int takeDamage(int damage){
        health -= damage;
    }
};


int executeFight(Card* attacker, Card* target){
    attacker->doAction();
    if(attacker->isLethal() && attacker->getAttack() > 0){
        target->takeDamage(max(attacker->getAttack(), target->getDefense() + 1));
    }
    else{
        target->takeDamage(attacker->getAttack());
    }
    if(target->isLethal() && target->getAttack() > 0){
        attacker->takeDamage(max(target->getAttack(), attacker->getDefense() + 1));
    }
    else{
        attacker->takeDamage(target->getAttack());
    }
}


int getTradeScore(Card* me, Card* target){
    int initialScore = me->calcBasicValue() - target->calcBasicValue();
    Card* meCopy = me->getCardCopy();
    Card* targetCopy = target->getCardCopy();
    executeFight(meCopy, targetCopy);
    int afterScore = meCopy->calcBasicValue() - targetCopy->calcBasicValue();
    return afterScore - initialScore;
    /*int dealDamage = min(me->getAttack(), target->getDefense());
    if( target->isWard()){
        dealDamage = 1 + target->getAttack();
    }
    int takeDamage = min(target->getAttack(), me->getDefense());
    if( me->isWard()){
        takeDamage = 1;
    }
    int score = dealDamage - takeDamage;
    if(me->getAttack() >= target->getDefense() || (me->isLethal() && dealDamage > 0)){
        score += target->getDefense() + target->getAttack();
    }
    if(target->getAttack() >= me->getDefense() || (target->isLethal() && takeDamage > 0)){
        score -= me->getDefense() + me->getAttack();
    }
    return score;*/
}

int LEATHAL_DANGER_VALUE = 7;
bool isSente = false;
int totalPick = 0;

class TradeScore
{
  public:
    int enemyIndex;
    int myIndex;
    double score;

    TradeScore(int enemyIndex, int myIndex, double score)
    {
        this->enemyIndex = enemyIndex;
        this->myIndex = myIndex;
        this->score = score;
    }
};

double getBoardScore(vector<Card*> myBoardCard, vector<Card*> enemyBoardCard, Player* me, Player* enemy){
    // enemy lethal
    int lethalScore = 0;
    bool hasTaunt = false;
    for(Card* enemyCard: enemyBoardCard){
        if(enemyCard->isGuard()){
            hasTaunt = true;
            break;
        }
    }
    int totalAttack = 0;
    int totalAttackHealth = 0;
    int nextTotalAttack = 0;
    int lifeStealTotal = 0;
    int enemyAttackTotal = 0;
    //cerr << "myboard" << endl;
    for(Card* card: myBoardCard){
        cerr << card->getID();
        nextTotalAttack += card->getAttack();
        totalAttackHealth += card->getDefense();
        if(!card->getActionDone()){
            totalAttack += card->getAttack();
        }
    }

    //cerr << endl << "enemyboard" << endl;
    for(Card* card: enemyBoardCard){
        cerr << card->getID();
        enemyAttackTotal += card->getAttack();
        if(card -> isDrain()){
            lifeStealTotal += card->getAttack();
        }
    }

    if(totalAttackHealth - enemyAttackTotal > 0){
        nextTotalAttack = nextTotalAttack * (totalAttackHealth - enemyAttackTotal) / totalAttackHealth;
    }
    else{
        nextTotalAttack = 0;
    }

    //cerr << endl;
    if((!hasTaunt && totalAttack >= enemy->getHealth()) || enemy->getHealth() <= 0){
        lethalScore = 10000;
    }
    else if(!hasTaunt && totalAttack + nextTotalAttack + LEATHAL_DANGER_VALUE >= enemy->getHealth() + lifeStealTotal){
        lethalScore = totalAttack + nextTotalAttack + LEATHAL_DANGER_VALUE - enemy->getHealth() - lifeStealTotal;
    }

    // next turn leathal score


    // min max algorizm
    // enemy card value is max(enemy card, max tradable my card)
    // my card value is max(my card, min tradable enemy card)
    int myCardValueTotal = 0;
    int myDefenceTotal = 0;
    for(Card* myCard: myBoardCard){
        int minTradeScore = 999;

        // disable min max
        /*for(Card* enemyCard: enemyBoardCard){
            int score = getTradeScore(myCard, enemyCard);
            if(minTradeScore > score){
                minTradeScore = score;
            }
        }*/

        if(myCard->isGuard()){
            myDefenceTotal += myCard->getDefense();
        }
        int basicValue = myCard->calcBasicValue();

        /*if(myCard->isLethal()){
            basicValue += me->getMana();
        }*/
        if(minTradeScore != 999){
            myCardValueTotal += max(basicValue, minTradeScore + basicValue);
        }
        else{
            myCardValueTotal += basicValue;
        }
    }

    int enemyCardValueTotal = 0;
    enemyAttackTotal = 0;

    // donyoku trade search
    int* tradeValue = new int[enemyBoardCard.size()];
    bool *enemyTradeCompleted = new bool[myBoardCard.size()];
    for (int i = 0; i < enemyBoardCard.size(); i ++){
        tradeValue[i] = -999;
        enemyTradeCompleted[i] = false;
    }
    bool* myTradeCompleted = new bool[myBoardCard.size()];
    for (int i = 0; i < myBoardCard.size(); i ++){
        myTradeCompleted[i] = false;
    }
    vector<TradeScore*> trades;

    for (int i = 0; i < myBoardCard.size(); i++)
    {
        if (myDefenceTotal > 0 && !myBoardCard[i]->isGuard())
        {
            continue;
        }
        for (int n = 0; n < enemyBoardCard.size(); n++)
        {
            int score = getTradeScore(enemyBoardCard[n], myBoardCard[i]);
            if(score > 0){
                trades.push_back(new TradeScore(n, i, score));
            }
        }
    }

    sort(trades.begin(), trades.end(), [](const auto &lhs, const auto &rhs) {
        return lhs->score > rhs->score;
    });

    for(TradeScore* trade: trades){
        cerr << "trade:" << trade->score << endl;
        if (myTradeCompleted[trade->myIndex] == false && enemyTradeCompleted[trade->enemyIndex] == false){
            enemyCardValueTotal += trade->score;
            myTradeCompleted[trade->myIndex] = true;
            enemyTradeCompleted[trade->enemyIndex] = true;
        }
    }
    for (Card *enemyCard : enemyBoardCard){
        int basicValue = enemyCard->calcBasicValue();
        enemyAttackTotal += enemyCard->getAttack();
        enemyCardValueTotal += basicValue;
    }

        // old algorism
        // for (Card *enemyCard : enemyBoardCard)
        //     {
        //         int maxTradeScore = 0;
        //         for (Card *myCard : myBoardCard)
        //         {
        //             int score = getTradeScore(enemyCard, myCard);
        //             if (maxTradeScore < score)
        //             {
        //                 maxTradeScore = score;
        //             }
        //         }

        //         int basicValue = enemyCard->calcBasicValue();
        //         /*if(enemyCard->isLethal()){
        //         basicValue += me->getMana();
        //         }*/

        //         enemyAttackTotal += enemyCard->getAttack();
        //         enemyCardValueTotal += max(basicValue, maxTradeScore + basicValue);
        //     }

        // avoid enemy leathal
    int leathalPenalty = 0;
    if(enemyAttackTotal >= me->getHealth() + myDefenceTotal - LEATHAL_DANGER_VALUE){
        leathalPenalty = (enemyAttackTotal - myDefenceTotal - me->getHealth() + LEATHAL_DANGER_VALUE + 1) * 100;
    }

    double finalScore = myCardValueTotal - enemyCardValueTotal - leathalPenalty + lethalScore;
    //cerr << finalScore << endl;

    //finalScore += me->getHealth() / 1000;
    //finalScore -= enemy->getHealth() / 1000;

    if(enemyBoardCard.size() == 0){
        finalScore += 0.5;
    }
    if(myBoardCard.size() == 0){
        finalScore -= 0.5;
    }

    return finalScore;
}

class SaikiResult{
public:
    vector<Card*> useCards;
    double score;

    SaikiResult(vector<Card*> useCards, double score){
        this->useCards = useCards;
        this->score = score;
    }
};

class Game {
    vector<Card*> myHandCard;
    vector<Card*> myBoardCard;
    vector<Card*> enemyBoardCard;
    Player* me;
    Player* opponent;
    std::stringstream ss;
    vector<Game*> nextGames;

    int manaLeft;
public:
    Game(vector<Card*> myHandCard, vector<Card*> myBoardCard, vector<Card*> enemyBoardCard, Player* me, Player* opponent, string ss, int manaLeft){
        this->myHandCard = myHandCard;
        this->myBoardCard = myBoardCard;
        this->enemyBoardCard = enemyBoardCard;
        this->me = me;
        this->opponent = opponent;
        this->ss << ss;
        this->manaLeft = manaLeft;
    }

    vector<Game*> getNextGames(){
        if(nextGames.size() > 0){
            return nextGames;
        }
        else{
            // 貪欲だが、1階層目だけ展開する

            double maxScore = -99999999;
            Game* resultGame = nullptr;
            double currentBoardScore = getBoardScore(myBoardCard, enemyBoardCard, me, opponent);

            for(Card* card: myBoardCard){
                // deal yuuri trade
                if(card->getAttack() == 0 || card->getActionDone()){
                    continue;
                }
                Card* targetCard = nullptr;
                bool hasTaunt = false;
                // taunt
                for(Card* enemyCard: enemyBoardCard){
                    if(enemyCard->isGuard()){
                        hasTaunt = true;
                        Game* simulateResult = simulateTrade(card, enemyCard);
                        nextGames.push_back(simulateResult);
                    }
                }
                if (!hasTaunt) {
                    // calculate face attack value
                    Game* simulateResult = simulateTrade(card, nullptr);
                    nextGames.push_back(simulateResult);

                    for(Card* enemyCard: enemyBoardCard){
                        Game* simulateResult = simulateTrade(card, enemyCard);
                        nextGames.push_back(simulateResult);
                    }
                }
            }
        }
        return nextGames;
    }

    int originalSimulation(bool goToFace, Game** game){

        // 貪欲だが、1階層目だけ展開する

        double maxScore = -99999999;
        Game* resultGame = nullptr;

        for(Game* game: getNextGames()){
            vector<Game*> finalGames = game->getNextGames();
            for(Game* finalGame: finalGames){
                double score = finalGame->getGameBoardScore();
                if(score > maxScore){
                    maxScore = score;
                    resultGame = game;
                }
            }
        }

        // PASS
        if(resultGame == nullptr){
            resultGame = getCopy();
            resultGame->addString("PASS;");
        }
        *game = resultGame;
        return maxScore;
    }

    Game* simulation(bool goToFace){

        int maxScore = -99999999;
        Game* resultGame = nullptr;

        for(Card* card: myBoardCard){
            // deal yuuri trade
            if(card->getAttack() == 0 || card->getActionDone()){
                continue;
            }
            Card* targetCard = nullptr;
            bool hasTaunt = false;
            // taunt
            for(Card* enemyCard: enemyBoardCard){
                if(enemyCard->isGuard()){
                    hasTaunt = true;
                    Game* simulateResult = simulateTrade(card, enemyCard);
                    double score = simulateResult->getGameBoardScore();
                    if(score > maxScore){
                        maxScore = score;
                        resultGame = simulateResult;
                        if(maxScore > 9000){
                            return resultGame;
                        }
                    }
                }
            }
            if (!hasTaunt) {
                // calculate face attack value
                Game* simulateResult = simulateTrade(card, nullptr);
                double faceScore = simulateResult->getGameBoardScore();
                if(faceScore > maxScore){
                    maxScore = faceScore;
                    resultGame = simulateResult;
                    if(maxScore > 9000){
                        return resultGame;
                    }
                }

                for(Card* enemyCard: enemyBoardCard){
                    Game* simulateResult = simulateTrade(card, enemyCard);
                    double score = simulateResult->getGameBoardScore();
                    if(score > maxScore){
                        maxScore = score;
                        resultGame = simulateResult;
                        if(maxScore > 9000){
                            return resultGame;
                        }
                    }
                }
            }
        }

        // PASS
        if(resultGame == nullptr){
            resultGame = getCopy();
            resultGame->addString("PASS;");
        }

        return resultGame;
    }


Game* simulateTrade(Card* attacker, Card* target){
    vector<Card*> myBoardCardCopy;
    vector<Card*> enemyBoardCardCopy;
    Player* meCopy = me->getPlayerCopy();
    Player* enemyCopy = opponent->getPlayerCopy();
    std::stringstream ssCopy;
    ssCopy << ss.str(); // copy everything inside ss1's buffer to ss2's buffer
    // make copy board
    for(Card* card: myBoardCard){
        if(attacker->getID() == card->getID()){
            attacker = card->getCardCopy();
            myBoardCardCopy.push_back(attacker);
        }
        else{
            myBoardCardCopy.push_back(card);
        }
    }
    for(Card* card: enemyBoardCard){
        if(target != nullptr && target->getID() == card->getID()){
            target = card->getCardCopy();
            enemyBoardCardCopy.push_back(target);
        }
        else{
            enemyBoardCardCopy.push_back(card);
        }
    }
    if(target != nullptr){
        if(attacker->isDrain() && !target->isWard()){
            meCopy->takeDamage(-attacker->getAttack());
        }
        executeFight(attacker, target);
        // trunple
        if(attacker->isBreakThrough()){
            if(target->getDefense() < 0){
                enemyCopy->takeDamage(-target->getDefense());
            }
        }
    }
    // face
    else {
        if(attacker->isDrain()){
            meCopy->takeDamage(-attacker->getAttack());
        }
        attacker->doAction();
        enemyCopy->takeDamage(attacker->getAttack());
    }
    // jyoukyou kiin syori
    auto itr = myBoardCardCopy.begin();
    while (itr != myBoardCardCopy.end())
    {
        if ((*itr)->getDefense() <= 0)
        {
            itr = myBoardCardCopy.erase(itr);
        }
        else
        {
            itr++;
        }
    }

    itr = enemyBoardCardCopy.begin();
    while (itr != enemyBoardCardCopy.end())
    {
        if ((*itr)->getDefense() <= 0)
        {
            itr = enemyBoardCardCopy.erase(itr);
        }
        else
        {
            itr++;
        }
    }
    if(target != nullptr){
        ssCopy << "ATTACK " << attacker->getID() << " " << target->getID() << ";";
    }
    else{
        ssCopy << "ATTACK " << attacker->getID() << " " << -1 << ";";
    }
    return new Game(myHandCard, myBoardCardCopy, enemyBoardCardCopy, meCopy, enemyCopy, ssCopy.str(), manaLeft);
}


    Game* getCopy(){
        vector<Card*> myHandCardCopy;
        vector<Card*> myBoardCardCopy;
        vector<Card*> enemyBoardCardCopy;
        Player* meCopy;
        Player* opponentCopy;
        std::stringstream ssCopy;
        ssCopy << ss.str(); // copy everything inside ss1's buffer to ss2's buffer

        // make copy board
        for(Card* card: myHandCard){
            myHandCardCopy.push_back(card->getCardCopy());
        }
        for(Card* card: myBoardCard){
            myBoardCardCopy.push_back(card->getCardCopy());
        }
        for(Card* card: enemyBoardCard){
            enemyBoardCardCopy.push_back(card->getCardCopy());
        }
        meCopy = me->getPlayerCopy();
        opponentCopy = opponent->getPlayerCopy();
        return new Game(myHandCardCopy, myBoardCardCopy, enemyBoardCardCopy, meCopy, opponentCopy, ssCopy.str(), manaLeft);
    }

    double saikiUpperTime = 50;
    std::chrono::system_clock::time_point saikiTime; // 型は auto で可


    SaikiResult* saikiPlayCard(int index, vector<Card*> currentPlay, int leftMana, int boardLeft, Game* current){
        SaikiResult* result = new SaikiResult(currentPlay, 0);
        vector<Card*> playCard;

        double elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(saikiTime-start).count(); //処理に要した時間をミリ秒に変換
        cerr << "time:" << elapsed << endl;
        if(elapsed > saikiUpperTime){
            result->score = -99999999;
            return result;
        }
        if(myHandCard.size() <= index){
            saikiTime = std::chrono::system_clock::now();  // 計測終了時間
            Game* copyGame = current->getCopy();
            int score = 0;
            int totalDraw = 0;
            for(Card* card: currentPlay){
                totalDraw += card->getDraw();
                // use health only cards
                if(card->getType() == 3 && card->getDefense() == 0){
                    totalDraw += 2;
                }
            }
            // simulate trade
            while(copyGame->getCommands().find("PASS") == std::string::npos){
                copyGame = copyGame->simulation(false);
            }
            result->score = copyGame->getGameBoardScore() - currentPlay.size() + totalDraw;
            return result;
        }
        result = saikiPlayCard(index + 1, currentPlay, leftMana, boardLeft, current);
        if(boardLeft == 0 && myHandCard[index]->getType() == 0){
            return result;
        }

        if(myHandCard[index]->getCost() <= leftMana){
            if(myHandCard[index]->getType() == 0){
                boardLeft --;
            }
            vector<Card*> newPlay;
            SaikiResult* tmpResult;
            int tmpScore = 0;
            for(Card* card: currentPlay){
                newPlay.push_back(card);
            }
            Card* playCardCopy = myHandCard[index]->getCardCopy();
            newPlay.push_back(playCardCopy);
            if(playCardCopy->getType() == 0){
                boardLeft --;
            }

            Game* newBoard = current->getCopy();
            newBoard->setBestCardPlay(playCardCopy, newBoard->getGameBoardScore());
            newBoard->playCard(playCardCopy);

            tmpResult = saikiPlayCard(index + 1, newPlay, leftMana - myHandCard[index]->getCost(), boardLeft, newBoard);
            if(tmpResult->score > result->score){
                result = tmpResult;
            }
        }

        return result;
    }

    double getGameBoardScore(){
        return getBoardScore(myBoardCard, enemyBoardCard, me, opponent);
    }

    vector<Card*> calcBestPlayCards(bool goToFace){
        vector<Card*> firstCards;
        return saikiPlayCard(0, firstCards, manaLeft, 6 - myBoardCard.size(), this)->useCards;
    }

    void setBestCardPlay(Card* hand, int currentBoardScore){
        // health change
        Player* copyMe = me->getPlayerCopy();
        Player* copyOpponent = opponent->getPlayerCopy();
        copyMe->takeDamage(-hand->getMyHealthChange());
        copyOpponent->takeDamage(-hand->getOpponentHealthChange());

        if(hand->getType() == 1){
            if(myBoardCard.size() != 0){
                double maxScore = -99999;
                for(Card* targetCreature : myBoardCard){
                    vector<Card*> myBoardCardCopy;
                    for(Card* card: myBoardCard){
                        if(targetCreature->getID() == card->getID()){
                            Card* buffedCard = card->getCardCopy();
                            buffedCard->buff(hand);
                            myBoardCardCopy.push_back(buffedCard);
                        }
                        else{
                            myBoardCardCopy.push_back(card);
                        }
                    }
                    Game* current = new Game(myHandCard, myBoardCardCopy, enemyBoardCard, copyMe, copyOpponent, "", manaLeft);
                    while(current->getCommands().find("PASS") == std::string::npos){
                        current = current->simulation(false);
                    }
                    double score = current->getGameBoardScore() - currentBoardScore - 1 + hand->getDraw();
                    if(score > maxScore){
                        maxScore = score;
                        std::stringstream ss;
                        ss << "USE " << hand->getID() << " " << targetCreature->getID() << ";";
                        hand->setCommand(ss.str());
                    }
                }
            }
            else{

            }
        }
        else if(hand->getType() == 2){
            if(enemyBoardCard.size() != 0){
                double maxScore = -99999;
                for(Card* targetCreature : enemyBoardCard){
                    vector<Card*> enemyBoardCardCopy;
                    for(Card* card: enemyBoardCard){
                        if(targetCreature->getID() == card->getID()){
                            Card* buffedCard = card->getCardCopy();
                            buffedCard->deBuff(hand);
                            enemyBoardCardCopy.push_back(buffedCard);
                            // jyoukyou kiin syori
                            auto itr = enemyBoardCardCopy.begin();
                            itr = enemyBoardCardCopy.begin();
                            while (itr != enemyBoardCardCopy.end())
                            {
                                if ((*itr)->getDefense() <= 0)
                                {
                                    itr = enemyBoardCardCopy.erase(itr);
                                }
                                else
                                {
                                    itr++;
                                }
                            }
                        }
                        else{
                            enemyBoardCardCopy.push_back(card);
                        }
                    }
                    Game* current = new Game(myHandCard, myBoardCard, enemyBoardCardCopy, copyMe, copyOpponent, "", manaLeft);
                    while(current->getCommands().find("PASS") == std::string::npos){
                        current = current->simulation(false);
                    }
                    double score = current->getGameBoardScore() - currentBoardScore - 1 + hand->getDraw();
                    if(score > maxScore){
                        maxScore = score;
                        std::stringstream ss;
                        ss << "USE " << hand->getID() << " " << targetCreature->getID() << ";";
                        hand->setCommand(ss.str());
                    }
                }
            }
            else{

            }
        }
        else if(hand->getType() == 3){
            if(hand->getDefense() < 0){
                double maxScore = -99999;
                // target player score
                Player* damagedOpponent = copyOpponent->getPlayerCopy();
                damagedOpponent->takeDamage(-hand->getDefense());
                Game* current = new Game(myHandCard, myBoardCard, enemyBoardCard, copyMe, damagedOpponent, "", manaLeft);
                while(current->getCommands().find("PASS") == std::string::npos){
                    current = current->simulation(false);
                }
                maxScore = current->getGameBoardScore() - currentBoardScore - 1 + hand->getDraw();
                std::stringstream ss;
                ss << "USE " << hand->getID() << " " << "-1" << ";";
                hand->setCommand(ss.str());

                for(Card* targetCreature : enemyBoardCard){
                    vector<Card*> enemyBoardCardCopy;
                    for(Card* card: enemyBoardCard){
                        if(targetCreature->getID() == card->getID()){
                            Card* buffedCard = card->getCardCopy();
                            buffedCard->deBuff(hand);
                            enemyBoardCardCopy.push_back(buffedCard);
                            // jyoukyou kiin syori
                            auto itr = enemyBoardCardCopy.begin();
                            itr = enemyBoardCardCopy.begin();
                            while (itr != enemyBoardCardCopy.end())
                            {
                                if ((*itr)->getDefense() <= 0)
                                {
                                    itr = enemyBoardCardCopy.erase(itr);
                                }
                                else
                                {
                                    itr++;
                                }
                            }
                        }
                        else{
                            enemyBoardCardCopy.push_back(card);
                        }
                    }
                    Game* current = new Game(myHandCard, myBoardCard, enemyBoardCardCopy, copyMe, copyOpponent, "", manaLeft);
                    while(current->getCommands().find("PASS") == std::string::npos){
                        current = current->simulation(false);
                    }
                    double score = current->getGameBoardScore() - currentBoardScore - 1 + hand->getDraw();
                    if(score > maxScore){
                        maxScore = score;
                        std::stringstream ss;
                        ss << "USE " << hand->getID() << " " << targetCreature->getID() << ";";
                        hand->setCommand(ss.str());
                    }
                }
            }
            else{
                int score = getBoardScore(myBoardCard, enemyBoardCard, copyMe, copyOpponent) - currentBoardScore + 1 + hand->getDraw();
                std::stringstream ss;
                ss << "USE " << hand->getID() << " -1" << ";";
                hand->setCommand(ss.str());
            }
        }
        else if(hand->getType() == 0){
            if(hand->isCharge() && myBoardCard.size() < 6){
                vector<Card*> myBoardCardCopy;
                for(Card* card: myBoardCard){
                    myBoardCardCopy.push_back(card);
                }
                myBoardCardCopy.push_back(hand);

                Game* current = new Game(myHandCard, myBoardCardCopy, enemyBoardCard, copyMe, copyOpponent, "", manaLeft);
                while(current->getCommands().find("PASS") == std::string::npos){
                    current = current->simulation(false);
                }
                double score = current->getGameBoardScore() - currentBoardScore - 1 + hand->getDraw();
                std::stringstream ss;
                ss << "SUMMON " << hand->getID() << ";";
                hand->setCommand(ss.str());
            }
            else if(myBoardCard.size() < 6){
                vector<Card*> myBoardCardCopy;
                for(Card* card: myBoardCard){
                    myBoardCardCopy.push_back(card);
                }
                myBoardCardCopy.push_back(hand);
                std::stringstream ss;
                ss << "SUMMON " << hand->getID() << ";";
                hand->setCommand(ss.str());
            }
            else{

            }
        }
#ifdef DEBUG_PRINT
        cerr << hand->getID() << "playValueBefore=" << hand->getPlayScore() << endl;
#endif
    }

    void playCard(Card* card){
        // remove from hand
        auto itr = myHandCard.begin();
        while (itr != myHandCard.end())
        {
            if ((*itr)->getID() == card->getID())
            {
                itr = myHandCard.erase(itr);
                break;
            }
            else
            {
                itr++;
            }
        }

        // health change
        me->takeDamage(-card->getMyHealthChange());
        opponent->takeDamage(-card->getOpponentHealthChange());

        if(card->getType() == 0 && myBoardCard.size() < 6){
            ss << "SUMMON " << card->getID() << ";";
            addMyCardToBoard(card);
            // charge
            if(!card->isCharge()){
                card->doAction();
            }
            manaLeft -= card->getCost();
        }
        else if(card->getType() == 1 && card->getCommand() != ""){
            ss << card->getCommand();
            int targetID = std::atoi(split(card->getCommand(), ' ')[2].c_str());
            for(Card* target: myBoardCard){
                if(targetID == target->getID()){
                    target->buff(card);
                    break;
                }
            }
            manaLeft -= card->getCost();
        }
        else if(card->getType() == 2 && card->getCommand() != ""){
            ss << card->getCommand();
            int targetID = std::atoi(split(card->getCommand(), ' ')[2].c_str());
            for(Card* target: enemyBoardCard){
                if(targetID == target->getID()){
                    target->deBuff(card);
                    // jyoukyou kiin syori
                    auto itr = enemyBoardCard.begin();
                    itr = enemyBoardCard.begin();
                    while (itr != enemyBoardCard.end())
                    {
                        if ((*itr)->getDefense() <= 0)
                        {
                            itr = enemyBoardCard.erase(itr);
                        }
                        else
                        {
                            itr++;
                        }
                    }
                    break;
                }
            }
            manaLeft -= card->getCost();
        }
        else if(card->getType() == 3 && card->getCommand() != ""){
            ss << card->getCommand();
            int targetID = std::atoi(split(card->getCommand(), ' ')[2].c_str());
            if(targetID != -1){
                for(Card* target: enemyBoardCard){
                    if(targetID == target->getID()){
                        target->deBuff(card);
                        // jyoukyou kiin syori
                        auto itr = enemyBoardCard.begin();
                        itr = enemyBoardCard.begin();
                        while (itr != enemyBoardCard.end())
                        {
                            if ((*itr)->getDefense() <= 0)
                            {
                                itr = enemyBoardCard.erase(itr);
                            }
                            else
                            {
                                itr++;
                            }
                        }
                        break;
                    }
                }
            }
            manaLeft -= card->getCost();
        }
    }

    string getCommands(){
        return ss.str();
    }

    void addMyCardToBoard(Card* card){
        myBoardCard.push_back(card);
    }

    void addString(string str){
       ss << str;
    }
};

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/

// mana curve
int* manaCurve = new int[13];
int idealManaCurve[13] = {2, 6, 4, 6, 3, 3, 2, 2, 1, 1, 1, 1, 1};

// by statistics
int senteIdealManaCurve[13] = {0, 0, 2, 6, 5, 5, 6, 4, 4, 2, 0, 0, 2};
int goteIdealManaCurve[13] = {5, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// card cost counts
int catdCostCounts[13] = {7,12,33,28,30,18,15,7,5,3,0,0,2};

int* currentDeck = new int[160];
int pickedCard = 0;
int HIDDEN_SIZE = 100;
vector<vector<vector<double> > > w;
vector<vector<double> > b;

vector<vector<double> > relu(vector<vector<double> > input){
    int r = input.size();
    int c = input[0].size();
    for(int i = 0; i < r; i ++){
        for(int n = 0; n < c; n ++){
            if(input[i][n] < 0){
                input[i][n] = 0;
            }
        }
    }
    return input;
}

vector<vector<double> > sigmoid(vector<vector<double> > input){
    int r = input.size();
    int c = input[0].size();
    for(int i = 0; i < r; i ++){
        for(int n = 0; n < c; n ++){
            input[i][n] = 1/(1 + exp(-input[i][n]));
        }
    }
    return input;
}

vector<vector<double> > tanh(vector<vector<double> > input){
    int r = input.size();
    int c = input[0].size();
    for(int i = 0; i < r; i ++){
        for(int n = 0; n < c; n ++){
            input[i][n] = (1 - exp(-2 * input[i][n])) / (1 + exp(-2 * input[i][n]));
        }
    }
    return input;
}

string activation;

vector<vector<double> > applyActivation(vector<vector<double> > input){
    cerr << activation << endl;
    if(activation == "\"relu\""){
        return relu(input);
    }
    if(activation == "\"tanh\""){
        return tanh(input);
    }
    if(activation == "\"sigmoid\""){
        return sigmoid(input);
    }
    //exit(1);
}

vector<vector<double> > getOneHot(){

    vector<vector<double> > result;
    result.resize(1);
    result[0].resize(643);
    for(int i = 0; i < 160; i++){
        if(currentDeck[i] == 0){
            result[0][i * 4] = 1;
        }
        if(currentDeck[i] == 1){
            result[0][i * 4 + 1] = 1;
        }
        if(currentDeck[i] == 2){
            result[0][i * 4 + 2] = 1;
        }
        if(currentDeck[i] >= 3){
            result[0][i * 4 + 3] = 1;
        }
        /*result[0][i * 4] = 1;
        result[0][i * 4 + 1] = 1;
        result[0][i * 4 + 2] = 1;
        result[0][i * 4 + 3] = 1;*/
    }
    if(isSente){
        result[0][640] = 1;
        result[0][641] = 0;
    }
    else{
        result[0][640] = 1;
        result[0][641] = 0;
    }
    result[0][642] = totalPick;
    return result;
}

vector<vector<double> > calcNN(){
    vector<vector<double> > inputVector = getOneHot();

    // calc matrix 1
    cerr << "layer1" << endl;
    vector<vector<double> > x1 = mulMatrix(inputVector, w[0]);
    cerr << "endmul" << endl;
    for(int i = 0; i < HIDDEN_SIZE; i ++){
        x1[0][i] += b[0][i];
    }
    //applyActivation(x1);
    x1 = relu(x1);
    // calc matrix 2
    cerr << "layer2" << endl;
    vector<vector<double> > x2 = mulMatrix(x1, w[1]);
    for(int i = 0; i < HIDDEN_SIZE; i ++){
        x2[0][i] += b[1][i];
    }
    //applyActivation(x2);
    x2 = relu(x2);
    // calc matrix 3
    cerr << "layer3" << endl;
    vector<vector<double> > x3 = mulMatrix(x2, w[2]);
    for(int i = 0; i < 160; i ++){
        x3[0][i] += b[2][i];
    }
    x3 = tanh(x3);
    //applyActivation(x3);
    return x3;
}

string modelDir;
string logFileName;
string logDirName;
string confDir;
int hidden_size = 0;

#ifdef READ_EPOCH_FILE
void readModel(){
    std::string str;

    // read activation
    std::ifstream ifs(confDir);
    if (ifs.fail()){
        std::cerr << "失敗" << std::endl;
        return;
    }
    while (getline(ifs, str)){
        str.erase(remove(str.begin(), str.end(),' '), str.end());
        if(str.substr(0, 10) == "activation"){
            activation = str.substr(11);
        }
        if(str.substr(0, 10) == "activation"){
            activation = str.substr(11);
        }
    }

    // load bias
    for(int n = 0; n < 3; n ++){
        cerr << "read bias file" << n << endl;
        string fileName;
        int size;
        if(n == 0){
            fileName = modelDir + "/Inference-Forward1-biases.csv";
        } else if(n == 1){
            fileName = modelDir + "/Inference-Forward2-biases.csv";
        } else if(n == 2){
            fileName = modelDir + "/Inference-Output-biases.csv";
        }
        std::ifstream ifs(fileName);
        if (ifs.fail()){
            std::cerr << "失敗" << std::endl;
            return;
        }
        //b[n] = new double[size];
        vector<double> oneLine;
        while (getline(ifs, str)){
            oneLine.push_back(std::atof(str.c_str()));
        }
        b.push_back(oneLine);
    }

    // load weight
    for(int n = 0; n < 3; n ++){
        cerr << "read weight file" << n << endl;
        string fileName;
        int size1, size2;
        if(n == 0){
            fileName = modelDir  + "/Inference-Forward1-weights.csv";
        } else if(n == 1){
            fileName = modelDir  + "/Inference-Forward2-weights.csv";
        } else if(n == 2){
            fileName = modelDir  + "/Inference-Output-weights.csv";
        }
        std::ifstream ifs(fileName);
        if (ifs.fail()){
            std::cerr << "失敗" << std::endl;
            return;
        }
        vector< vector <double> > weight;
        while (getline(ifs, str)){
            vector<string> result = split(str, ' ');
            vector<double> oneLine;
            for(int j = 0; j < result.size(); j ++){
                oneLine.push_back(std::atof(result[j].c_str()));
            }
            weight.push_back(oneLine);
        }
        w.push_back(weight);

        /*vector< vector <double> > weight;
        while (getline(ifs, str)){
            vector<string> result = split(str, ' ');
            weight.resize(result.size());
            for(int j = 0; j < result.size(); j ++){
                weight[j].push_back(std::atof(result[j].c_str()));
            }
        }
        w.push_back(weight);*/

    }
    cerr << "read weight done" << endl;
}
#endif

int main(int argc,char *argv[])
{

#ifdef DEBUG
    cerr << "debug mode" << endl;
#endif
#ifdef RANDOM_PICK
    cerr << "random mode" << endl;
#endif
#ifdef READ_EPOCH_FILE
    cerr << "epoch mode" << endl;
#endif
#ifdef TEKAGEN
    cerr << "tekagen mode" << endl;
#endif
#ifdef DEBUG_PRINT
    cerr << "debug print mode" << endl;
#endif


#ifdef DEBUG
    logDirName = argv[1];
#endif

#ifdef READ_EPOCH_FILE
    modelDir = argv[2];
    confDir = argv[3];
    readModel();
    for(int i = 0; i < 160; i ++){
        currentDeck[i] = 1;
    }
    vector<vector<double> > nn = calcNN();
    for(int i = 0; i < 160; i ++){
        cerr << nn[0][i] << endl;
    }
#endif

    for(int i = 0; i < 160; i ++){
        currentDeck[i] = 0;
    }
    for(int i = 0; i < 13; i ++){
        manaCurve[i] = 0;
    }
    // game loop
    while (1) {
        vector<Card*> myHandCard;
        vector<Card*> myBoardCard;
        vector<Card*> enemyBoardCard;
        Player* me;
        Player* opponent;
        for (int i = 0; i < 2; i++) {
            int playerHealth;
            int playerMana;
            int playerDeck;
            int playerRune;
            cin >> playerHealth >> playerMana >> playerDeck >> playerRune; cin.ignore();
            cerr << playerHealth << " " << playerMana << " " << playerDeck << " " << playerRune << endl;
            if(i == 0){
                me = new Player(playerHealth, playerMana, playerDeck, playerRune);
            }
            else {
                opponent = new Player(playerHealth, playerMana, playerDeck, playerRune);
            }
        }
        int opponentHand;
        cin >> opponentHand; cin.ignore();
        int cardCount;
        cin >> cardCount; cin.ignore();
        for (int i = 0; i < cardCount; i++) {
            int cardNumber;
            int instanceId;
            int location;
            int cardType;
            int cost;
            int attack;
            int defense;
            string abilities;
            int myHealthChange;
            int opponentHealthChange;
            int cardDraw;
            cin >> cardNumber >> instanceId >> location >> cardType >> cost >> attack >> defense >> abilities >> myHealthChange >> opponentHealthChange >> cardDraw; cin.ignore();
            cerr << cardNumber << " " << instanceId << " " << location << " " << cardType << " " << cost << " " << attack << " " << defense << " " << abilities << " " << myHealthChange << " " << opponentHealthChange << " " << cardDraw << endl;
            Card* card = new Card(cardNumber, instanceId, location, cardType, cost, attack, defense, abilities, myHealthChange, opponentHealthChange, cardDraw, false);
            if(location == 0){
                myHandCard.push_back(card);
            }
            else if (location == 1){
                myBoardCard.push_back(card);
            }
            else if(location == -1){
                enemyBoardCard.push_back(card);
            }
        }

        start = std::chrono::system_clock::now(); // 計測開始時間

        // while draft phase
        Card* lowestCard = nullptr;

        if(me->getDeck() == opponent->getDeck()){
            isSente = true;
        }
        else{
            isSente = false;
        }

        int lowestIndex = -1;
        double maxScore = -9999999;
        int i = 0;
        double expectedManaCurve[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
        for(int n = 0; n < 13; n ++){
            expectedManaCurve[n] = manaCurve[n] + (30 - pickedCard - 1) * ((double)catdCostCounts[n] / 160);
#ifdef DEBUG_PRINT
            cerr << "mana" << n << ":" << manaCurve[n] << endl;
            cerr << "expedtedmana" << n << ":" << expectedManaCurve[n] << endl;
#endif
        }


        // think about mana curve
        if(me->getMana() == 0){
            for(Card* card: myHandCard){
                /*double score;
                if(me->getDeck() == opponent->getDeck()){
                    score = senteManaCurve[card->getCost()][((int)expectedManaCurve[card->getCost()]) + 1] -  senteManaCurve[card->getCost()][((int)expectedManaCurve[card->getCost()])];
                }
                else{
                    score = goteManaCurve[card->getCost()][((int)expectedManaCurve[card->getCost()]) + 1] -  goteManaCurve[card->getCost()][((int)expectedManaCurve[card->getCost()])];
                }
                cerr << score << endl;
#ifndef TEKAGEN
                if(me->getDeck() == opponent->getDeck()){
                    //score += senteCardValues[card->getCardNumber() - 1] * 5;
                    score += senteCardWinrate[card->getCardNumber() - 1][currentDeck[card->getCardNumber() - 1] + 1] - senteCardWinrate[card->getCardNumber() - 1][currentDeck[card->getCardNumber() - 1]];
                }
                else{
                    score += goteCardWinrate[card->getCardNumber() - 1][currentDeck[card->getCardNumber() - 1] + 1] - goteCardWinrate[card->getCardNumber() - 1][currentDeck[card->getCardNumber() - 1]];
                    //score += goteCardValues[card->getCardNumber() - 1] * 5;
                }
                cerr << score << endl;
                //score = cardWinrate[card->getCardNumber() - 1][currentDeck[card->getCardNumber() - 1] + 1] - cardWinrate[card->getCardNumber() - 1][currentDeck[card->getCardNumber() - 1]];
#endif*/
                double score = idealManaCurve[card->getCost()] - expectedManaCurve[card->getCost()];
#ifndef TEKAGEN

                score += cardValues[card->getCardNumber() - 1] * 200;
                /*if(me->getDeck() != opponent->getDeck()){
                    score += senteCardValues[card->getCardNumber() - 1] * 200;
                }
                else{
                    score += goteCardValues[card->getCardNumber() - 1] * 200;
                }*/
                //score = cardWinrate[card->getCardNumber() - 1][currentDeck[card->getCardNumber() - 1] + 1] - cardWinrate[card->getCardNumber() - 1][currentDeck[card->getCardNumber() - 1]];
#endif
#ifdef READ_EPOCH_FILE
                score = calcNN()[0][card->getCardNumber() - 1];
#endif
                /*if(card->getType() != 0){
                    score = -9999;
                }*/
                cerr << maxScore << endl;
                if(lowestCard == nullptr || maxScore < score){
                    lowestCard = card;
                    lowestIndex = i;
                    maxScore = score;
                }
                i ++;
            }
#ifdef RANDOM_PICK
            std::random_device rd;
            std::mt19937 mt(rd());
            std::uniform_int_distribution<int> dice(0,10);
            int rnd = dice(mt);
            if(rnd <= 2){
                lowestIndex = rnd;
                lowestCard = myHandCard[lowestIndex];
            }
#endif

            cerr << lowestIndex << endl;
            cout << "PICK " << lowestIndex << endl;
            totalPick ++;

#ifdef DEBUG
            ofstream outputfile(logDirName, ios::app);
            for(int i = 0; i < 160; i++){
                outputfile << currentDeck[i] << " ";
            }
            outputfile << endl;
            for(Card* card: myHandCard){
                outputfile << card->getCardNumber() - 1 << " ";
            }
            outputfile << endl;
            outputfile << lowestCard->getCardNumber() - 1 << endl;
            outputfile.close();
#endif DEBUG

            currentDeck[lowestCard->getCardNumber() - 1]++;
            manaCurve[lowestCard->getCost()]++;
            pickedCard ++;
        }
        else{
            // judge leathal
            bool goToFace = false;
            int totalAttack = 0;
            int totalDefence = 0;
            for(Card* card: myBoardCard){
                totalAttack += card->getAttack();
            }
            for(Card* card: enemyBoardCard){
                totalDefence += card->getDefense();
            }
            if(totalAttack * 2 > opponent->getHealth() + totalDefence){
                goToFace = true;
            }

            // battle phase
            cerr << goToFace << endl;
            Game* current = new Game(myHandCard, myBoardCard, enemyBoardCard, me, opponent, "", me->getMana());

            // make play card score
            vector<Card*> beforePlayCards = current->calcBestPlayCards(goToFace);
            for(Card* card: beforePlayCards){
                cerr << "beforePlay:" << card->getCommand() << endl;
                current->playCard(card);
            }


            vector<Game*> history;
            vector<int> scoreHistory;
            history.push_back(current);
            scoreHistory.push_back(current->getGameBoardScore());
            while(current->getCommands().find("PASS") == std::string::npos){
                Game* next;
                int score = current->originalSimulation(goToFace, &next);
                history.push_back(next);
                scoreHistory.push_back(score);
                current = next;
                //cerr << current->getCommands() << endl;
            }

            // trace
            /*for(int i = history.size() - 1; i > 0; i --){
                if(scoreHistory[i] - scoreHistory[i - 1] > 0){
                    current = history[i - 1];
                    current->addString("PASS;");
                }
                else{
                    break;
                }
            }*/



            int passIndex = current->getCommands().find("PASS");

            vector<Card*> playCards;

            // play cards untill no more want to play
            playCards = current->calcBestPlayCards(false);
            while(playCards.size() > 0){
                for(Card* card: playCards){
                    current -> playCard(card);
                }
                playCards = current->calcBestPlayCards(false);
            }

            // use chage cards
            current = current->simulation(goToFace);
            while(current->getCommands().find("PASS", passIndex + 1) == std::string::npos){
                current = current->simulation(goToFace);
                cerr << current->getCommands() << endl;
            }

            std::chrono::system_clock::time_point  end; // 型は auto で可
            end = std::chrono::system_clock::now();  // 計測終了時間
            double elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end-start).count(); //処理に要した時間をミリ秒に変換

            cout << current->getCommands() << "PASS " << elapsed << "ms;" << endl;
        }

        // Write an action using cout. DON'T FORGET THE "<< endl"
        // To debug: cerr << "Debug messages..." << endl;


    }
}
